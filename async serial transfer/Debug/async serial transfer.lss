
async serial transfer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c2  00800200  00001d24  00001db8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001d24  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000170  008002c2  008002c2  00001e7a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001e7a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001ed8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002d0  00000000  00000000  00001f18  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000304d  00000000  00000000  000021e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001336  00000000  00000000  00005235  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000165c  00000000  00000000  0000656b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000754  00000000  00000000  00007bc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001080  00000000  00000000  0000831c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001554  00000000  00000000  0000939c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000250  00000000  00000000  0000a8f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	77 c0       	rjmp	.+238    	; 0xf0 <__ctors_end>
       2:	00 00       	nop
       4:	95 c0       	rjmp	.+298    	; 0x130 <__bad_interrupt>
       6:	00 00       	nop
       8:	93 c0       	rjmp	.+294    	; 0x130 <__bad_interrupt>
       a:	00 00       	nop
       c:	91 c0       	rjmp	.+290    	; 0x130 <__bad_interrupt>
       e:	00 00       	nop
      10:	8f c0       	rjmp	.+286    	; 0x130 <__bad_interrupt>
      12:	00 00       	nop
      14:	8d c0       	rjmp	.+282    	; 0x130 <__bad_interrupt>
      16:	00 00       	nop
      18:	8b c0       	rjmp	.+278    	; 0x130 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	89 c0       	rjmp	.+274    	; 0x130 <__bad_interrupt>
      1e:	00 00       	nop
      20:	87 c0       	rjmp	.+270    	; 0x130 <__bad_interrupt>
      22:	00 00       	nop
      24:	85 c0       	rjmp	.+266    	; 0x130 <__bad_interrupt>
      26:	00 00       	nop
      28:	83 c0       	rjmp	.+262    	; 0x130 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	81 c0       	rjmp	.+258    	; 0x130 <__bad_interrupt>
      2e:	00 00       	nop
      30:	7f c0       	rjmp	.+254    	; 0x130 <__bad_interrupt>
      32:	00 00       	nop
      34:	7d c0       	rjmp	.+250    	; 0x130 <__bad_interrupt>
      36:	00 00       	nop
      38:	7b c0       	rjmp	.+246    	; 0x130 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	79 c0       	rjmp	.+242    	; 0x130 <__bad_interrupt>
      3e:	00 00       	nop
      40:	77 c0       	rjmp	.+238    	; 0x130 <__bad_interrupt>
      42:	00 00       	nop
      44:	78 c0       	rjmp	.+240    	; 0x136 <__vector_17>
      46:	00 00       	nop
      48:	73 c0       	rjmp	.+230    	; 0x130 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	71 c0       	rjmp	.+226    	; 0x130 <__bad_interrupt>
      4e:	00 00       	nop
      50:	6f c0       	rjmp	.+222    	; 0x130 <__bad_interrupt>
      52:	00 00       	nop
      54:	6d c0       	rjmp	.+218    	; 0x130 <__bad_interrupt>
      56:	00 00       	nop
      58:	6b c0       	rjmp	.+214    	; 0x130 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	69 c0       	rjmp	.+210    	; 0x130 <__bad_interrupt>
      5e:	00 00       	nop
      60:	67 c0       	rjmp	.+206    	; 0x130 <__bad_interrupt>
      62:	00 00       	nop
      64:	93 c5       	rjmp	.+2854   	; 0xb8c <__vector_25>
      66:	00 00       	nop
      68:	ba c5       	rjmp	.+2932   	; 0xbde <__vector_26>
      6a:	00 00       	nop
      6c:	61 c0       	rjmp	.+194    	; 0x130 <__bad_interrupt>
      6e:	00 00       	nop
      70:	5f c0       	rjmp	.+190    	; 0x130 <__bad_interrupt>
      72:	00 00       	nop
      74:	5d c0       	rjmp	.+186    	; 0x130 <__bad_interrupt>
      76:	00 00       	nop
      78:	5b c0       	rjmp	.+182    	; 0x130 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	59 c0       	rjmp	.+178    	; 0x130 <__bad_interrupt>
      7e:	00 00       	nop
      80:	a8 c0       	rjmp	.+336    	; 0x1d2 <__vector_32>
      82:	00 00       	nop
      84:	55 c0       	rjmp	.+170    	; 0x130 <__bad_interrupt>
      86:	00 00       	nop
      88:	53 c0       	rjmp	.+166    	; 0x130 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	51 c0       	rjmp	.+162    	; 0x130 <__bad_interrupt>
      8e:	00 00       	nop
      90:	34 c6       	rjmp	.+3176   	; 0xcfa <__vector_36>
      92:	00 00       	nop
      94:	5b c6       	rjmp	.+3254   	; 0xd4c <__vector_37>
      96:	00 00       	nop
      98:	4b c0       	rjmp	.+150    	; 0x130 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	49 c0       	rjmp	.+146    	; 0x130 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	47 c0       	rjmp	.+142    	; 0x130 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	45 c0       	rjmp	.+138    	; 0x130 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	43 c0       	rjmp	.+134    	; 0x130 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	41 c0       	rjmp	.+130    	; 0x130 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	3f c0       	rjmp	.+126    	; 0x130 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	3d c0       	rjmp	.+122    	; 0x130 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	3b c0       	rjmp	.+118    	; 0x130 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	39 c0       	rjmp	.+114    	; 0x130 <__bad_interrupt>
      be:	00 00       	nop
      c0:	37 c0       	rjmp	.+110    	; 0x130 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	35 c0       	rjmp	.+106    	; 0x130 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	33 c0       	rjmp	.+102    	; 0x130 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	8e c6       	rjmp	.+3356   	; 0xdea <__vector_51>
      ce:	00 00       	nop
      d0:	b5 c6       	rjmp	.+3434   	; 0xe3c <__vector_52>
      d2:	00 00       	nop
      d4:	2d c0       	rjmp	.+90     	; 0x130 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	3f c7       	rjmp	.+3710   	; 0xf58 <__vector_54>
      da:	00 00       	nop
      dc:	66 c7       	rjmp	.+3788   	; 0xfaa <__vector_55>
      de:	00 00       	nop
      e0:	27 c0       	rjmp	.+78     	; 0x130 <__bad_interrupt>
	...

000000e4 <__trampolines_end>:
      e4:	63 64       	ori	r22, 0x43	; 67
      e6:	69 6e       	ori	r22, 0xE9	; 233
      e8:	6f 70       	andi	r22, 0x0F	; 15
      ea:	73 75       	andi	r23, 0x53	; 83
      ec:	78 58       	subi	r23, 0x88	; 136
      ee:	5b 00       	.word	0x005b	; ????

000000f0 <__ctors_end>:
      f0:	11 24       	eor	r1, r1
      f2:	1f be       	out	0x3f, r1	; 63
      f4:	cf ef       	ldi	r28, 0xFF	; 255
      f6:	d1 e2       	ldi	r29, 0x21	; 33
      f8:	de bf       	out	0x3e, r29	; 62
      fa:	cd bf       	out	0x3d, r28	; 61
      fc:	00 e0       	ldi	r16, 0x00	; 0
      fe:	0c bf       	out	0x3c, r16	; 60

00000100 <__do_copy_data>:
     100:	12 e0       	ldi	r17, 0x02	; 2
     102:	a0 e0       	ldi	r26, 0x00	; 0
     104:	b2 e0       	ldi	r27, 0x02	; 2
     106:	e4 e2       	ldi	r30, 0x24	; 36
     108:	fd e1       	ldi	r31, 0x1D	; 29
     10a:	00 e0       	ldi	r16, 0x00	; 0
     10c:	0b bf       	out	0x3b, r16	; 59
     10e:	02 c0       	rjmp	.+4      	; 0x114 <__do_copy_data+0x14>
     110:	07 90       	elpm	r0, Z+
     112:	0d 92       	st	X+, r0
     114:	a2 3c       	cpi	r26, 0xC2	; 194
     116:	b1 07       	cpc	r27, r17
     118:	d9 f7       	brne	.-10     	; 0x110 <__do_copy_data+0x10>

0000011a <__do_clear_bss>:
     11a:	24 e0       	ldi	r18, 0x04	; 4
     11c:	a2 ec       	ldi	r26, 0xC2	; 194
     11e:	b2 e0       	ldi	r27, 0x02	; 2
     120:	01 c0       	rjmp	.+2      	; 0x124 <.do_clear_bss_start>

00000122 <.do_clear_bss_loop>:
     122:	1d 92       	st	X+, r1

00000124 <.do_clear_bss_start>:
     124:	a2 33       	cpi	r26, 0x32	; 50
     126:	b2 07       	cpc	r27, r18
     128:	e1 f7       	brne	.-8      	; 0x122 <.do_clear_bss_loop>
     12a:	fb d3       	rcall	.+2038   	; 0x922 <main>
     12c:	0c 94 90 0e 	jmp	0x1d20	; 0x1d20 <_exit>

00000130 <__bad_interrupt>:
     130:	67 cf       	rjmp	.-306    	; 0x0 <__vectors>

00000132 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
**/
void atmel_start_init(void)
{
     132:	a1 c4       	rjmp	.+2370   	; 0xa76 <system_init>
     134:	08 95       	ret

00000136 <__vector_17>:
#include <utils.h>

volatile uint64_t msectimer0 = 0;

ISR(TIMER1_COMPA_vect)
{
     136:	1f 92       	push	r1
     138:	0f 92       	push	r0
     13a:	0f b6       	in	r0, 0x3f	; 63
     13c:	0f 92       	push	r0
     13e:	11 24       	eor	r1, r1
     140:	2f 93       	push	r18
     142:	3f 93       	push	r19
     144:	4f 93       	push	r20
     146:	5f 93       	push	r21
     148:	6f 93       	push	r22
     14a:	7f 93       	push	r23
     14c:	8f 93       	push	r24
     14e:	9f 93       	push	r25
     150:	af 93       	push	r26
	static uint16_t nextcmp = 0;

	nextcmp = nextcmp + 16000;
     152:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <__data_end>
     156:	90 91 c3 02 	lds	r25, 0x02C3	; 0x8002c3 <__data_end+0x1>
     15a:	80 58       	subi	r24, 0x80	; 128
     15c:	91 4c       	sbci	r25, 0xC1	; 193
     15e:	90 93 c3 02 	sts	0x02C3, r25	; 0x8002c3 <__data_end+0x1>
     162:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <__data_end>
	OCR1AH = nextcmp >> 8 ;
     166:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
	OCR1AL = nextcmp & 0xff;
     16a:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <__data_end>
     16e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
	msectimer0++;
     172:	20 91 c4 02 	lds	r18, 0x02C4	; 0x8002c4 <msectimer0>
     176:	30 91 c5 02 	lds	r19, 0x02C5	; 0x8002c5 <msectimer0+0x1>
     17a:	40 91 c6 02 	lds	r20, 0x02C6	; 0x8002c6 <msectimer0+0x2>
     17e:	50 91 c7 02 	lds	r21, 0x02C7	; 0x8002c7 <msectimer0+0x3>
     182:	60 91 c8 02 	lds	r22, 0x02C8	; 0x8002c8 <msectimer0+0x4>
     186:	70 91 c9 02 	lds	r23, 0x02C9	; 0x8002c9 <msectimer0+0x5>
     18a:	80 91 ca 02 	lds	r24, 0x02CA	; 0x8002ca <msectimer0+0x6>
     18e:	90 91 cb 02 	lds	r25, 0x02CB	; 0x8002cb <msectimer0+0x7>
     192:	a1 e0       	ldi	r26, 0x01	; 1
     194:	8b d7       	rcall	.+3862   	; 0x10ac <__adddi3_s8>
     196:	20 93 c4 02 	sts	0x02C4, r18	; 0x8002c4 <msectimer0>
     19a:	30 93 c5 02 	sts	0x02C5, r19	; 0x8002c5 <msectimer0+0x1>
     19e:	40 93 c6 02 	sts	0x02C6, r20	; 0x8002c6 <msectimer0+0x2>
     1a2:	50 93 c7 02 	sts	0x02C7, r21	; 0x8002c7 <msectimer0+0x3>
     1a6:	60 93 c8 02 	sts	0x02C8, r22	; 0x8002c8 <msectimer0+0x4>
     1aa:	70 93 c9 02 	sts	0x02C9, r23	; 0x8002c9 <msectimer0+0x5>
     1ae:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <msectimer0+0x6>
     1b2:	90 93 cb 02 	sts	0x02CB, r25	; 0x8002cb <msectimer0+0x7>
	/* Insert your TIMER_0 compare channel A interrupt handling code here */
}
     1b6:	af 91       	pop	r26
     1b8:	9f 91       	pop	r25
     1ba:	8f 91       	pop	r24
     1bc:	7f 91       	pop	r23
     1be:	6f 91       	pop	r22
     1c0:	5f 91       	pop	r21
     1c2:	4f 91       	pop	r20
     1c4:	3f 91       	pop	r19
     1c6:	2f 91       	pop	r18
     1c8:	0f 90       	pop	r0
     1ca:	0f be       	out	0x3f, r0	; 63
     1cc:	0f 90       	pop	r0
     1ce:	1f 90       	pop	r1
     1d0:	18 95       	reti

000001d2 <__vector_32>:

ISR(TIMER3_COMPA_vect)
{
     1d2:	1f 92       	push	r1
     1d4:	0f 92       	push	r0
     1d6:	0f b6       	in	r0, 0x3f	; 63
     1d8:	0f 92       	push	r0
     1da:	11 24       	eor	r1, r1

	/* Insert your TIMER_1 compare channel A interrupt handling code here */
}
     1dc:	0f 90       	pop	r0
     1de:	0f be       	out	0x3f, r0	; 63
     1e0:	0f 90       	pop	r0
     1e2:	1f 90       	pop	r1
     1e4:	18 95       	reti

000001e6 <delay_ms>:
		_delay_ms(1);
	}
}
#else
void delay_ms(uint16_t count)
{
     1e6:	6f 92       	push	r6
     1e8:	7f 92       	push	r7
     1ea:	8f 92       	push	r8
     1ec:	9f 92       	push	r9
     1ee:	af 92       	push	r10
     1f0:	bf 92       	push	r11
     1f2:	cf 92       	push	r12
     1f4:	df 92       	push	r13
     1f6:	ef 92       	push	r14
     1f8:	ff 92       	push	r15
     1fa:	0f 93       	push	r16
     1fc:	1f 93       	push	r17
     1fe:	cf 93       	push	r28
     200:	df 93       	push	r29
     202:	cd b7       	in	r28, 0x3d	; 61
     204:	de b7       	in	r29, 0x3e	; 62
     206:	60 97       	sbiw	r28, 0x10	; 16
     208:	0f b6       	in	r0, 0x3f	; 63
     20a:	f8 94       	cli
     20c:	de bf       	out	0x3e, r29	; 62
     20e:	0f be       	out	0x3f, r0	; 63
     210:	cd bf       	out	0x3d, r28	; 61
volatile uint64_t k,j;
	while(1) {
		cli();
     212:	f8 94       	cli
		j = msectimer0;
     214:	f0 91 c4 02 	lds	r31, 0x02C4	; 0x8002c4 <msectimer0>
     218:	e0 91 c5 02 	lds	r30, 0x02C5	; 0x8002c5 <msectimer0+0x1>
     21c:	70 91 c6 02 	lds	r23, 0x02C6	; 0x8002c6 <msectimer0+0x2>
     220:	60 91 c7 02 	lds	r22, 0x02C7	; 0x8002c7 <msectimer0+0x3>
     224:	50 91 c8 02 	lds	r21, 0x02C8	; 0x8002c8 <msectimer0+0x4>
     228:	40 91 c9 02 	lds	r20, 0x02C9	; 0x8002c9 <msectimer0+0x5>
     22c:	30 91 ca 02 	lds	r19, 0x02CA	; 0x8002ca <msectimer0+0x6>
     230:	20 91 cb 02 	lds	r18, 0x02CB	; 0x8002cb <msectimer0+0x7>
     234:	f9 87       	std	Y+9, r31	; 0x09
     236:	ea 87       	std	Y+10, r30	; 0x0a
     238:	7b 87       	std	Y+11, r23	; 0x0b
     23a:	6c 87       	std	Y+12, r22	; 0x0c
     23c:	5d 87       	std	Y+13, r21	; 0x0d
     23e:	4e 87       	std	Y+14, r20	; 0x0e
     240:	3f 87       	std	Y+15, r19	; 0x0f
     242:	28 8b       	std	Y+16, r18	; 0x10
		sei();
     244:	78 94       	sei
		k = j + (uint64_t)count;
     246:	4c 01       	movw	r8, r24
     248:	69 84       	ldd	r6, Y+9	; 0x09
     24a:	7a 84       	ldd	r7, Y+10	; 0x0a
     24c:	bb 85       	ldd	r27, Y+11	; 0x0b
     24e:	ac 85       	ldd	r26, Y+12	; 0x0c
     250:	fd 85       	ldd	r31, Y+13	; 0x0d
     252:	ee 85       	ldd	r30, Y+14	; 0x0e
     254:	0f 85       	ldd	r16, Y+15	; 0x0f
     256:	18 89       	ldd	r17, Y+16	; 0x10
     258:	28 2f       	mov	r18, r24
     25a:	39 2d       	mov	r19, r9
     25c:	40 e0       	ldi	r20, 0x00	; 0
     25e:	50 e0       	ldi	r21, 0x00	; 0
     260:	60 e0       	ldi	r22, 0x00	; 0
     262:	70 e0       	ldi	r23, 0x00	; 0
     264:	80 e0       	ldi	r24, 0x00	; 0
     266:	90 e0       	ldi	r25, 0x00	; 0
     268:	a6 2c       	mov	r10, r6
     26a:	b7 2c       	mov	r11, r7
     26c:	cb 2e       	mov	r12, r27
     26e:	da 2e       	mov	r13, r26
     270:	ef 2e       	mov	r14, r31
     272:	fe 2e       	mov	r15, r30
     274:	12 d7       	rcall	.+3620   	; 0x109a <__adddi3>
     276:	29 83       	std	Y+1, r18	; 0x01
     278:	3a 83       	std	Y+2, r19	; 0x02
     27a:	4b 83       	std	Y+3, r20	; 0x03
     27c:	5c 83       	std	Y+4, r21	; 0x04
     27e:	6d 83       	std	Y+5, r22	; 0x05
     280:	7e 83       	std	Y+6, r23	; 0x06
     282:	8f 83       	std	Y+7, r24	; 0x07
     284:	98 87       	std	Y+8, r25	; 0x08
		while(1) {
			cli();
     286:	f8 94       	cli
			j = msectimer0;
     288:	70 91 c4 02 	lds	r23, 0x02C4	; 0x8002c4 <msectimer0>
     28c:	60 91 c5 02 	lds	r22, 0x02C5	; 0x8002c5 <msectimer0+0x1>
     290:	50 91 c6 02 	lds	r21, 0x02C6	; 0x8002c6 <msectimer0+0x2>
     294:	40 91 c7 02 	lds	r20, 0x02C7	; 0x8002c7 <msectimer0+0x3>
     298:	30 91 c8 02 	lds	r19, 0x02C8	; 0x8002c8 <msectimer0+0x4>
     29c:	20 91 c9 02 	lds	r18, 0x02C9	; 0x8002c9 <msectimer0+0x5>
     2a0:	90 91 ca 02 	lds	r25, 0x02CA	; 0x8002ca <msectimer0+0x6>
     2a4:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <msectimer0+0x7>
     2a8:	79 87       	std	Y+9, r23	; 0x09
     2aa:	6a 87       	std	Y+10, r22	; 0x0a
     2ac:	5b 87       	std	Y+11, r21	; 0x0b
     2ae:	4c 87       	std	Y+12, r20	; 0x0c
     2b0:	3d 87       	std	Y+13, r19	; 0x0d
     2b2:	2e 87       	std	Y+14, r18	; 0x0e
     2b4:	9f 87       	std	Y+15, r25	; 0x0f
     2b6:	88 8b       	std	Y+16, r24	; 0x10
			sei();
     2b8:	78 94       	sei
			if (j >= k)
     2ba:	29 85       	ldd	r18, Y+9	; 0x09
     2bc:	3a 85       	ldd	r19, Y+10	; 0x0a
     2be:	4b 85       	ldd	r20, Y+11	; 0x0b
     2c0:	5c 85       	ldd	r21, Y+12	; 0x0c
     2c2:	6d 85       	ldd	r22, Y+13	; 0x0d
     2c4:	7e 85       	ldd	r23, Y+14	; 0x0e
     2c6:	8f 85       	ldd	r24, Y+15	; 0x0f
     2c8:	98 89       	ldd	r25, Y+16	; 0x10
     2ca:	a9 80       	ldd	r10, Y+1	; 0x01
     2cc:	ba 80       	ldd	r11, Y+2	; 0x02
     2ce:	cb 80       	ldd	r12, Y+3	; 0x03
     2d0:	dc 80       	ldd	r13, Y+4	; 0x04
     2d2:	ed 80       	ldd	r14, Y+5	; 0x05
     2d4:	fe 80       	ldd	r15, Y+6	; 0x06
     2d6:	0f 81       	ldd	r16, Y+7	; 0x07
     2d8:	18 85       	ldd	r17, Y+8	; 0x08
     2da:	f4 d6       	rcall	.+3560   	; 0x10c4 <__cmpdi2>
     2dc:	a0 f2       	brcs	.-88     	; 0x286 <delay_ms+0xa0>
			{
				return;
			}
		}
	}
}
     2de:	60 96       	adiw	r28, 0x10	; 16
     2e0:	0f b6       	in	r0, 0x3f	; 63
     2e2:	f8 94       	cli
     2e4:	de bf       	out	0x3e, r29	; 62
     2e6:	0f be       	out	0x3f, r0	; 63
     2e8:	cd bf       	out	0x3d, r28	; 61
     2ea:	df 91       	pop	r29
     2ec:	cf 91       	pop	r28
     2ee:	1f 91       	pop	r17
     2f0:	0f 91       	pop	r16
     2f2:	ff 90       	pop	r15
     2f4:	ef 90       	pop	r14
     2f6:	df 90       	pop	r13
     2f8:	cf 90       	pop	r12
     2fa:	bf 90       	pop	r11
     2fc:	af 90       	pop	r10
     2fe:	9f 90       	pop	r9
     300:	8f 90       	pop	r8
     302:	7f 90       	pop	r7
     304:	6f 90       	pop	r6
     306:	08 95       	ret

00000308 <findlcd>:
#endif

// Find the LCD and return the current baud rate or -1 if not found
int findlcd(void)
{
     308:	af 92       	push	r10
     30a:	bf 92       	push	r11
     30c:	cf 92       	push	r12
     30e:	df 92       	push	r13
     310:	ef 92       	push	r14
     312:	ff 92       	push	r15
     314:	0f 93       	push	r16
     316:	1f 93       	push	r17
     318:	cf 93       	push	r28
     31a:	df 93       	push	r29
     31c:	cd b7       	in	r28, 0x3d	; 61
     31e:	de b7       	in	r29, 0x3e	; 62
     320:	c6 59       	subi	r28, 0x96	; 150
     322:	d1 09       	sbc	r29, r1
     324:	0f b6       	in	r0, 0x3f	; 63
     326:	f8 94       	cli
     328:	de bf       	out	0x3e, r29	; 62
     32a:	0f be       	out	0x3f, r0	; 63
     32c:	cd bf       	out	0x3d, r28	; 61
	const char discovermsg[]="\x00\xff\xff\xff""connect\xff\xff\xff";	// discovery message
     32e:	8f e0       	ldi	r24, 0x0F	; 15
     330:	ee e0       	ldi	r30, 0x0E	; 14
     332:	f2 e0       	ldi	r31, 0x02	; 2
     334:	de 01       	movw	r26, r28
     336:	11 96       	adiw	r26, 0x01	; 1
     338:	01 90       	ld	r0, Z+
     33a:	0d 92       	st	X+, r0
     33c:	8a 95       	dec	r24
     33e:	e1 f7       	brne	.-8      	; 0x338 <findlcd+0x30>
	const char foundmsg[]="comok ";		// first part of expected LCD response
     340:	87 e0       	ldi	r24, 0x07	; 7
     342:	e5 e3       	ldi	r30, 0x35	; 53
     344:	f2 e0       	ldi	r31, 0x02	; 2
     346:	de 01       	movw	r26, r28
     348:	50 96       	adiw	r26, 0x10	; 16
     34a:	01 90       	ld	r0, Z+
     34c:	0d 92       	st	X+, r0
     34e:	8a 95       	dec	r24
     350:	e1 f7       	brne	.-8      	; 0x34a <findlcd+0x42>
	int	i, j, rindex, bindex;
	int inindex = 0;
	int wtim = 0;

	// clear arrays
	memset(lcdsig, 0, sizeof lcdsig);
     352:	80 e5       	ldi	r24, 0x50	; 80
     354:	ec ec       	ldi	r30, 0xCC	; 204
     356:	f2 e0       	ldi	r31, 0x02	; 2
     358:	df 01       	movw	r26, r30
     35a:	1d 92       	st	X+, r1
     35c:	8a 95       	dec	r24
     35e:	e9 f7       	brne	.-6      	; 0x35a <findlcd+0x52>
	memset(response, 0, sizeof response);
     360:	fe 01       	movw	r30, r28
     362:	77 96       	adiw	r30, 0x17	; 23
     364:	80 e8       	ldi	r24, 0x80	; 128
     366:	df 01       	movw	r26, r30
     368:	1d 92       	st	X+, r1
     36a:	8a 95       	dec	r24
     36c:	e9 f7       	brne	.-6      	; 0x368 <findlcd+0x60>

	for(bindex=0; bindex<sizeof(btable); bindex++)		// try every baud
     36e:	c1 2c       	mov	r12, r1
     370:	d1 2c       	mov	r13, r1
     372:	cf c0       	rjmp	.+414    	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
	{
		inindex = 0;
		UBRR2H = (btable[bindex][BMULT] >> 8);
     374:	f6 01       	movw	r30, r12
     376:	ee 0f       	add	r30, r30
     378:	ff 1f       	adc	r31, r31
     37a:	ee 0f       	add	r30, r30
     37c:	ff 1f       	adc	r31, r31
     37e:	ea 55       	subi	r30, 0x5A	; 90
     380:	fd 4f       	sbci	r31, 0xFD	; 253
     382:	81 81       	ldd	r24, Z+1	; 0x01
     384:	80 93 d5 00 	sts	0x00D5, r24	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
		UBRR2L = (btable[bindex][BMULT] & 0xff);
     388:	80 81       	ld	r24, Z
     38a:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
		delay_ms(10);			// allow baud gen to settle
     38e:	8a e0       	ldi	r24, 0x0A	; 10
     390:	90 e0       	ldi	r25, 0x00	; 0
     392:	29 df       	rcall	.-430    	; 0x1e6 <delay_ms>
	memset(lcdsig, 0, sizeof lcdsig);
	memset(response, 0, sizeof response);

	for(bindex=0; bindex<sizeof(btable); bindex++)		// try every baud
	{
		inindex = 0;
     394:	00 e0       	ldi	r16, 0x00	; 0
     396:	10 e0       	ldi	r17, 0x00	; 0
		UBRR2H = (btable[bindex][BMULT] >> 8);
		UBRR2L = (btable[bindex][BMULT] & 0xff);
		delay_ms(10);			// allow baud gen to settle

		for(j=0; j<sizeof(discovermsg)-1; j++)		// send discovery command to LCD
     398:	a1 2c       	mov	r10, r1
     39a:	b1 2c       	mov	r11, r1
     39c:	1f c0       	rjmp	.+62     	; 0x3dc <findlcd+0xd4>
		{
			USART_2_write(discovermsg[j]);	// connect
     39e:	e1 e0       	ldi	r30, 0x01	; 1
     3a0:	f0 e0       	ldi	r31, 0x00	; 0
     3a2:	ec 0f       	add	r30, r28
     3a4:	fd 1f       	adc	r31, r29
     3a6:	ea 0d       	add	r30, r10
     3a8:	fb 1d       	adc	r31, r11
     3aa:	80 81       	ld	r24, Z
     3ac:	99 d5       	rcall	.+2866   	; 0xee0 <USART_2_write>
			while(USART_2_is_rx_ready())
     3ae:	10 c0       	rjmp	.+32     	; 0x3d0 <findlcd+0xc8>
			{
				if(inindex < sizeof(response))
     3b0:	00 38       	cpi	r16, 0x80	; 128
     3b2:	11 05       	cpc	r17, r1
     3b4:	68 f4       	brcc	.+26     	; 0x3d0 <findlcd+0xc8>
				{
					response[inindex++] = USART_2_read();
     3b6:	78 01       	movw	r14, r16
     3b8:	bf ef       	ldi	r27, 0xFF	; 255
     3ba:	eb 1a       	sub	r14, r27
     3bc:	fb 0a       	sbc	r15, r27
     3be:	77 d5       	rcall	.+2798   	; 0xeae <USART_2_read>
     3c0:	e7 e1       	ldi	r30, 0x17	; 23
     3c2:	f0 e0       	ldi	r31, 0x00	; 0
     3c4:	ec 0f       	add	r30, r28
     3c6:	fd 1f       	adc	r31, r29
     3c8:	e0 0f       	add	r30, r16
     3ca:	f1 1f       	adc	r31, r17
     3cc:	80 83       	st	Z, r24
		delay_ms(10);			// allow baud gen to settle

		for(j=0; j<sizeof(discovermsg)-1; j++)		// send discovery command to LCD
		{
			USART_2_write(discovermsg[j]);	// connect
			while(USART_2_is_rx_ready())
     3ce:	87 01       	movw	r16, r14
     3d0:	67 d5       	rcall	.+2766   	; 0xea0 <USART_2_is_rx_ready>
     3d2:	81 11       	cpse	r24, r1
     3d4:	ed cf       	rjmp	.-38     	; 0x3b0 <findlcd+0xa8>
		inindex = 0;
		UBRR2H = (btable[bindex][BMULT] >> 8);
		UBRR2L = (btable[bindex][BMULT] & 0xff);
		delay_ms(10);			// allow baud gen to settle

		for(j=0; j<sizeof(discovermsg)-1; j++)		// send discovery command to LCD
     3d6:	2f ef       	ldi	r18, 0xFF	; 255
     3d8:	a2 1a       	sub	r10, r18
     3da:	b2 0a       	sbc	r11, r18
     3dc:	3e e0       	ldi	r19, 0x0E	; 14
     3de:	a3 16       	cp	r10, r19
     3e0:	b1 04       	cpc	r11, r1
     3e2:	e8 f2       	brcs	.-70     	; 0x39e <findlcd+0x96>
     3e4:	a1 2c       	mov	r10, r1
     3e6:	b1 2c       	mov	r11, r1
     3e8:	19 c0       	rjmp	.+50     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>

		for (wtim = 0; (wtim < 250); wtim++)		// hang around a bit and try to collect complete response
		{
			while(USART_2_is_rx_ready())
			{
				if(inindex < sizeof(response))
     3ea:	00 38       	cpi	r16, 0x80	; 128
     3ec:	11 05       	cpc	r17, r1
				{
					response[inindex++] = USART_2_read();
     3ee:	68 f4       	brcc	.+26     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     3f0:	78 01       	movw	r14, r16
     3f2:	4f ef       	ldi	r20, 0xFF	; 255
     3f4:	e4 1a       	sub	r14, r20
     3f6:	f4 0a       	sbc	r15, r20
     3f8:	5a d5       	rcall	.+2740   	; 0xeae <USART_2_read>
     3fa:	e7 e1       	ldi	r30, 0x17	; 23
     3fc:	f0 e0       	ldi	r31, 0x00	; 0
     3fe:	ec 0f       	add	r30, r28
     400:	fd 1f       	adc	r31, r29
     402:	e0 0f       	add	r30, r16
			}
		}

		for (wtim = 0; (wtim < 250); wtim++)		// hang around a bit and try to collect complete response
		{
			while(USART_2_is_rx_ready())
     404:	f1 1f       	adc	r31, r17
     406:	80 83       	st	Z, r24
     408:	87 01       	movw	r16, r14
				if(inindex < sizeof(response))
				{
					response[inindex++] = USART_2_read();
				}
			}
			delay_ms(1);			// allow one char time at 2400 baud, 5ms is 64 chars at 115200
     40a:	4a d5       	rcall	.+2708   	; 0xea0 <USART_2_is_rx_ready>
     40c:	81 11       	cpse	r24, r1
     40e:	ed cf       	rjmp	.-38     	; 0x3ea <findlcd+0xe2>
     410:	81 e0       	ldi	r24, 0x01	; 1
					response[inindex++] = USART_2_read();
				}
			}
		}

		for (wtim = 0; (wtim < 250); wtim++)		// hang around a bit and try to collect complete response
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	e8 de       	rcall	.-560    	; 0x1e6 <delay_ms>
     416:	5f ef       	ldi	r21, 0xFF	; 255
     418:	a5 1a       	sub	r10, r21
     41a:	b5 0a       	sbc	r11, r21
     41c:	8a ef       	ldi	r24, 0xFA	; 250
     41e:	a8 16       	cp	r10, r24
				}
			}
			delay_ms(1);			// allow one char time at 2400 baud, 5ms is 64 chars at 115200
		}

		if (inindex)		// we *have* received something
     420:	b1 04       	cpc	r11, r1
     422:	9c f3       	brlt	.-26     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     424:	01 15       	cp	r16, r1
     426:	11 05       	cpc	r17, r1
     428:	09 f0       	breq	.+2      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
		{
			for(rindex=0; rindex<inindex; rindex++)		// the length of the rx'd string
			{
				if (strncmp(&response[rindex],foundmsg,sizeof(foundmsg-1)) == 0)		// look for the start
     42a:	6a c0       	rjmp	.+212    	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
     42c:	6f c0       	rjmp	.+222    	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
     42e:	42 e0       	ldi	r20, 0x02	; 2
     430:	50 e0       	ldi	r21, 0x00	; 0
     432:	be 01       	movw	r22, r28
     434:	60 5f       	subi	r22, 0xF0	; 240
     436:	7f 4f       	sbci	r23, 0xFF	; 255
     438:	87 e1       	ldi	r24, 0x17	; 23
     43a:	90 e0       	ldi	r25, 0x00	; 0
     43c:	8c 0f       	add	r24, r28
     43e:	9d 1f       	adc	r25, r29
     440:	8e 0d       	add	r24, r14
     442:	9f 1d       	adc	r25, r15
     444:	48 d6       	rcall	.+3216   	; 0x10d6 <strncmp>
     446:	89 2b       	or	r24, r25
     448:	09 f4       	brne	.+2      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
				{
					for(i=rindex; i<inindex; i++)		// found start, now look for terminator bytes
					{
						if ((response[i] == 0xff) && (response[i+1] == 0xff) && (response[i+2] == 0xff))	// found response terminator
     44a:	51 c0       	rjmp	.+162    	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
     44c:	55 c0       	rjmp	.+170    	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
     44e:	e7 e1       	ldi	r30, 0x17	; 23
     450:	f0 e0       	ldi	r31, 0x00	; 0
     452:	ec 0f       	add	r30, r28
     454:	fd 1f       	adc	r31, r29
     456:	e8 0f       	add	r30, r24
     458:	f9 1f       	adc	r31, r25
     45a:	20 81       	ld	r18, Z
     45c:	2f 3f       	cpi	r18, 0xFF	; 255
     45e:	09 f0       	breq	.+2      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
     460:	44 c0       	rjmp	.+136    	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
     462:	fc 01       	movw	r30, r24
     464:	31 96       	adiw	r30, 0x01	; 1
     466:	a7 e1       	ldi	r26, 0x17	; 23
     468:	b0 e0       	ldi	r27, 0x00	; 0
     46a:	ac 0f       	add	r26, r28
     46c:	bd 1f       	adc	r27, r29
     46e:	ea 0f       	add	r30, r26
     470:	fb 1f       	adc	r31, r27
     472:	20 81       	ld	r18, Z
     474:	2f 3f       	cpi	r18, 0xFF	; 255
     476:	c9 f5       	brne	.+114    	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
     478:	9c 01       	movw	r18, r24
     47a:	2e 5f       	subi	r18, 0xFE	; 254
     47c:	3f 4f       	sbci	r19, 0xFF	; 255
     47e:	fd 01       	movw	r30, r26
     480:	e2 0f       	add	r30, r18
     482:	f3 1f       	adc	r31, r19
     484:	40 81       	ld	r20, Z
						{
							if(i+2-rindex > sizeof(lcdsig)-1)		// will fit in the buffer
     486:	4f 3f       	cpi	r20, 0xFF	; 255
     488:	81 f5       	brne	.+96     	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
     48a:	2e 19       	sub	r18, r14
     48c:	3f 09       	sbc	r19, r15
							{
								printf("LCD response too long\n\r");
     48e:	20 35       	cpi	r18, 0x50	; 80
     490:	31 05       	cpc	r19, r1
     492:	50 f0       	brcs	.+20     	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
     494:	8d e1       	ldi	r24, 0x1D	; 29
     496:	92 e0       	ldi	r25, 0x02	; 2
     498:	9f 93       	push	r25
								return(-1);
     49a:	8f 93       	push	r24
     49c:	2a d6       	rcall	.+3156   	; 0x10f2 <printf>
     49e:	0f 90       	pop	r0
     4a0:	0f 90       	pop	r0
     4a2:	8f ef       	ldi	r24, 0xFF	; 255
							}
							else
							{
								int k;
								j = 0;
								k = i + 3 - rindex;
     4a4:	9f ef       	ldi	r25, 0xFF	; 255
     4a6:	3f c0       	rjmp	.+126    	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
     4a8:	03 96       	adiw	r24, 0x03	; 3
								return(-1);
							}
							else
							{
								int k;
								j = 0;
     4aa:	8e 19       	sub	r24, r14
     4ac:	9f 09       	sbc	r25, r15
								k = i + 3 - rindex;
								//		the expression evals wrong??			while (j < (i+3-rindex))
								while (j < k)
     4ae:	20 e0       	ldi	r18, 0x00	; 0
								{
									lcdsig[j++] = response[rindex++];		// copy response string into global
     4b0:	30 e0       	ldi	r19, 0x00	; 0
     4b2:	11 c0       	rjmp	.+34     	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
     4b4:	e7 e1       	ldi	r30, 0x17	; 23
     4b6:	f0 e0       	ldi	r31, 0x00	; 0
     4b8:	ec 0f       	add	r30, r28
     4ba:	fd 1f       	adc	r31, r29
     4bc:	ee 0d       	add	r30, r14
     4be:	ff 1d       	adc	r31, r15
     4c0:	40 81       	ld	r20, Z
     4c2:	f9 01       	movw	r30, r18
     4c4:	e4 53       	subi	r30, 0x34	; 52
     4c6:	fd 4f       	sbci	r31, 0xFD	; 253
     4c8:	40 83       	st	Z, r20
     4ca:	a7 01       	movw	r20, r14
     4cc:	4f 5f       	subi	r20, 0xFF	; 255
     4ce:	5f 4f       	sbci	r21, 0xFF	; 255
     4d0:	7a 01       	movw	r14, r20
							{
								int k;
								j = 0;
								k = i + 3 - rindex;
								//		the expression evals wrong??			while (j < (i+3-rindex))
								while (j < k)
     4d2:	2f 5f       	subi	r18, 0xFF	; 255
     4d4:	3f 4f       	sbci	r19, 0xFF	; 255
     4d6:	28 17       	cp	r18, r24
								{
									lcdsig[j++] = response[rindex++];		// copy response string into global
								}
								lcdsig[j] = '\0';		// add our null terminator
     4d8:	39 07       	cpc	r19, r25
     4da:	64 f3       	brlt	.-40     	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
     4dc:	f9 01       	movw	r30, r18
     4de:	e4 53       	subi	r30, 0x34	; 52
								return(bindex);
     4e0:	fd 4f       	sbci	r31, 0xFD	; 253
     4e2:	10 82       	st	Z, r1
     4e4:	8c 2d       	mov	r24, r12
		{
			for(rindex=0; rindex<inindex; rindex++)		// the length of the rx'd string
			{
				if (strncmp(&response[rindex],foundmsg,sizeof(foundmsg-1)) == 0)		// look for the start
				{
					for(i=rindex; i<inindex; i++)		// found start, now look for terminator bytes
     4e6:	9d 2d       	mov	r25, r13
     4e8:	1e c0       	rjmp	.+60     	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
     4ea:	01 96       	adiw	r24, 0x01	; 1
     4ec:	01 c0       	rjmp	.+2      	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
     4ee:	c7 01       	movw	r24, r14
     4f0:	80 17       	cp	r24, r16
     4f2:	91 07       	cpc	r25, r17
			delay_ms(1);			// allow one char time at 2400 baud, 5ms is 64 chars at 115200
		}

		if (inindex)		// we *have* received something
		{
			for(rindex=0; rindex<inindex; rindex++)		// the length of the rx'd string
     4f4:	0c f4       	brge	.+2      	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
     4f6:	ab cf       	rjmp	.-170    	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     4f8:	5f ef       	ldi	r21, 0xFF	; 255
     4fa:	e5 1a       	sub	r14, r21
     4fc:	f5 0a       	sbc	r15, r21
     4fe:	02 c0       	rjmp	.+4      	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
     500:	e1 2c       	mov	r14, r1
     502:	f1 2c       	mov	r15, r1
     504:	e0 16       	cp	r14, r16
     506:	f1 06       	cpc	r15, r17

	// clear arrays
	memset(lcdsig, 0, sizeof lcdsig);
	memset(response, 0, sizeof response);

	for(bindex=0; bindex<sizeof(btable); bindex++)		// try every baud
     508:	0c f4       	brge	.+2      	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
     50a:	91 cf       	rjmp	.-222    	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     50c:	8f ef       	ldi	r24, 0xFF	; 255
     50e:	c8 1a       	sub	r12, r24
     510:	d8 0a       	sbc	r13, r24
     512:	ac e1       	ldi	r26, 0x1C	; 28
     514:	ca 16       	cp	r12, r26
     516:	d1 04       	cpc	r13, r1

			}
		}
	}
	// test
	lcdsig[0]=128;
     518:	08 f4       	brcc	.+2      	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>
     51a:	2c cf       	rjmp	.-424    	; 0x374 <findlcd+0x6c>
     51c:	80 e8       	ldi	r24, 0x80	; 128
	return(-1);
     51e:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <lcdsig>
}
     522:	8f ef       	ldi	r24, 0xFF	; 255
     524:	9f ef       	ldi	r25, 0xFF	; 255
     526:	ca 56       	subi	r28, 0x6A	; 106
     528:	df 4f       	sbci	r29, 0xFF	; 255
     52a:	0f b6       	in	r0, 0x3f	; 63
     52c:	f8 94       	cli
     52e:	de bf       	out	0x3e, r29	; 62
     530:	0f be       	out	0x3f, r0	; 63
     532:	cd bf       	out	0x3d, r28	; 61
     534:	df 91       	pop	r29
     536:	cf 91       	pop	r28
     538:	1f 91       	pop	r17
     53a:	0f 91       	pop	r16
     53c:	ff 90       	pop	r15
     53e:	ef 90       	pop	r14
     540:	df 90       	pop	r13
     542:	cf 90       	pop	r12
     544:	bf 90       	pop	r11
     546:	af 90       	pop	r10
     548:	08 95       	ret

0000054a <getconnect>:


// see if Nextion editor connects
int getconnect(char buf[], int bsize)
{
     54a:	6f 92       	push	r6
     54c:	7f 92       	push	r7
     54e:	8f 92       	push	r8
     550:	9f 92       	push	r9
     552:	af 92       	push	r10
     554:	bf 92       	push	r11
     556:	cf 92       	push	r12
     558:	df 92       	push	r13
     55a:	ef 92       	push	r14
     55c:	ff 92       	push	r15
     55e:	0f 93       	push	r16
     560:	1f 93       	push	r17
     562:	cf 93       	push	r28
     564:	df 93       	push	r29
     566:	cd b7       	in	r28, 0x3d	; 61
     568:	de b7       	in	r29, 0x3e	; 62
     56a:	2c 97       	sbiw	r28, 0x0c	; 12
     56c:	0f b6       	in	r0, 0x3f	; 63
     56e:	f8 94       	cli
     570:	de bf       	out	0x3e, r29	; 62
     572:	0f be       	out	0x3f, r0	; 63
     574:	cd bf       	out	0x3d, r28	; 61
     576:	6c 01       	movw	r12, r24
     578:	7b 01       	movw	r14, r22
	int inindex = 0, mindex = 0;
	int wtim, i;
	volatile char ch;
	//	volatile char buf[128];
	const char discovermsg[]="connect\xff\xff\xff";		// expected discovery message
     57a:	8b e0       	ldi	r24, 0x0B	; 11
     57c:	ec e3       	ldi	r30, 0x3C	; 60
     57e:	f2 e0       	ldi	r31, 0x02	; 2
     580:	de 01       	movw	r26, r28
     582:	12 96       	adiw	r26, 0x02	; 2
     584:	01 90       	ld	r0, Z+
     586:	0d 92       	st	X+, r0
     588:	8a 95       	dec	r24
     58a:	e1 f7       	brne	.-8      	; 0x584 <getconnect+0x3a>

	for(i=0; i<bsize; buf[i++]='\0');
     58c:	00 e0       	ldi	r16, 0x00	; 0
     58e:	10 e0       	ldi	r17, 0x00	; 0
     590:	06 c0       	rjmp	.+12     	; 0x59e <getconnect+0x54>
     592:	f6 01       	movw	r30, r12
     594:	e0 0f       	add	r30, r16
     596:	f1 1f       	adc	r31, r17
     598:	10 82       	st	Z, r1
     59a:	0f 5f       	subi	r16, 0xFF	; 255
     59c:	1f 4f       	sbci	r17, 0xFF	; 255
     59e:	0e 15       	cp	r16, r14
     5a0:	1f 05       	cpc	r17, r15
     5a2:	bc f3       	brlt	.-18     	; 0x592 <getconnect+0x48>
     5a4:	61 2c       	mov	r6, r1
     5a6:	71 2c       	mov	r7, r1
     5a8:	81 2c       	mov	r8, r1
     5aa:	91 2c       	mov	r9, r1
     5ac:	a1 2c       	mov	r10, r1
     5ae:	b1 2c       	mov	r11, r1
     5b0:	3f c0       	rjmp	.+126    	; 0x630 <getconnect+0xe6>
	for (wtim = 0; (wtim < 5000); wtim++)		// hang around waiting for some input
	{
		while(USART_0_is_rx_ready())
		{
			if(inindex < bsize)
     5b2:	ae 14       	cp	r10, r14
     5b4:	bf 04       	cpc	r11, r15
			{
				ch = USART_0_read();
     5b6:	34 f5       	brge	.+76     	; 0x604 <getconnect+0xba>
     5b8:	4b d3       	rcall	.+1686   	; 0xc50 <USART_0_read>
				buf[inindex++] = ch;
     5ba:	89 83       	std	Y+1, r24	; 0x01
     5bc:	95 01       	movw	r18, r10
     5be:	2f 5f       	subi	r18, 0xFF	; 255
     5c0:	3f 4f       	sbci	r19, 0xFF	; 255
     5c2:	f6 01       	movw	r30, r12
     5c4:	ea 0d       	add	r30, r10
     5c6:	fb 1d       	adc	r31, r11
     5c8:	89 81       	ldd	r24, Y+1	; 0x01
				if (discovermsg[mindex] == ch)
     5ca:	80 83       	st	Z, r24
     5cc:	e2 e0       	ldi	r30, 0x02	; 2
     5ce:	f0 e0       	ldi	r31, 0x00	; 0
     5d0:	ec 0f       	add	r30, r28
     5d2:	fd 1f       	adc	r31, r29
     5d4:	e8 0d       	add	r30, r8
     5d6:	f9 1d       	adc	r31, r9
     5d8:	90 81       	ld	r25, Z
     5da:	89 81       	ldd	r24, Y+1	; 0x01
     5dc:	98 13       	cpse	r25, r24
				{
					mindex++;
     5de:	1a c0       	rjmp	.+52     	; 0x614 <getconnect+0xca>
     5e0:	8f ef       	ldi	r24, 0xFF	; 255
     5e2:	88 1a       	sub	r8, r24
					if (mindex == sizeof(discovermsg))	// all matched
     5e4:	98 0a       	sbc	r9, r24
     5e6:	8b e0       	ldi	r24, 0x0B	; 11
     5e8:	88 16       	cp	r8, r24
     5ea:	91 04       	cpc	r9, r1
					{
						ch = i & 0xff;
     5ec:	b9 f4       	brne	.+46     	; 0x61c <getconnect+0xd2>
						return(1);
     5ee:	09 83       	std	Y+1, r16	; 0x01
     5f0:	81 e0       	ldi	r24, 0x01	; 1
     5f2:	90 e0       	ldi	r25, 0x00	; 0
			}
			else
			{
				// input buffer full
				inindex = 0;
				for(i=0; i<bsize; buf[i++]='\0');
     5f4:	24 c0       	rjmp	.+72     	; 0x63e <getconnect+0xf4>
     5f6:	f6 01       	movw	r30, r12
     5f8:	e0 0f       	add	r30, r16
     5fa:	f1 1f       	adc	r31, r17
     5fc:	10 82       	st	Z, r1
     5fe:	0f 5f       	subi	r16, 0xFF	; 255
     600:	1f 4f       	sbci	r17, 0xFF	; 255
     602:	02 c0       	rjmp	.+4      	; 0x608 <getconnect+0xbe>
     604:	00 e0       	ldi	r16, 0x00	; 0
     606:	10 e0       	ldi	r17, 0x00	; 0
     608:	0e 15       	cp	r16, r14
     60a:	1f 05       	cpc	r17, r15
				}
			}
			else
			{
				// input buffer full
				inindex = 0;
     60c:	a4 f3       	brlt	.-24     	; 0x5f6 <getconnect+0xac>
     60e:	a1 2c       	mov	r10, r1
     610:	b1 2c       	mov	r11, r1
		while(USART_0_is_rx_ready())
		{
			if(inindex < bsize)
			{
				ch = USART_0_read();
				buf[inindex++] = ch;
     612:	05 c0       	rjmp	.+10     	; 0x61e <getconnect+0xd4>
						return(1);
					}
				}
				else
				{
					mindex = 0;		// reset the search
     614:	59 01       	movw	r10, r18
     616:	81 2c       	mov	r8, r1
	const char discovermsg[]="connect\xff\xff\xff";		// expected discovery message

	for(i=0; i<bsize; buf[i++]='\0');
	for (wtim = 0; (wtim < 5000); wtim++)		// hang around waiting for some input
	{
		while(USART_0_is_rx_ready())
     618:	91 2c       	mov	r9, r1
     61a:	01 c0       	rjmp	.+2      	; 0x61e <getconnect+0xd4>
     61c:	59 01       	movw	r10, r18
				// input buffer full
				inindex = 0;
				for(i=0; i<bsize; buf[i++]='\0');
			}
		}
		delay_ms(1);
     61e:	11 d3       	rcall	.+1570   	; 0xc42 <USART_0_is_rx_ready>
     620:	81 11       	cpse	r24, r1
     622:	c7 cf       	rjmp	.-114    	; 0x5b2 <getconnect+0x68>
	volatile char ch;
	//	volatile char buf[128];
	const char discovermsg[]="connect\xff\xff\xff";		// expected discovery message

	for(i=0; i<bsize; buf[i++]='\0');
	for (wtim = 0; (wtim < 5000); wtim++)		// hang around waiting for some input
     624:	81 e0       	ldi	r24, 0x01	; 1
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	de dd       	rcall	.-1092   	; 0x1e6 <delay_ms>
     62a:	8f ef       	ldi	r24, 0xFF	; 255
     62c:	68 1a       	sub	r6, r24
     62e:	78 0a       	sbc	r7, r24
     630:	88 e8       	ldi	r24, 0x88	; 136
     632:	68 16       	cp	r6, r24
				for(i=0; i<bsize; buf[i++]='\0');
			}
		}
		delay_ms(1);
	}
	return(-1);
     634:	83 e1       	ldi	r24, 0x13	; 19
     636:	78 06       	cpc	r7, r24
}
     638:	94 f3       	brlt	.-28     	; 0x61e <getconnect+0xd4>
     63a:	8f ef       	ldi	r24, 0xFF	; 255
     63c:	9f ef       	ldi	r25, 0xFF	; 255
     63e:	2c 96       	adiw	r28, 0x0c	; 12
     640:	0f b6       	in	r0, 0x3f	; 63
     642:	f8 94       	cli
     644:	de bf       	out	0x3e, r29	; 62
     646:	0f be       	out	0x3f, r0	; 63
     648:	cd bf       	out	0x3d, r28	; 61
     64a:	df 91       	pop	r29
     64c:	cf 91       	pop	r28
     64e:	1f 91       	pop	r17
     650:	0f 91       	pop	r16
     652:	ff 90       	pop	r15
     654:	ef 90       	pop	r14
     656:	df 90       	pop	r13
     658:	cf 90       	pop	r12
     65a:	bf 90       	pop	r11
     65c:	af 90       	pop	r10
     65e:	9f 90       	pop	r9
     660:	8f 90       	pop	r8
     662:	7f 90       	pop	r7
     664:	6f 90       	pop	r6
     666:	08 95       	ret

00000668 <conntoed>:

// wait for connect from Nextion Editor and respond
int conntoed()
{
     668:	cf 93       	push	r28
     66a:	df 93       	push	r29
     66c:	cd b7       	in	r28, 0x3d	; 61
     66e:	de b7       	in	r29, 0x3e	; 62
     670:	c6 58       	subi	r28, 0x86	; 134
     672:	d1 09       	sbc	r29, r1
     674:	0f b6       	in	r0, 0x3f	; 63
     676:	f8 94       	cli
     678:	de bf       	out	0x3e, r29	; 62
     67a:	0f be       	out	0x3f, r0	; 63
     67c:	cd bf       	out	0x3d, r28	; 61
	volatile int i;
	char ch;
	char inbuf[128];
	const char nulresp[]={0x1a,0xff,0xff,0xff};
     67e:	8a e1       	ldi	r24, 0x1A	; 26
     680:	cd 57       	subi	r28, 0x7D	; 125
     682:	df 4f       	sbci	r29, 0xFF	; 255
     684:	88 83       	st	Y, r24
     686:	c3 58       	subi	r28, 0x83	; 131
     688:	d0 40       	sbci	r29, 0x00	; 0
     68a:	8f ef       	ldi	r24, 0xFF	; 255
     68c:	cc 57       	subi	r28, 0x7C	; 124
     68e:	df 4f       	sbci	r29, 0xFF	; 255
     690:	88 83       	st	Y, r24
     692:	c4 58       	subi	r28, 0x84	; 132
     694:	d0 40       	sbci	r29, 0x00	; 0
     696:	cb 57       	subi	r28, 0x7B	; 123
     698:	df 4f       	sbci	r29, 0xFF	; 255
     69a:	88 83       	st	Y, r24
     69c:	c5 58       	subi	r28, 0x85	; 133
     69e:	d0 40       	sbci	r29, 0x00	; 0
     6a0:	ca 57       	subi	r28, 0x7A	; 122
     6a2:	df 4f       	sbci	r29, 0xFF	; 255
     6a4:	88 83       	st	Y, r24
     6a6:	c6 58       	subi	r28, 0x86	; 134
     6a8:	d0 40       	sbci	r29, 0x00	; 0

	i = getconnect(inbuf,sizeof(inbuf));
     6aa:	60 e8       	ldi	r22, 0x80	; 128
     6ac:	70 e0       	ldi	r23, 0x00	; 0
     6ae:	ce 01       	movw	r24, r28
     6b0:	03 96       	adiw	r24, 0x03	; 3
     6b2:	4b df       	rcall	.-362    	; 0x54a <getconnect>
     6b4:	9a 83       	std	Y+2, r25	; 0x02
     6b6:	89 83       	std	Y+1, r24	; 0x01
	if (i < 0)
     6b8:	89 81       	ldd	r24, Y+1	; 0x01
     6ba:	9a 81       	ldd	r25, Y+2	; 0x02
     6bc:	99 23       	and	r25, r25
     6be:	0c f4       	brge	.+2      	; 0x6c2 <conntoed+0x5a>
     6c0:	3f c0       	rjmp	.+126    	; 0x740 <conntoed+0xd8>
		return(-1);
	}
	// Pc has connected, now send LCD signature response


	for(i=0; i<4; i++)
     6c2:	1a 82       	std	Y+2, r1	; 0x02
     6c4:	19 82       	std	Y+1, r1	; 0x01
     6c6:	19 c0       	rjmp	.+50     	; 0x6fa <conntoed+0x92>
	{
		USART_0_write(nulresp[i]);
     6c8:	e9 81       	ldd	r30, Y+1	; 0x01
     6ca:	fa 81       	ldd	r31, Y+2	; 0x02
     6cc:	83 e8       	ldi	r24, 0x83	; 131
     6ce:	90 e0       	ldi	r25, 0x00	; 0
     6d0:	8c 0f       	add	r24, r28
     6d2:	9d 1f       	adc	r25, r29
     6d4:	e8 0f       	add	r30, r24
     6d6:	f9 1f       	adc	r31, r25
     6d8:	80 81       	ld	r24, Z
     6da:	d3 d2       	rcall	.+1446   	; 0xc82 <USART_0_write>
		USART_3_write(nulresp[i]);
     6dc:	e9 81       	ldd	r30, Y+1	; 0x01
     6de:	fa 81       	ldd	r31, Y+2	; 0x02
     6e0:	83 e8       	ldi	r24, 0x83	; 131
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	8c 0f       	add	r24, r28
     6e6:	9d 1f       	adc	r25, r29
     6e8:	e8 0f       	add	r30, r24
     6ea:	f9 1f       	adc	r31, r25
     6ec:	80 81       	ld	r24, Z
     6ee:	8f d4       	rcall	.+2334   	; 0x100e <USART_3_write>
		return(-1);
	}
	// Pc has connected, now send LCD signature response


	for(i=0; i<4; i++)
     6f0:	89 81       	ldd	r24, Y+1	; 0x01
     6f2:	9a 81       	ldd	r25, Y+2	; 0x02
     6f4:	01 96       	adiw	r24, 0x01	; 1
     6f6:	9a 83       	std	Y+2, r25	; 0x02
     6f8:	89 83       	std	Y+1, r24	; 0x01
     6fa:	89 81       	ldd	r24, Y+1	; 0x01
     6fc:	9a 81       	ldd	r25, Y+2	; 0x02
     6fe:	04 97       	sbiw	r24, 0x04	; 4
     700:	1c f3       	brlt	.-58     	; 0x6c8 <conntoed+0x60>
	{
		USART_0_write(nulresp[i]);
		USART_3_write(nulresp[i]);
	}

	i = 0;
     702:	1a 82       	std	Y+2, r1	; 0x02
     704:	19 82       	std	Y+1, r1	; 0x01
	while(lcdsig[i])
     706:	12 c0       	rjmp	.+36     	; 0x72c <conntoed+0xc4>
	{
		USART_0_write(lcdsig[i]);
     708:	e9 81       	ldd	r30, Y+1	; 0x01
     70a:	fa 81       	ldd	r31, Y+2	; 0x02
     70c:	e4 53       	subi	r30, 0x34	; 52
     70e:	fd 4f       	sbci	r31, 0xFD	; 253
     710:	80 81       	ld	r24, Z
     712:	b7 d2       	rcall	.+1390   	; 0xc82 <USART_0_write>
		USART_3_write(lcdsig[i++]);
     714:	89 81       	ldd	r24, Y+1	; 0x01
     716:	9a 81       	ldd	r25, Y+2	; 0x02
     718:	9c 01       	movw	r18, r24
     71a:	2f 5f       	subi	r18, 0xFF	; 255
     71c:	3f 4f       	sbci	r19, 0xFF	; 255
     71e:	3a 83       	std	Y+2, r19	; 0x02
     720:	29 83       	std	Y+1, r18	; 0x01
     722:	fc 01       	movw	r30, r24
     724:	e4 53       	subi	r30, 0x34	; 52
     726:	fd 4f       	sbci	r31, 0xFD	; 253
     728:	80 81       	ld	r24, Z
     72a:	71 d4       	rcall	.+2274   	; 0x100e <USART_3_write>
		USART_0_write(nulresp[i]);
		USART_3_write(nulresp[i]);
	}

	i = 0;
	while(lcdsig[i])
     72c:	e9 81       	ldd	r30, Y+1	; 0x01
     72e:	fa 81       	ldd	r31, Y+2	; 0x02
     730:	e4 53       	subi	r30, 0x34	; 52
     732:	fd 4f       	sbci	r31, 0xFD	; 253
     734:	80 81       	ld	r24, Z
     736:	81 11       	cpse	r24, r1
     738:	e7 cf       	rjmp	.-50     	; 0x708 <conntoed+0xa0>
	{
		USART_0_write(lcdsig[i]);
		USART_3_write(lcdsig[i++]);
	}
	return(0);
     73a:	80 e0       	ldi	r24, 0x00	; 0
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	02 c0       	rjmp	.+4      	; 0x744 <conntoed+0xdc>
	const char nulresp[]={0x1a,0xff,0xff,0xff};

	i = getconnect(inbuf,sizeof(inbuf));
	if (i < 0)
	{
		return(-1);
     740:	8f ef       	ldi	r24, 0xFF	; 255
     742:	9f ef       	ldi	r25, 0xFF	; 255
	{
		USART_0_write(lcdsig[i]);
		USART_3_write(lcdsig[i++]);
	}
	return(0);
}
     744:	ca 57       	subi	r28, 0x7A	; 122
     746:	df 4f       	sbci	r29, 0xFF	; 255
     748:	0f b6       	in	r0, 0x3f	; 63
     74a:	f8 94       	cli
     74c:	de bf       	out	0x3e, r29	; 62
     74e:	0f be       	out	0x3f, r0	; 63
     750:	cd bf       	out	0x3d, r28	; 61
     752:	df 91       	pop	r29
     754:	cf 91       	pop	r28
     756:	08 95       	ret

00000758 <getupcmd>:


// wait for and parse the baud rate from the upload command
int getupcmd(char* buf, int bsize)
{
     758:	3f 92       	push	r3
     75a:	4f 92       	push	r4
     75c:	5f 92       	push	r5
     75e:	6f 92       	push	r6
     760:	7f 92       	push	r7
     762:	8f 92       	push	r8
     764:	9f 92       	push	r9
     766:	af 92       	push	r10
     768:	bf 92       	push	r11
     76a:	cf 92       	push	r12
     76c:	df 92       	push	r13
     76e:	ef 92       	push	r14
     770:	ff 92       	push	r15
     772:	0f 93       	push	r16
     774:	1f 93       	push	r17
     776:	cf 93       	push	r28
     778:	df 93       	push	r29
     77a:	cd b7       	in	r28, 0x3d	; 61
     77c:	de b7       	in	r29, 0x3e	; 62
     77e:	2a 97       	sbiw	r28, 0x0a	; 10
     780:	0f b6       	in	r0, 0x3f	; 63
     782:	f8 94       	cli
     784:	de bf       	out	0x3e, r29	; 62
     786:	0f be       	out	0x3f, r0	; 63
     788:	cd bf       	out	0x3d, r28	; 61
     78a:	7c 01       	movw	r14, r24
     78c:	8b 01       	movw	r16, r22
	int inindex = 0, mindex = 0;
	int wtim, i, termcnt;
	char ch;
	bool validcmd = false;

	const char uploadmsg[]="whmi-wri ";		// expected upload command
     78e:	8a e0       	ldi	r24, 0x0A	; 10
     790:	e7 e4       	ldi	r30, 0x47	; 71
     792:	f2 e0       	ldi	r31, 0x02	; 2
     794:	de 01       	movw	r26, r28
     796:	11 96       	adiw	r26, 0x01	; 1
     798:	01 90       	ld	r0, Z+
     79a:	0d 92       	st	X+, r0
     79c:	8a 95       	dec	r24
     79e:	e1 f7       	brne	.-8      	; 0x798 <getupcmd+0x40>

	for(i=0; i<bsize; buf[i++]='\0');
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	05 c0       	rjmp	.+10     	; 0x7b0 <getupcmd+0x58>
     7a6:	f7 01       	movw	r30, r14
     7a8:	e8 0f       	add	r30, r24
     7aa:	f9 1f       	adc	r31, r25
     7ac:	10 82       	st	Z, r1
     7ae:	01 96       	adiw	r24, 0x01	; 1
     7b0:	80 17       	cp	r24, r16
     7b2:	91 07       	cpc	r25, r17
     7b4:	c4 f3       	brlt	.-16     	; 0x7a6 <getupcmd+0x4e>
     7b6:	31 2c       	mov	r3, r1
     7b8:	a1 2c       	mov	r10, r1
     7ba:	b1 2c       	mov	r11, r1
     7bc:	41 2c       	mov	r4, r1
     7be:	51 2c       	mov	r5, r1
     7c0:	61 2c       	mov	r6, r1
     7c2:	71 2c       	mov	r7, r1
     7c4:	c1 2c       	mov	r12, r1
     7c6:	d1 2c       	mov	r13, r1
     7c8:	50 c0       	rjmp	.+160    	; 0x86a <getupcmd+0x112>
	termcnt = 0;
	for (wtim = 0; (wtim < 5000); wtim++)		// hang around waiting for some input
	{
		while(USART_0_is_rx_ready())
		{
			if(inindex < bsize)		// check not overflowed our buffer
     7ca:	c0 16       	cp	r12, r16
     7cc:	d1 06       	cpc	r13, r17
			{
				ch = USART_0_read();
     7ce:	7c f5       	brge	.+94     	; 0x82e <getupcmd+0xd6>
				buf[inindex++] = ch;
     7d0:	3f d2       	rcall	.+1150   	; 0xc50 <USART_0_read>
     7d2:	46 01       	movw	r8, r12
     7d4:	9f ef       	ldi	r25, 0xFF	; 255
     7d6:	89 1a       	sub	r8, r25
     7d8:	99 0a       	sbc	r9, r25
     7da:	f7 01       	movw	r30, r14
     7dc:	ec 0d       	add	r30, r12
     7de:	fd 1d       	adc	r31, r13
				if (!(validcmd)) {
     7e0:	80 83       	st	Z, r24
     7e2:	31 10       	cpse	r3, r1
					if (uploadmsg[mindex] == ch)			// compare this char
     7e4:	13 c0       	rjmp	.+38     	; 0x80c <getupcmd+0xb4>
     7e6:	e1 e0       	ldi	r30, 0x01	; 1
     7e8:	f0 e0       	ldi	r31, 0x00	; 0
     7ea:	ec 0f       	add	r30, r28
     7ec:	fd 1f       	adc	r31, r29
     7ee:	e6 0d       	add	r30, r6
     7f0:	f7 1d       	adc	r31, r7
     7f2:	90 81       	ld	r25, Z
					{
						USART_3_write(ch);
     7f4:	89 13       	cpse	r24, r25
     7f6:	26 c0       	rjmp	.+76     	; 0x844 <getupcmd+0xec>
						mindex++;
     7f8:	0a d4       	rcall	.+2068   	; 0x100e <USART_3_write>
     7fa:	8f ef       	ldi	r24, 0xFF	; 255
     7fc:	68 1a       	sub	r6, r24
						if (mindex == sizeof(uploadmsg))	// all matched
     7fe:	78 0a       	sbc	r7, r24
     800:	9a e0       	ldi	r25, 0x0A	; 10
     802:	69 16       	cp	r6, r25
     804:	71 04       	cpc	r7, r1
		while(USART_0_is_rx_ready())
		{
			if(inindex < bsize)		// check not overflowed our buffer
			{
				ch = USART_0_read();
				buf[inindex++] = ch;
     806:	19 f1       	breq	.+70     	; 0x84e <getupcmd+0xf6>
     808:	64 01       	movw	r12, r8
					}
				}
				else
				{
					// valid upload command - we need to get the params and find the end
					if (ch == 0xff)
     80a:	26 c0       	rjmp	.+76     	; 0x858 <getupcmd+0x100>
     80c:	8f 3f       	cpi	r24, 0xFF	; 255
					{
						termcnt++;
     80e:	19 f5       	brne	.+70     	; 0x856 <getupcmd+0xfe>
     810:	8f ef       	ldi	r24, 0xFF	; 255
     812:	a8 1a       	sub	r10, r24
						if (termcnt == 3)
     814:	b8 0a       	sbc	r11, r24
     816:	93 e0       	ldi	r25, 0x03	; 3
     818:	a9 16       	cp	r10, r25
     81a:	b1 04       	cpc	r11, r1
		while(USART_0_is_rx_ready())
		{
			if(inindex < bsize)		// check not overflowed our buffer
			{
				ch = USART_0_read();
				buf[inindex++] = ch;
     81c:	71 f1       	breq	.+92     	; 0x87a <getupcmd+0x122>
     81e:	64 01       	movw	r12, r8
			{
				// input buffer full
				inindex = 0;
				validcmd = false;
				termcnt = 0;
				for(i=0; i<bsize; buf[i++]='\0');
     820:	1b c0       	rjmp	.+54     	; 0x858 <getupcmd+0x100>
     822:	f7 01       	movw	r30, r14
     824:	e8 0f       	add	r30, r24
     826:	f9 1f       	adc	r31, r25
     828:	10 82       	st	Z, r1
     82a:	01 96       	adiw	r24, 0x01	; 1
     82c:	02 c0       	rjmp	.+4      	; 0x832 <getupcmd+0xda>
     82e:	80 e0       	ldi	r24, 0x00	; 0
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	80 17       	cp	r24, r16
     834:	91 07       	cpc	r25, r17
			}
			else
			{
				// input buffer full
				inindex = 0;
				validcmd = false;
     836:	ac f3       	brlt	.-22     	; 0x822 <getupcmd+0xca>
				termcnt = 0;
     838:	31 2c       	mov	r3, r1
     83a:	a1 2c       	mov	r10, r1
				}
			}
			else
			{
				// input buffer full
				inindex = 0;
     83c:	b1 2c       	mov	r11, r1
     83e:	c1 2c       	mov	r12, r1
     840:	d1 2c       	mov	r13, r1
						}
					}
					else
					{
						inindex = 0;	// no need to keep that input
						mindex = 0;		// reset the search
     842:	0a c0       	rjmp	.+20     	; 0x858 <getupcmd+0x100>
     844:	61 2c       	mov	r6, r1
							validcmd = true;
						}
					}
					else
					{
						inindex = 0;	// no need to keep that input
     846:	71 2c       	mov	r7, r1
     848:	c1 2c       	mov	r12, r1
     84a:	d1 2c       	mov	r13, r1
		while(USART_0_is_rx_ready())
		{
			if(inindex < bsize)		// check not overflowed our buffer
			{
				ch = USART_0_read();
				buf[inindex++] = ch;
     84c:	05 c0       	rjmp	.+10     	; 0x858 <getupcmd+0x100>
					{
						USART_3_write(ch);
						mindex++;
						if (mindex == sizeof(uploadmsg))	// all matched
						{
							validcmd = true;
     84e:	64 01       	movw	r12, r8
     850:	33 24       	eor	r3, r3
		while(USART_0_is_rx_ready())
		{
			if(inindex < bsize)		// check not overflowed our buffer
			{
				ch = USART_0_read();
				buf[inindex++] = ch;
     852:	33 94       	inc	r3

	for(i=0; i<bsize; buf[i++]='\0');
	termcnt = 0;
	for (wtim = 0; (wtim < 5000); wtim++)		// hang around waiting for some input
	{
		while(USART_0_is_rx_ready())
     854:	01 c0       	rjmp	.+2      	; 0x858 <getupcmd+0x100>
     856:	64 01       	movw	r12, r8
     858:	f4 d1       	rcall	.+1000   	; 0xc42 <USART_0_is_rx_ready>
				validcmd = false;
				termcnt = 0;
				for(i=0; i<bsize; buf[i++]='\0');
			}
		}
		delay_ms(1);
     85a:	81 11       	cpse	r24, r1
     85c:	b6 cf       	rjmp	.-148    	; 0x7ca <getupcmd+0x72>
     85e:	81 e0       	ldi	r24, 0x01	; 1
     860:	90 e0       	ldi	r25, 0x00	; 0

	const char uploadmsg[]="whmi-wri ";		// expected upload command

	for(i=0; i<bsize; buf[i++]='\0');
	termcnt = 0;
	for (wtim = 0; (wtim < 5000); wtim++)		// hang around waiting for some input
     862:	c1 dc       	rcall	.-1662   	; 0x1e6 <delay_ms>
     864:	8f ef       	ldi	r24, 0xFF	; 255
     866:	48 1a       	sub	r4, r24
     868:	58 0a       	sbc	r5, r24
     86a:	98 e8       	ldi	r25, 0x88	; 136
     86c:	49 16       	cp	r4, r25
     86e:	93 e1       	ldi	r25, 0x13	; 19
     870:	59 06       	cpc	r5, r25
				for(i=0; i<bsize; buf[i++]='\0');
			}
		}
		delay_ms(1);
	}
	return(-1);
     872:	94 f3       	brlt	.-28     	; 0x858 <getupcmd+0x100>
     874:	8f ef       	ldi	r24, 0xFF	; 255
     876:	9f ef       	ldi	r25, 0xFF	; 255
					if (ch == 0xff)
					{
						termcnt++;
						if (termcnt == 3)
						{
							return(0);
     878:	02 c0       	rjmp	.+4      	; 0x87e <getupcmd+0x126>
     87a:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
		delay_ms(1);
	}
	return(-1);
}
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	2a 96       	adiw	r28, 0x0a	; 10
     880:	0f b6       	in	r0, 0x3f	; 63
     882:	f8 94       	cli
     884:	de bf       	out	0x3e, r29	; 62
     886:	0f be       	out	0x3f, r0	; 63
     888:	cd bf       	out	0x3d, r28	; 61
     88a:	df 91       	pop	r29
     88c:	cf 91       	pop	r28
     88e:	1f 91       	pop	r17
     890:	0f 91       	pop	r16
     892:	ff 90       	pop	r15
     894:	ef 90       	pop	r14
     896:	df 90       	pop	r13
     898:	cf 90       	pop	r12
     89a:	bf 90       	pop	r11
     89c:	af 90       	pop	r10
     89e:	9f 90       	pop	r9
     8a0:	8f 90       	pop	r8
     8a2:	7f 90       	pop	r7
     8a4:	6f 90       	pop	r6
     8a6:	5f 90       	pop	r5
     8a8:	4f 90       	pop	r4
     8aa:	3f 90       	pop	r3
     8ac:	08 95       	ret

000008ae <doupload>:

// wait for upload command from Nextion Editor and send it to the LCD
// then change the baud rates
int doupload()
{
     8ae:	cf 93       	push	r28
     8b0:	df 93       	push	r29
     8b2:	cd b7       	in	r28, 0x3d	; 61
     8b4:	de b7       	in	r29, 0x3e	; 62
     8b6:	c8 59       	subi	r28, 0x98	; 152
     8b8:	d1 09       	sbc	r29, r1
     8ba:	0f b6       	in	r0, 0x3f	; 63
     8bc:	f8 94       	cli
     8be:	de bf       	out	0x3e, r29	; 62
     8c0:	0f be       	out	0x3f, r0	; 63
     8c2:	cd bf       	out	0x3d, r28	; 61
	char ch;
	char inbuf[128];
	unsigned long filesize, baudrate;
	char cmd[16];

	i = getupcmd(inbuf,sizeof(inbuf));
     8c4:	60 e8       	ldi	r22, 0x80	; 128
     8c6:	70 e0       	ldi	r23, 0x00	; 0
     8c8:	ce 01       	movw	r24, r28
     8ca:	01 96       	adiw	r24, 0x01	; 1
     8cc:	45 df       	rcall	.-374    	; 0x758 <getupcmd>
	if (i < 0)
     8ce:	99 23       	and	r25, r25
     8d0:	e4 f0       	brlt	.+56     	; 0x90a <doupload+0x5c>
	{
		return(-1);
	}
	// Pc has sent upload command
	sscanf(inbuf,"%s,%ld,%ld",cmd,&filesize,&baudrate);
     8d2:	ce 01       	movw	r24, r28
     8d4:	8b 57       	subi	r24, 0x7B	; 123
     8d6:	9f 4f       	sbci	r25, 0xFF	; 255
     8d8:	9f 93       	push	r25
     8da:	8f 93       	push	r24
     8dc:	04 97       	sbiw	r24, 0x04	; 4
     8de:	9f 93       	push	r25
     8e0:	8f 93       	push	r24
     8e2:	08 96       	adiw	r24, 0x08	; 8
     8e4:	9f 93       	push	r25
     8e6:	8f 93       	push	r24
     8e8:	81 e5       	ldi	r24, 0x51	; 81
     8ea:	92 e0       	ldi	r25, 0x02	; 2
     8ec:	9f 93       	push	r25
     8ee:	8f 93       	push	r24
     8f0:	ce 01       	movw	r24, r28
     8f2:	01 96       	adiw	r24, 0x01	; 1
     8f4:	9f 93       	push	r25
     8f6:	8f 93       	push	r24
     8f8:	0f d4       	rcall	.+2078   	; 0x1118 <sscanf>

	i = (int)baudrate;
	i = i + (int)filesize;
	return(0);
     8fa:	0f b6       	in	r0, 0x3f	; 63
     8fc:	f8 94       	cli
     8fe:	de bf       	out	0x3e, r29	; 62
     900:	0f be       	out	0x3f, r0	; 63
     902:	cd bf       	out	0x3d, r28	; 61
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	90 e0       	ldi	r25, 0x00	; 0
     908:	02 c0       	rjmp	.+4      	; 0x90e <doupload+0x60>
	char cmd[16];

	i = getupcmd(inbuf,sizeof(inbuf));
	if (i < 0)
	{
		return(-1);
     90a:	8f ef       	ldi	r24, 0xFF	; 255
     90c:	9f ef       	ldi	r25, 0xFF	; 255
	sscanf(inbuf,"%s,%ld,%ld",cmd,&filesize,&baudrate);

	i = (int)baudrate;
	i = i + (int)filesize;
	return(0);
}
     90e:	c8 56       	subi	r28, 0x68	; 104
     910:	df 4f       	sbci	r29, 0xFF	; 255
     912:	0f b6       	in	r0, 0x3f	; 63
     914:	f8 94       	cli
     916:	de bf       	out	0x3e, r29	; 62
     918:	0f be       	out	0x3f, r0	; 63
     91a:	cd bf       	out	0x3d, r28	; 61
     91c:	df 91       	pop	r29
     91e:	cf 91       	pop	r28
     920:	08 95       	ret

00000922 <main>:


int main(void)
{
     922:	cf 93       	push	r28
     924:	df 93       	push	r29
     926:	cd b7       	in	r28, 0x3d	; 61
     928:	de b7       	in	r29, 0x3e	; 62
     92a:	2a 97       	sbiw	r28, 0x0a	; 10
     92c:	0f b6       	in	r0, 0x3f	; 63
     92e:	f8 94       	cli
     930:	de bf       	out	0x3e, r29	; 62
     932:	0f be       	out	0x3f, r0	; 63
     934:	cd bf       	out	0x3d, r28	; 61
	uint8_t data;
	unsigned int bps, ledcnt = 0;
	volatile int i;
	volatile unsigned int j, k;

	char hellomsg[]="Hello\r\n";
     936:	88 e0       	ldi	r24, 0x08	; 8
     938:	ee e9       	ldi	r30, 0x9E	; 158
     93a:	f2 e0       	ldi	r31, 0x02	; 2
     93c:	de 01       	movw	r26, r28
     93e:	13 96       	adiw	r26, 0x03	; 3
     940:	01 90       	ld	r0, Z+
     942:	0d 92       	st	X+, r0
     944:	8a 95       	dec	r24


	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
     946:	e1 f7       	brne	.-8      	; 0x940 <main+0x1e>

	/* Replace with your application code */
	sei();
     948:	f4 db       	rcall	.-2072   	; 0x132 <atmel_start_init>


	for(i=0; i<sizeof(hellomsg)-1; i++)
     94a:	78 94       	sei
     94c:	1a 82       	std	Y+2, r1	; 0x02
     94e:	19 82       	std	Y+1, r1	; 0x01
	{
		USART_3_write(hellomsg[i]);
     950:	0f c0       	rjmp	.+30     	; 0x970 <main+0x4e>
     952:	e9 81       	ldd	r30, Y+1	; 0x01
     954:	fa 81       	ldd	r31, Y+2	; 0x02
     956:	83 e0       	ldi	r24, 0x03	; 3
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	8c 0f       	add	r24, r28
     95c:	9d 1f       	adc	r25, r29
     95e:	e8 0f       	add	r30, r24
     960:	f9 1f       	adc	r31, r25
     962:	80 81       	ld	r24, Z

	/* Replace with your application code */
	sei();


	for(i=0; i<sizeof(hellomsg)-1; i++)
     964:	54 d3       	rcall	.+1704   	; 0x100e <USART_3_write>
     966:	89 81       	ldd	r24, Y+1	; 0x01
     968:	9a 81       	ldd	r25, Y+2	; 0x02
     96a:	01 96       	adiw	r24, 0x01	; 1
     96c:	9a 83       	std	Y+2, r25	; 0x02
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	89 81       	ldd	r24, Y+1	; 0x01
     972:	9a 81       	ldd	r25, Y+2	; 0x02
     974:	07 97       	sbiw	r24, 0x07	; 7

	while (1)
	{

		ledcnt = 1;
		i = -1;
     976:	68 f3       	brcs	.-38     	; 0x952 <main+0x30>
     978:	8f ef       	ldi	r24, 0xFF	; 255
     97a:	9f ef       	ldi	r25, 0xFF	; 255
     97c:	9a 83       	std	Y+2, r25	; 0x02
		while (i < 1)
     97e:	89 83       	std	Y+1, r24	; 0x01
		{
			printf("Finding LCD\n\r");
     980:	0a c0       	rjmp	.+20     	; 0x996 <main+0x74>
     982:	8c e5       	ldi	r24, 0x5C	; 92
     984:	92 e0       	ldi	r25, 0x02	; 2
     986:	9f 93       	push	r25
			i = findlcd();
     988:	8f 93       	push	r24
     98a:	b3 d3       	rcall	.+1894   	; 0x10f2 <printf>
     98c:	bd dc       	rcall	.-1670   	; 0x308 <findlcd>
     98e:	9a 83       	std	Y+2, r25	; 0x02
     990:	89 83       	std	Y+1, r24	; 0x01
     992:	0f 90       	pop	r0
	while (1)
	{

		ledcnt = 1;
		i = -1;
		while (i < 1)
     994:	0f 90       	pop	r0
     996:	89 81       	ldd	r24, Y+1	; 0x01
     998:	9a 81       	ldd	r25, Y+2	; 0x02
     99a:	18 16       	cp	r1, r24
		{
			printf("Finding LCD\n\r");
			i = findlcd();
		}
//		printf("Found LCD at bindex %d, %s\n\r",i,lcdsig);
		printf("Found LCD\n\r");
     99c:	19 06       	cpc	r1, r25
     99e:	8c f7       	brge	.-30     	; 0x982 <main+0x60>
     9a0:	8a e6       	ldi	r24, 0x6A	; 106
     9a2:	92 e0       	ldi	r25, 0x02	; 2
     9a4:	9f 93       	push	r25
		i = -1;
     9a6:	8f 93       	push	r24
     9a8:	a4 d3       	rcall	.+1864   	; 0x10f2 <printf>
     9aa:	8f ef       	ldi	r24, 0xFF	; 255
     9ac:	9f ef       	ldi	r25, 0xFF	; 255
		while( i < 0)
     9ae:	9a 83       	std	Y+2, r25	; 0x02
		{
			printf("Waiting for Nextion Editor to connect\n\r");
     9b0:	89 83       	std	Y+1, r24	; 0x01
     9b2:	0f 90       	pop	r0
     9b4:	0f 90       	pop	r0
     9b6:	0a c0       	rjmp	.+20     	; 0x9cc <main+0xaa>
     9b8:	86 e7       	ldi	r24, 0x76	; 118
			i = conntoed();
     9ba:	92 e0       	ldi	r25, 0x02	; 2
     9bc:	9f 93       	push	r25
     9be:	8f 93       	push	r24
     9c0:	98 d3       	rcall	.+1840   	; 0x10f2 <printf>
     9c2:	52 de       	rcall	.-860    	; 0x668 <conntoed>
			i = findlcd();
		}
//		printf("Found LCD at bindex %d, %s\n\r",i,lcdsig);
		printf("Found LCD\n\r");
		i = -1;
		while( i < 0)
     9c4:	9a 83       	std	Y+2, r25	; 0x02
     9c6:	89 83       	std	Y+1, r24	; 0x01
     9c8:	0f 90       	pop	r0
     9ca:	0f 90       	pop	r0
			printf("Waiting for Nextion Editor to connect\n\r");
			i = conntoed();
		}


		doupload();
     9cc:	89 81       	ldd	r24, Y+1	; 0x01
     9ce:	9a 81       	ldd	r25, Y+2	; 0x02


		ledcnt = lcdsig[0];
     9d0:	99 23       	and	r25, r25
     9d2:	94 f3       	brlt	.-28     	; 0x9b8 <main+0x96>
		if(ledcnt)
     9d4:	6c df       	rcall	.-296    	; 0x8ae <doupload>
     9d6:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <lcdsig>
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTB |= 1 << pin;
     9da:	88 23       	and	r24, r24
     9dc:	21 f0       	breq	.+8      	; 0x9e6 <main+0xc4>
     9de:	85 b1       	in	r24, 0x05	; 5
	} else {
		PORTB &= ~(1 << pin);
     9e0:	80 68       	ori	r24, 0x80	; 128
     9e2:	85 b9       	out	0x05, r24	; 5
     9e4:	c9 cf       	rjmp	.-110    	; 0x978 <main+0x56>
     9e6:	85 b1       	in	r24, 0x05	; 5
     9e8:	8f 77       	andi	r24, 0x7F	; 127
     9ea:	85 b9       	out	0x05, r24	; 5
     9ec:	c5 cf       	rjmp	.-118    	; 0x978 <main+0x56>

000009ee <TIMER_0_initialization>:
     9ee:	a4 c0       	rjmp	.+328    	; 0xb38 <TIMER_0_init>
     9f0:	08 95       	ret

000009f2 <TIMER_1_initialization>:
     9f2:	b9 c0       	rjmp	.+370    	; 0xb66 <TIMER_1_init>
     9f4:	08 95       	ret

000009f6 <USART_0_initialization>:
     9f6:	8d b1       	in	r24, 0x0d	; 13
     9f8:	8e 7f       	andi	r24, 0xFE	; 254
     9fa:	8d b9       	out	0x0d, r24	; 13
     9fc:	8e b1       	in	r24, 0x0e	; 14
     9fe:	8e 7f       	andi	r24, 0xFE	; 254
     a00:	8e b9       	out	0x0e, r24	; 14
     a02:	8d b1       	in	r24, 0x0d	; 13
     a04:	82 60       	ori	r24, 0x02	; 2
     a06:	8d b9       	out	0x0d, r24	; 13
     a08:	8e b1       	in	r24, 0x0e	; 14
     a0a:	8d 7f       	andi	r24, 0xFD	; 253
     a0c:	8e b9       	out	0x0e, r24	; 14
     a0e:	58 c1       	rjmp	.+688    	; 0xcc0 <USART_0_init>
     a10:	08 95       	ret

00000a12 <USART_1_initialization>:
     a12:	8a b1       	in	r24, 0x0a	; 10
     a14:	8b 7f       	andi	r24, 0xFB	; 251
     a16:	8a b9       	out	0x0a, r24	; 10
     a18:	8b b1       	in	r24, 0x0b	; 11
     a1a:	8b 7f       	andi	r24, 0xFB	; 251
     a1c:	8b b9       	out	0x0b, r24	; 11
     a1e:	8a b1       	in	r24, 0x0a	; 10
     a20:	88 60       	ori	r24, 0x08	; 8
     a22:	8a b9       	out	0x0a, r24	; 10
     a24:	8b b1       	in	r24, 0x0b	; 11
     a26:	87 7f       	andi	r24, 0xF7	; 247
     a28:	8b b9       	out	0x0b, r24	; 11
     a2a:	c2 c1       	rjmp	.+900    	; 0xdb0 <USART_1_init>
     a2c:	08 95       	ret

00000a2e <USART_2_initialization>:
     a2e:	a1 e0       	ldi	r26, 0x01	; 1
     a30:	b1 e0       	ldi	r27, 0x01	; 1
     a32:	8c 91       	ld	r24, X
     a34:	8e 7f       	andi	r24, 0xFE	; 254
     a36:	8c 93       	st	X, r24
     a38:	e2 e0       	ldi	r30, 0x02	; 2
     a3a:	f1 e0       	ldi	r31, 0x01	; 1
     a3c:	80 81       	ld	r24, Z
     a3e:	8e 7f       	andi	r24, 0xFE	; 254
     a40:	80 83       	st	Z, r24
     a42:	8c 91       	ld	r24, X
     a44:	82 60       	ori	r24, 0x02	; 2
     a46:	8c 93       	st	X, r24
     a48:	80 81       	ld	r24, Z
     a4a:	8d 7f       	andi	r24, 0xFD	; 253
     a4c:	80 83       	st	Z, r24
     a4e:	67 c2       	rjmp	.+1230   	; 0xf1e <USART_2_init>
     a50:	08 95       	ret

00000a52 <USART_3_initialization>:
     a52:	a4 e0       	ldi	r26, 0x04	; 4
     a54:	b1 e0       	ldi	r27, 0x01	; 1
     a56:	8c 91       	ld	r24, X
     a58:	8e 7f       	andi	r24, 0xFE	; 254
     a5a:	8c 93       	st	X, r24
     a5c:	e5 e0       	ldi	r30, 0x05	; 5
     a5e:	f1 e0       	ldi	r31, 0x01	; 1
     a60:	80 81       	ld	r24, Z
     a62:	8e 7f       	andi	r24, 0xFE	; 254
     a64:	80 83       	st	Z, r24
     a66:	8c 91       	ld	r24, X
     a68:	82 60       	ori	r24, 0x02	; 2
     a6a:	8c 93       	st	X, r24
     a6c:	80 81       	ld	r24, Z
     a6e:	8d 7f       	andi	r24, 0xFD	; 253
     a70:	80 83       	st	Z, r24
     a72:	f0 c2       	rjmp	.+1504   	; 0x1054 <USART_3_init>
     a74:	08 95       	ret

00000a76 <system_init>:
     a76:	8f e3       	ldi	r24, 0x3F	; 63
     a78:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x700065>
     a7c:	8f ee       	ldi	r24, 0xEF	; 239
     a7e:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x700064>
     a82:	81 b1       	in	r24, 0x01	; 1
     a84:	11 b8       	out	0x01, r1	; 1
     a86:	82 b1       	in	r24, 0x02	; 2
     a88:	8f ef       	ldi	r24, 0xFF	; 255
     a8a:	82 b9       	out	0x02, r24	; 2
     a8c:	94 b1       	in	r25, 0x04	; 4
     a8e:	14 b8       	out	0x04, r1	; 4
     a90:	95 b1       	in	r25, 0x05	; 5
     a92:	85 b9       	out	0x05, r24	; 5
     a94:	97 b1       	in	r25, 0x07	; 7
     a96:	17 b8       	out	0x07, r1	; 7
     a98:	98 b1       	in	r25, 0x08	; 8
     a9a:	88 b9       	out	0x08, r24	; 8
     a9c:	9a b1       	in	r25, 0x0a	; 10
     a9e:	1a b8       	out	0x0a, r1	; 10
     aa0:	9b b1       	in	r25, 0x0b	; 11
     aa2:	8b b9       	out	0x0b, r24	; 11
     aa4:	9d b1       	in	r25, 0x0d	; 13
     aa6:	1d b8       	out	0x0d, r1	; 13
     aa8:	9e b1       	in	r25, 0x0e	; 14
     aaa:	8e b9       	out	0x0e, r24	; 14
     aac:	90 b3       	in	r25, 0x10	; 16
     aae:	10 ba       	out	0x10, r1	; 16
     ab0:	91 b3       	in	r25, 0x11	; 17
     ab2:	81 bb       	out	0x11, r24	; 17
     ab4:	93 b3       	in	r25, 0x13	; 19
     ab6:	90 7c       	andi	r25, 0xC0	; 192
     ab8:	93 bb       	out	0x13, r25	; 19
     aba:	94 b3       	in	r25, 0x14	; 20
     abc:	9f 63       	ori	r25, 0x3F	; 63
     abe:	94 bb       	out	0x14, r25	; 20
     ac0:	e1 e0       	ldi	r30, 0x01	; 1
     ac2:	f1 e0       	ldi	r31, 0x01	; 1
     ac4:	90 81       	ld	r25, Z
     ac6:	10 82       	st	Z, r1
     ac8:	e2 e0       	ldi	r30, 0x02	; 2
     aca:	f1 e0       	ldi	r31, 0x01	; 1
     acc:	90 81       	ld	r25, Z
     ace:	80 83       	st	Z, r24
     ad0:	e4 e0       	ldi	r30, 0x04	; 4
     ad2:	f1 e0       	ldi	r31, 0x01	; 1
     ad4:	90 81       	ld	r25, Z
     ad6:	10 82       	st	Z, r1
     ad8:	e5 e0       	ldi	r30, 0x05	; 5
     ada:	f1 e0       	ldi	r31, 0x01	; 1
     adc:	90 81       	ld	r25, Z
     ade:	80 83       	st	Z, r24
     ae0:	e7 e0       	ldi	r30, 0x07	; 7
     ae2:	f1 e0       	ldi	r31, 0x01	; 1
     ae4:	90 81       	ld	r25, Z
     ae6:	10 82       	st	Z, r1
     ae8:	e8 e0       	ldi	r30, 0x08	; 8
     aea:	f1 e0       	ldi	r31, 0x01	; 1
     aec:	90 81       	ld	r25, Z
     aee:	80 83       	st	Z, r24
     af0:	ea e0       	ldi	r30, 0x0A	; 10
     af2:	f1 e0       	ldi	r31, 0x01	; 1
     af4:	90 81       	ld	r25, Z
     af6:	10 82       	st	Z, r1
     af8:	eb e0       	ldi	r30, 0x0B	; 11
     afa:	f1 e0       	ldi	r31, 0x01	; 1
     afc:	90 81       	ld	r25, Z
     afe:	80 83       	st	Z, r24
     b00:	84 b1       	in	r24, 0x04	; 4
     b02:	80 68       	ori	r24, 0x80	; 128
     b04:	84 b9       	out	0x04, r24	; 4
     b06:	85 b1       	in	r24, 0x05	; 5
     b08:	8f 77       	andi	r24, 0x7F	; 127
     b0a:	85 b9       	out	0x05, r24	; 5
     b0c:	40 e0       	ldi	r20, 0x00	; 0
     b0e:	60 e8       	ldi	r22, 0x80	; 128
     b10:	81 e6       	ldi	r24, 0x61	; 97
     b12:	90 e0       	ldi	r25, 0x00	; 0
     b14:	09 d0       	rcall	.+18     	; 0xb28 <protected_write_io>
     b16:	13 be       	out	0x33, r1	; 51
     b18:	15 be       	out	0x35, r1	; 53
     b1a:	69 df       	rcall	.-302    	; 0x9ee <TIMER_0_initialization>
     b1c:	6a df       	rcall	.-300    	; 0x9f2 <TIMER_1_initialization>
     b1e:	6b df       	rcall	.-298    	; 0x9f6 <USART_0_initialization>
     b20:	78 df       	rcall	.-272    	; 0xa12 <USART_1_initialization>
     b22:	85 df       	rcall	.-246    	; 0xa2e <USART_2_initialization>
     b24:	96 cf       	rjmp	.-212    	; 0xa52 <USART_3_initialization>
     b26:	08 95       	ret

00000b28 <protected_write_io>:
#if defined(__GNUC__)
	/*
	 * We need to disable interrupts globally before the protected
	 * sequence. In order to do that we must save SREG first.
	 */
	in      r18,    _SFR_IO_ADDR(SREG)
     b28:	2f b7       	in	r18, 0x3f	; 63
	cli
     b2a:	f8 94       	cli
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
     b2c:	1b be       	out	0x3b, r1	; 59
#endif
	movw    r30, r24                // Load addr into Z
     b2e:	fc 01       	movw	r30, r24
	st      Z, r22                  // Write protection bit to I/O register
     b30:	60 83       	st	Z, r22
	st      Z, r20                  // Write value to I/O register
     b32:	40 83       	st	Z, r20
	out     _SFR_IO_ADDR(SREG), r18
     b34:	2f bf       	out	0x3f, r18	; 63

	ret                             // Return to caller
     b36:	08 95       	ret

00000b38 <TIMER_0_init>:
 */
int8_t TIMER_0_init()
{

	/* Enable TC1 */
	PRR0 &= ~(1 << PRTIM1);
     b38:	e4 e6       	ldi	r30, 0x64	; 100
     b3a:	f0 e0       	ldi	r31, 0x00	; 0
     b3c:	80 81       	ld	r24, Z
     b3e:	87 7f       	andi	r24, 0xF7	; 247
     b40:	80 83       	st	Z, r24

	// TCCR1A = (0 << COM1A1) | (0 << COM1A0) /* Normal port operation, OCA disconnected */
	//		 | (0 << COM1B1) | (0 << COM1B0) /* Normal port operation, OCB disconnected */
	//		 | (0 << WGM11) | (0 << WGM10); /* TC16 Mode 0 Normal */

	TCCR1B = (0 << WGM13) | (0 << WGM12)                /* TC16 Mode 0 Normal */
     b42:	81 e0       	ldi	r24, 0x01	; 1
     b44:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
	         | 0 << ICES1                               /* Input Capture Edge Select: disabled */
	         | (0 << CS12) | (0 << CS11) | (1 << CS10); /* No prescaling */

	// ICR1 = 0; /* Input capture value, used as top counter value in some modes: 0 */

	OCR1A = 16000; /* Output compare A: 16000 */
     b48:	80 e8       	ldi	r24, 0x80	; 128
     b4a:	9e e3       	ldi	r25, 0x3E	; 62
     b4c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
     b50:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>

	OCR1B = 16000; /* Output compare B: 16000 */
     b54:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
     b58:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>

	TIMSK1 = 0 << OCIE1B   /* Output Compare B Match Interrupt Enable: disabled */
     b5c:	82 e0       	ldi	r24, 0x02	; 2
     b5e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x70006f>
	         | 1 << OCIE1A /* Output Compare A Match Interrupt Enable: enabled */
	         | 0 << ICIE1  /* Input Capture Interrupt Enable: disabled */
	         | 0 << TOIE1; /* Overflow Interrupt Enable: disabled */

	return 0;
}
     b62:	80 e0       	ldi	r24, 0x00	; 0
     b64:	08 95       	ret

00000b66 <TIMER_1_init>:
 */
int8_t TIMER_1_init()
{

	/* Enable TC3 */
	PRR1 &= ~(1 << PRTIM3);
     b66:	e5 e6       	ldi	r30, 0x65	; 101
     b68:	f0 e0       	ldi	r31, 0x00	; 0
     b6a:	80 81       	ld	r24, Z
     b6c:	87 7f       	andi	r24, 0xF7	; 247
     b6e:	80 83       	st	Z, r24

	// TCCR3A = (0 << COM3A1) | (0 << COM3A0) /* Normal port operation, OCA disconnected */
	//		 | (0 << COM3B1) | (0 << COM3B0) /* Normal port operation, OCB disconnected */
	//		 | (0 << WGM31) | (0 << WGM30); /* TC16 Mode 0 Normal */

	TCCR3B = (0 << WGM33) | (0 << WGM32)                /* TC16 Mode 0 Normal */
     b70:	81 e0       	ldi	r24, 0x01	; 1
     b72:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
	         | 0 << ICES3                               /* Input Capture Edge Select: disabled */
	         | (0 << CS32) | (0 << CS31) | (1 << CS30); /* No prescaling */

	// ICR3 = 0; /* Input capture value, used as top counter value in some modes: 0 */

	OCR3A = 16000; /* Output compare A: 16000 */
     b76:	80 e8       	ldi	r24, 0x80	; 128
     b78:	9e e3       	ldi	r25, 0x3E	; 62
     b7a:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
     b7e:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>

	// OCR3B = 0; /* Output compare B: 0 */

	TIMSK3 = 0 << OCIE3B   /* Output Compare B Match Interrupt Enable: disabled */
     b82:	82 e0       	ldi	r24, 0x02	; 2
     b84:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
	         | 1 << OCIE3A /* Output Compare A Match Interrupt Enable: enabled */
	         | 0 << ICIE3  /* Input Capture Interrupt Enable: disabled */
	         | 0 << TOIE3; /* Overflow Interrupt Enable: disabled */

	return 0;
}
     b88:	80 e0       	ldi	r24, 0x00	; 0
     b8a:	08 95       	ret

00000b8c <__vector_25>:
	USART_3_rx_elements--;
	EXIT_CRITICAL(R);

	/* Return data */
	return USART_3_rxbuf[tmptail];
}
     b8c:	1f 92       	push	r1
     b8e:	0f 92       	push	r0
     b90:	0f b6       	in	r0, 0x3f	; 63
     b92:	0f 92       	push	r0
     b94:	11 24       	eor	r1, r1
     b96:	0b b6       	in	r0, 0x3b	; 59
     b98:	0f 92       	push	r0
     b9a:	8f 93       	push	r24
     b9c:	9f 93       	push	r25
     b9e:	ef 93       	push	r30
     ba0:	ff 93       	push	r31
     ba2:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     ba6:	e0 91 ab 03 	lds	r30, 0x03AB	; 0x8003ab <USART_0_rx_head>
     baa:	ef 5f       	subi	r30, 0xFF	; 255
     bac:	ef 77       	andi	r30, 0x7F	; 127
     bae:	e0 93 ab 03 	sts	0x03AB, r30	; 0x8003ab <USART_0_rx_head>
     bb2:	90 91 aa 03 	lds	r25, 0x03AA	; 0x8003aa <USART_0_rx_tail>
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	e4 55       	subi	r30, 0x54	; 84
     bba:	fc 4f       	sbci	r31, 0xFC	; 252
     bbc:	80 83       	st	Z, r24
     bbe:	80 91 a9 03 	lds	r24, 0x03A9	; 0x8003a9 <USART_0_rx_elements>
     bc2:	8f 5f       	subi	r24, 0xFF	; 255
     bc4:	80 93 a9 03 	sts	0x03A9, r24	; 0x8003a9 <USART_0_rx_elements>
     bc8:	ff 91       	pop	r31
     bca:	ef 91       	pop	r30
     bcc:	9f 91       	pop	r25
     bce:	8f 91       	pop	r24
     bd0:	0f 90       	pop	r0
     bd2:	0b be       	out	0x3b, r0	; 59
     bd4:	0f 90       	pop	r0
     bd6:	0f be       	out	0x3f, r0	; 63
     bd8:	0f 90       	pop	r0
     bda:	1f 90       	pop	r1
     bdc:	18 95       	reti

00000bde <__vector_26>:
     bde:	1f 92       	push	r1
     be0:	0f 92       	push	r0
     be2:	0f b6       	in	r0, 0x3f	; 63
     be4:	0f 92       	push	r0
     be6:	11 24       	eor	r1, r1
     be8:	0b b6       	in	r0, 0x3b	; 59
     bea:	0f 92       	push	r0
     bec:	8f 93       	push	r24
     bee:	ef 93       	push	r30
     bf0:	ff 93       	push	r31
     bf2:	80 91 96 03 	lds	r24, 0x0396	; 0x800396 <USART_0_tx_elements>
     bf6:	88 23       	and	r24, r24
     bf8:	89 f0       	breq	.+34     	; 0xc1c <__vector_26+0x3e>
     bfa:	e0 91 97 03 	lds	r30, 0x0397	; 0x800397 <USART_0_tx_tail>
     bfe:	ef 5f       	subi	r30, 0xFF	; 255
     c00:	ef 70       	andi	r30, 0x0F	; 15
     c02:	e0 93 97 03 	sts	0x0397, r30	; 0x800397 <USART_0_tx_tail>
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	e7 56       	subi	r30, 0x67	; 103
     c0a:	fc 4f       	sbci	r31, 0xFC	; 252
     c0c:	80 81       	ld	r24, Z
     c0e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     c12:	80 91 96 03 	lds	r24, 0x0396	; 0x800396 <USART_0_tx_elements>
     c16:	81 50       	subi	r24, 0x01	; 1
     c18:	80 93 96 03 	sts	0x0396, r24	; 0x800396 <USART_0_tx_elements>
     c1c:	80 91 96 03 	lds	r24, 0x0396	; 0x800396 <USART_0_tx_elements>
     c20:	81 11       	cpse	r24, r1
     c22:	05 c0       	rjmp	.+10     	; 0xc2e <__vector_26+0x50>
     c24:	e1 ec       	ldi	r30, 0xC1	; 193
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	80 81       	ld	r24, Z
     c2a:	8f 7d       	andi	r24, 0xDF	; 223
     c2c:	80 83       	st	Z, r24
     c2e:	ff 91       	pop	r31
     c30:	ef 91       	pop	r30
     c32:	8f 91       	pop	r24
     c34:	0f 90       	pop	r0
     c36:	0b be       	out	0x3b, r0	; 59
     c38:	0f 90       	pop	r0
     c3a:	0f be       	out	0x3f, r0	; 63
     c3c:	0f 90       	pop	r0
     c3e:	1f 90       	pop	r1
     c40:	18 95       	reti

00000c42 <USART_0_is_rx_ready>:
     c42:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <USART_0_rx_elements>
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	91 11       	cpse	r25, r1
     c4a:	01 c0       	rjmp	.+2      	; 0xc4e <USART_0_is_rx_ready+0xc>
     c4c:	80 e0       	ldi	r24, 0x00	; 0
     c4e:	08 95       	ret

00000c50 <USART_0_read>:
     c50:	80 91 a9 03 	lds	r24, 0x03A9	; 0x8003a9 <USART_0_rx_elements>
     c54:	88 23       	and	r24, r24
     c56:	e1 f3       	breq	.-8      	; 0xc50 <USART_0_read>
     c58:	e0 91 aa 03 	lds	r30, 0x03AA	; 0x8003aa <USART_0_rx_tail>
     c5c:	ef 5f       	subi	r30, 0xFF	; 255
     c5e:	ef 77       	andi	r30, 0x7F	; 127
     c60:	e0 93 aa 03 	sts	0x03AA, r30	; 0x8003aa <USART_0_rx_tail>
     c64:	0f b6       	in	r0, 0x3f	; 63
     c66:	f8 94       	cli
     c68:	0f 92       	push	r0
     c6a:	80 91 a9 03 	lds	r24, 0x03A9	; 0x8003a9 <USART_0_rx_elements>
     c6e:	81 50       	subi	r24, 0x01	; 1
     c70:	80 93 a9 03 	sts	0x03A9, r24	; 0x8003a9 <USART_0_rx_elements>
     c74:	0f 90       	pop	r0
     c76:	0f be       	out	0x3f, r0	; 63
     c78:	f0 e0       	ldi	r31, 0x00	; 0
     c7a:	e4 55       	subi	r30, 0x54	; 84
     c7c:	fc 4f       	sbci	r31, 0xFC	; 252
     c7e:	80 81       	ld	r24, Z
     c80:	08 95       	ret

00000c82 <USART_0_write>:
     c82:	20 91 98 03 	lds	r18, 0x0398	; 0x800398 <USART_0_tx_head>
     c86:	2f 5f       	subi	r18, 0xFF	; 255
     c88:	2f 70       	andi	r18, 0x0F	; 15
     c8a:	90 91 96 03 	lds	r25, 0x0396	; 0x800396 <USART_0_tx_elements>
     c8e:	90 31       	cpi	r25, 0x10	; 16
     c90:	e1 f3       	breq	.-8      	; 0xc8a <USART_0_write+0x8>
     c92:	e2 2f       	mov	r30, r18
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	e7 56       	subi	r30, 0x67	; 103
     c98:	fc 4f       	sbci	r31, 0xFC	; 252
     c9a:	80 83       	st	Z, r24
     c9c:	20 93 98 03 	sts	0x0398, r18	; 0x800398 <USART_0_tx_head>
     ca0:	0f b6       	in	r0, 0x3f	; 63
     ca2:	f8 94       	cli
     ca4:	0f 92       	push	r0
     ca6:	80 91 96 03 	lds	r24, 0x0396	; 0x800396 <USART_0_tx_elements>
     caa:	8f 5f       	subi	r24, 0xFF	; 255
     cac:	80 93 96 03 	sts	0x0396, r24	; 0x800396 <USART_0_tx_elements>
     cb0:	0f 90       	pop	r0
     cb2:	0f be       	out	0x3f, r0	; 63
     cb4:	e1 ec       	ldi	r30, 0xC1	; 193
     cb6:	f0 e0       	ldi	r31, 0x00	; 0
     cb8:	80 81       	ld	r24, Z
     cba:	80 62       	ori	r24, 0x20	; 32
     cbc:	80 83       	st	Z, r24
     cbe:	08 95       	ret

00000cc0 <USART_0_init>:
     cc0:	e4 e6       	ldi	r30, 0x64	; 100
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	8d 7f       	andi	r24, 0xFD	; 253
     cc8:	80 83       	st	Z, r24
     cca:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
     cce:	87 e6       	ldi	r24, 0x67	; 103
     cd0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
     cd4:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
     cd8:	88 e9       	ldi	r24, 0x98	; 152
     cda:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
     cde:	10 92 aa 03 	sts	0x03AA, r1	; 0x8003aa <USART_0_rx_tail>
     ce2:	10 92 ab 03 	sts	0x03AB, r1	; 0x8003ab <USART_0_rx_head>
     ce6:	10 92 a9 03 	sts	0x03A9, r1	; 0x8003a9 <USART_0_rx_elements>
     cea:	10 92 97 03 	sts	0x0397, r1	; 0x800397 <USART_0_tx_tail>
     cee:	10 92 98 03 	sts	0x0398, r1	; 0x800398 <USART_0_tx_head>
     cf2:	10 92 96 03 	sts	0x0396, r1	; 0x800396 <USART_0_tx_elements>
     cf6:	80 e0       	ldi	r24, 0x00	; 0
     cf8:	08 95       	ret

00000cfa <__vector_36>:
     cfa:	1f 92       	push	r1
     cfc:	0f 92       	push	r0
     cfe:	0f b6       	in	r0, 0x3f	; 63
     d00:	0f 92       	push	r0
     d02:	11 24       	eor	r1, r1
     d04:	0b b6       	in	r0, 0x3b	; 59
     d06:	0f 92       	push	r0
     d08:	8f 93       	push	r24
     d0a:	9f 93       	push	r25
     d0c:	ef 93       	push	r30
     d0e:	ff 93       	push	r31
     d10:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
     d14:	e0 91 8d 03 	lds	r30, 0x038D	; 0x80038d <USART_1_rx_head>
     d18:	ef 5f       	subi	r30, 0xFF	; 255
     d1a:	e7 70       	andi	r30, 0x07	; 7
     d1c:	e0 93 8d 03 	sts	0x038D, r30	; 0x80038d <USART_1_rx_head>
     d20:	90 91 8c 03 	lds	r25, 0x038C	; 0x80038c <USART_1_rx_tail>
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	e2 57       	subi	r30, 0x72	; 114
     d28:	fc 4f       	sbci	r31, 0xFC	; 252
     d2a:	80 83       	st	Z, r24
     d2c:	80 91 8b 03 	lds	r24, 0x038B	; 0x80038b <USART_1_rx_elements>
     d30:	8f 5f       	subi	r24, 0xFF	; 255
     d32:	80 93 8b 03 	sts	0x038B, r24	; 0x80038b <USART_1_rx_elements>
     d36:	ff 91       	pop	r31
     d38:	ef 91       	pop	r30
     d3a:	9f 91       	pop	r25
     d3c:	8f 91       	pop	r24
     d3e:	0f 90       	pop	r0
     d40:	0b be       	out	0x3b, r0	; 59
     d42:	0f 90       	pop	r0
     d44:	0f be       	out	0x3f, r0	; 63
     d46:	0f 90       	pop	r0
     d48:	1f 90       	pop	r1
     d4a:	18 95       	reti

00000d4c <__vector_37>:
     d4c:	1f 92       	push	r1
     d4e:	0f 92       	push	r0
     d50:	0f b6       	in	r0, 0x3f	; 63
     d52:	0f 92       	push	r0
     d54:	11 24       	eor	r1, r1
     d56:	0b b6       	in	r0, 0x3b	; 59
     d58:	0f 92       	push	r0
     d5a:	8f 93       	push	r24
     d5c:	ef 93       	push	r30
     d5e:	ff 93       	push	r31
     d60:	80 91 80 03 	lds	r24, 0x0380	; 0x800380 <USART_1_tx_elements>
     d64:	88 23       	and	r24, r24
     d66:	89 f0       	breq	.+34     	; 0xd8a <__vector_37+0x3e>
     d68:	e0 91 81 03 	lds	r30, 0x0381	; 0x800381 <USART_1_tx_tail>
     d6c:	ef 5f       	subi	r30, 0xFF	; 255
     d6e:	e7 70       	andi	r30, 0x07	; 7
     d70:	e0 93 81 03 	sts	0x0381, r30	; 0x800381 <USART_1_tx_tail>
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	ed 57       	subi	r30, 0x7D	; 125
     d78:	fc 4f       	sbci	r31, 0xFC	; 252
     d7a:	80 81       	ld	r24, Z
     d7c:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
     d80:	80 91 80 03 	lds	r24, 0x0380	; 0x800380 <USART_1_tx_elements>
     d84:	81 50       	subi	r24, 0x01	; 1
     d86:	80 93 80 03 	sts	0x0380, r24	; 0x800380 <USART_1_tx_elements>
     d8a:	80 91 80 03 	lds	r24, 0x0380	; 0x800380 <USART_1_tx_elements>
     d8e:	81 11       	cpse	r24, r1
     d90:	05 c0       	rjmp	.+10     	; 0xd9c <__vector_37+0x50>
     d92:	e9 ec       	ldi	r30, 0xC9	; 201
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	80 81       	ld	r24, Z
     d98:	8f 7d       	andi	r24, 0xDF	; 223
     d9a:	80 83       	st	Z, r24
     d9c:	ff 91       	pop	r31
     d9e:	ef 91       	pop	r30
     da0:	8f 91       	pop	r24
     da2:	0f 90       	pop	r0
     da4:	0b be       	out	0x3b, r0	; 59
     da6:	0f 90       	pop	r0
     da8:	0f be       	out	0x3f, r0	; 63
     daa:	0f 90       	pop	r0
     dac:	1f 90       	pop	r1
     dae:	18 95       	reti

00000db0 <USART_1_init>:
     db0:	e5 e6       	ldi	r30, 0x65	; 101
     db2:	f0 e0       	ldi	r31, 0x00	; 0
     db4:	80 81       	ld	r24, Z
     db6:	8e 7f       	andi	r24, 0xFE	; 254
     db8:	80 83       	st	Z, r24
     dba:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
     dbe:	87 e6       	ldi	r24, 0x67	; 103
     dc0:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
     dc4:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
     dc8:	88 e9       	ldi	r24, 0x98	; 152
     dca:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
     dce:	10 92 8c 03 	sts	0x038C, r1	; 0x80038c <USART_1_rx_tail>
     dd2:	10 92 8d 03 	sts	0x038D, r1	; 0x80038d <USART_1_rx_head>
     dd6:	10 92 8b 03 	sts	0x038B, r1	; 0x80038b <USART_1_rx_elements>
     dda:	10 92 81 03 	sts	0x0381, r1	; 0x800381 <USART_1_tx_tail>
     dde:	10 92 82 03 	sts	0x0382, r1	; 0x800382 <USART_1_tx_head>
     de2:	10 92 80 03 	sts	0x0380, r1	; 0x800380 <USART_1_tx_elements>
     de6:	80 e0       	ldi	r24, 0x00	; 0
     de8:	08 95       	ret

00000dea <__vector_51>:
     dea:	1f 92       	push	r1
     dec:	0f 92       	push	r0
     dee:	0f b6       	in	r0, 0x3f	; 63
     df0:	0f 92       	push	r0
     df2:	11 24       	eor	r1, r1
     df4:	0b b6       	in	r0, 0x3b	; 59
     df6:	0f 92       	push	r0
     df8:	8f 93       	push	r24
     dfa:	9f 93       	push	r25
     dfc:	ef 93       	push	r30
     dfe:	ff 93       	push	r31
     e00:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
     e04:	e0 91 3f 03 	lds	r30, 0x033F	; 0x80033f <USART_2_rx_head>
     e08:	ef 5f       	subi	r30, 0xFF	; 255
     e0a:	ef 73       	andi	r30, 0x3F	; 63
     e0c:	e0 93 3f 03 	sts	0x033F, r30	; 0x80033f <USART_2_rx_head>
     e10:	90 91 3e 03 	lds	r25, 0x033E	; 0x80033e <USART_2_rx_tail>
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	e0 5c       	subi	r30, 0xC0	; 192
     e18:	fc 4f       	sbci	r31, 0xFC	; 252
     e1a:	80 83       	st	Z, r24
     e1c:	80 91 3d 03 	lds	r24, 0x033D	; 0x80033d <USART_2_rx_elements>
     e20:	8f 5f       	subi	r24, 0xFF	; 255
     e22:	80 93 3d 03 	sts	0x033D, r24	; 0x80033d <USART_2_rx_elements>
     e26:	ff 91       	pop	r31
     e28:	ef 91       	pop	r30
     e2a:	9f 91       	pop	r25
     e2c:	8f 91       	pop	r24
     e2e:	0f 90       	pop	r0
     e30:	0b be       	out	0x3b, r0	; 59
     e32:	0f 90       	pop	r0
     e34:	0f be       	out	0x3f, r0	; 63
     e36:	0f 90       	pop	r0
     e38:	1f 90       	pop	r1
     e3a:	18 95       	reti

00000e3c <__vector_52>:
     e3c:	1f 92       	push	r1
     e3e:	0f 92       	push	r0
     e40:	0f b6       	in	r0, 0x3f	; 63
     e42:	0f 92       	push	r0
     e44:	11 24       	eor	r1, r1
     e46:	0b b6       	in	r0, 0x3b	; 59
     e48:	0f 92       	push	r0
     e4a:	8f 93       	push	r24
     e4c:	ef 93       	push	r30
     e4e:	ff 93       	push	r31
     e50:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <USART_2_tx_elements>
     e54:	88 23       	and	r24, r24
     e56:	89 f0       	breq	.+34     	; 0xe7a <__vector_52+0x3e>
     e58:	e0 91 33 03 	lds	r30, 0x0333	; 0x800333 <USART_2_tx_tail>
     e5c:	ef 5f       	subi	r30, 0xFF	; 255
     e5e:	e7 70       	andi	r30, 0x07	; 7
     e60:	e0 93 33 03 	sts	0x0333, r30	; 0x800333 <USART_2_tx_tail>
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	eb 5c       	subi	r30, 0xCB	; 203
     e68:	fc 4f       	sbci	r31, 0xFC	; 252
     e6a:	80 81       	ld	r24, Z
     e6c:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
     e70:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <USART_2_tx_elements>
     e74:	81 50       	subi	r24, 0x01	; 1
     e76:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <USART_2_tx_elements>
     e7a:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <USART_2_tx_elements>
     e7e:	81 11       	cpse	r24, r1
     e80:	05 c0       	rjmp	.+10     	; 0xe8c <__vector_52+0x50>
     e82:	e1 ed       	ldi	r30, 0xD1	; 209
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	80 81       	ld	r24, Z
     e88:	8f 7d       	andi	r24, 0xDF	; 223
     e8a:	80 83       	st	Z, r24
     e8c:	ff 91       	pop	r31
     e8e:	ef 91       	pop	r30
     e90:	8f 91       	pop	r24
     e92:	0f 90       	pop	r0
     e94:	0b be       	out	0x3b, r0	; 59
     e96:	0f 90       	pop	r0
     e98:	0f be       	out	0x3f, r0	; 63
     e9a:	0f 90       	pop	r0
     e9c:	1f 90       	pop	r1
     e9e:	18 95       	reti

00000ea0 <USART_2_is_rx_ready>:
     ea0:	90 91 3d 03 	lds	r25, 0x033D	; 0x80033d <USART_2_rx_elements>
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	91 11       	cpse	r25, r1
     ea8:	01 c0       	rjmp	.+2      	; 0xeac <USART_2_is_rx_ready+0xc>
     eaa:	80 e0       	ldi	r24, 0x00	; 0
     eac:	08 95       	ret

00000eae <USART_2_read>:
     eae:	80 91 3d 03 	lds	r24, 0x033D	; 0x80033d <USART_2_rx_elements>
     eb2:	88 23       	and	r24, r24
     eb4:	e1 f3       	breq	.-8      	; 0xeae <USART_2_read>
     eb6:	e0 91 3e 03 	lds	r30, 0x033E	; 0x80033e <USART_2_rx_tail>
     eba:	ef 5f       	subi	r30, 0xFF	; 255
     ebc:	ef 73       	andi	r30, 0x3F	; 63
     ebe:	e0 93 3e 03 	sts	0x033E, r30	; 0x80033e <USART_2_rx_tail>
     ec2:	0f b6       	in	r0, 0x3f	; 63
     ec4:	f8 94       	cli
     ec6:	0f 92       	push	r0
     ec8:	80 91 3d 03 	lds	r24, 0x033D	; 0x80033d <USART_2_rx_elements>
     ecc:	81 50       	subi	r24, 0x01	; 1
     ece:	80 93 3d 03 	sts	0x033D, r24	; 0x80033d <USART_2_rx_elements>
     ed2:	0f 90       	pop	r0
     ed4:	0f be       	out	0x3f, r0	; 63
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	e0 5c       	subi	r30, 0xC0	; 192
     eda:	fc 4f       	sbci	r31, 0xFC	; 252
     edc:	80 81       	ld	r24, Z
     ede:	08 95       	ret

00000ee0 <USART_2_write>:
     ee0:	20 91 34 03 	lds	r18, 0x0334	; 0x800334 <USART_2_tx_head>
     ee4:	2f 5f       	subi	r18, 0xFF	; 255
     ee6:	27 70       	andi	r18, 0x07	; 7
     ee8:	90 91 32 03 	lds	r25, 0x0332	; 0x800332 <USART_2_tx_elements>
     eec:	98 30       	cpi	r25, 0x08	; 8
     eee:	e1 f3       	breq	.-8      	; 0xee8 <USART_2_write+0x8>
     ef0:	e2 2f       	mov	r30, r18
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	eb 5c       	subi	r30, 0xCB	; 203
     ef6:	fc 4f       	sbci	r31, 0xFC	; 252
     ef8:	80 83       	st	Z, r24
     efa:	20 93 34 03 	sts	0x0334, r18	; 0x800334 <USART_2_tx_head>
     efe:	0f b6       	in	r0, 0x3f	; 63
     f00:	f8 94       	cli
     f02:	0f 92       	push	r0
     f04:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <USART_2_tx_elements>
     f08:	8f 5f       	subi	r24, 0xFF	; 255
     f0a:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <USART_2_tx_elements>
     f0e:	0f 90       	pop	r0
     f10:	0f be       	out	0x3f, r0	; 63
     f12:	e1 ed       	ldi	r30, 0xD1	; 209
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	80 62       	ori	r24, 0x20	; 32
     f1a:	80 83       	st	Z, r24
     f1c:	08 95       	ret

00000f1e <USART_2_init>:
     f1e:	e5 e6       	ldi	r30, 0x65	; 101
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	80 81       	ld	r24, Z
     f24:	8d 7f       	andi	r24, 0xFD	; 253
     f26:	80 83       	st	Z, r24
     f28:	10 92 d5 00 	sts	0x00D5, r1	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
     f2c:	87 e6       	ldi	r24, 0x67	; 103
     f2e:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
     f32:	10 92 d0 00 	sts	0x00D0, r1	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
     f36:	88 e9       	ldi	r24, 0x98	; 152
     f38:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>
     f3c:	10 92 3e 03 	sts	0x033E, r1	; 0x80033e <USART_2_rx_tail>
     f40:	10 92 3f 03 	sts	0x033F, r1	; 0x80033f <USART_2_rx_head>
     f44:	10 92 3d 03 	sts	0x033D, r1	; 0x80033d <USART_2_rx_elements>
     f48:	10 92 33 03 	sts	0x0333, r1	; 0x800333 <USART_2_tx_tail>
     f4c:	10 92 34 03 	sts	0x0334, r1	; 0x800334 <USART_2_tx_head>
     f50:	10 92 32 03 	sts	0x0332, r1	; 0x800332 <USART_2_tx_elements>
     f54:	80 e0       	ldi	r24, 0x00	; 0
     f56:	08 95       	ret

00000f58 <__vector_54>:
     f58:	1f 92       	push	r1
     f5a:	0f 92       	push	r0
     f5c:	0f b6       	in	r0, 0x3f	; 63
     f5e:	0f 92       	push	r0
     f60:	11 24       	eor	r1, r1
     f62:	0b b6       	in	r0, 0x3b	; 59
     f64:	0f 92       	push	r0
     f66:	8f 93       	push	r24
     f68:	9f 93       	push	r25
     f6a:	ef 93       	push	r30
     f6c:	ff 93       	push	r31
     f6e:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
     f72:	e0 91 29 03 	lds	r30, 0x0329	; 0x800329 <USART_3_rx_head>
     f76:	ef 5f       	subi	r30, 0xFF	; 255
     f78:	e7 70       	andi	r30, 0x07	; 7
     f7a:	e0 93 29 03 	sts	0x0329, r30	; 0x800329 <USART_3_rx_head>
     f7e:	90 91 28 03 	lds	r25, 0x0328	; 0x800328 <USART_3_rx_tail>
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	e6 5d       	subi	r30, 0xD6	; 214
     f86:	fc 4f       	sbci	r31, 0xFC	; 252
     f88:	80 83       	st	Z, r24
     f8a:	80 91 27 03 	lds	r24, 0x0327	; 0x800327 <USART_3_rx_elements>
     f8e:	8f 5f       	subi	r24, 0xFF	; 255
     f90:	80 93 27 03 	sts	0x0327, r24	; 0x800327 <USART_3_rx_elements>
     f94:	ff 91       	pop	r31
     f96:	ef 91       	pop	r30
     f98:	9f 91       	pop	r25
     f9a:	8f 91       	pop	r24
     f9c:	0f 90       	pop	r0
     f9e:	0b be       	out	0x3b, r0	; 59
     fa0:	0f 90       	pop	r0
     fa2:	0f be       	out	0x3f, r0	; 63
     fa4:	0f 90       	pop	r0
     fa6:	1f 90       	pop	r1
     fa8:	18 95       	reti

00000faa <__vector_55>:
     faa:	1f 92       	push	r1
     fac:	0f 92       	push	r0
     fae:	0f b6       	in	r0, 0x3f	; 63
     fb0:	0f 92       	push	r0
     fb2:	11 24       	eor	r1, r1
     fb4:	0b b6       	in	r0, 0x3b	; 59
     fb6:	0f 92       	push	r0
     fb8:	8f 93       	push	r24
     fba:	ef 93       	push	r30
     fbc:	ff 93       	push	r31
     fbe:	80 91 1c 03 	lds	r24, 0x031C	; 0x80031c <USART_3_tx_elements>
     fc2:	88 23       	and	r24, r24
     fc4:	89 f0       	breq	.+34     	; 0xfe8 <__vector_55+0x3e>
     fc6:	e0 91 1d 03 	lds	r30, 0x031D	; 0x80031d <USART_3_tx_tail>
     fca:	ef 5f       	subi	r30, 0xFF	; 255
     fcc:	e7 70       	andi	r30, 0x07	; 7
     fce:	e0 93 1d 03 	sts	0x031D, r30	; 0x80031d <USART_3_tx_tail>
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	e1 5e       	subi	r30, 0xE1	; 225
     fd6:	fc 4f       	sbci	r31, 0xFC	; 252
     fd8:	80 81       	ld	r24, Z
     fda:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
     fde:	80 91 1c 03 	lds	r24, 0x031C	; 0x80031c <USART_3_tx_elements>
     fe2:	81 50       	subi	r24, 0x01	; 1
     fe4:	80 93 1c 03 	sts	0x031C, r24	; 0x80031c <USART_3_tx_elements>
     fe8:	80 91 1c 03 	lds	r24, 0x031C	; 0x80031c <USART_3_tx_elements>
     fec:	81 11       	cpse	r24, r1
     fee:	05 c0       	rjmp	.+10     	; 0xffa <__vector_55+0x50>
     ff0:	e1 e3       	ldi	r30, 0x31	; 49
     ff2:	f1 e0       	ldi	r31, 0x01	; 1
     ff4:	80 81       	ld	r24, Z
     ff6:	8f 7d       	andi	r24, 0xDF	; 223
     ff8:	80 83       	st	Z, r24
     ffa:	ff 91       	pop	r31
     ffc:	ef 91       	pop	r30
     ffe:	8f 91       	pop	r24
    1000:	0f 90       	pop	r0
    1002:	0b be       	out	0x3b, r0	; 59
    1004:	0f 90       	pop	r0
    1006:	0f be       	out	0x3f, r0	; 63
    1008:	0f 90       	pop	r0
    100a:	1f 90       	pop	r1
    100c:	18 95       	reti

0000100e <USART_3_write>:
void USART_3_write(const uint8_t data)
{
	uint8_t tmphead;

	/* Calculate buffer index */
	tmphead = (USART_3_tx_head + 1) & USART_3_TX_BUFFER_MASK;
    100e:	20 91 1e 03 	lds	r18, 0x031E	; 0x80031e <USART_3_tx_head>
    1012:	2f 5f       	subi	r18, 0xFF	; 255
    1014:	27 70       	andi	r18, 0x07	; 7
	/* Wait for free space in buffer */
	while (USART_3_tx_elements == USART_3_TX_BUFFER_SIZE)
    1016:	90 91 1c 03 	lds	r25, 0x031C	; 0x80031c <USART_3_tx_elements>
    101a:	98 30       	cpi	r25, 0x08	; 8
    101c:	e1 f3       	breq	.-8      	; 0x1016 <USART_3_write+0x8>
		;
	/* Store data in buffer */
	USART_3_txbuf[tmphead] = data;
    101e:	e2 2f       	mov	r30, r18
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	e1 5e       	subi	r30, 0xE1	; 225
    1024:	fc 4f       	sbci	r31, 0xFC	; 252
    1026:	80 83       	st	Z, r24
	/* Store new index */
	USART_3_tx_head = tmphead;
    1028:	20 93 1e 03 	sts	0x031E, r18	; 0x80031e <USART_3_tx_head>
	ENTER_CRITICAL(W);
    102c:	0f b6       	in	r0, 0x3f	; 63
    102e:	f8 94       	cli
    1030:	0f 92       	push	r0
	USART_3_tx_elements++;
    1032:	80 91 1c 03 	lds	r24, 0x031C	; 0x80031c <USART_3_tx_elements>
    1036:	8f 5f       	subi	r24, 0xFF	; 255
    1038:	80 93 1c 03 	sts	0x031C, r24	; 0x80031c <USART_3_tx_elements>
	EXIT_CRITICAL(W);
    103c:	0f 90       	pop	r0
    103e:	0f be       	out	0x3f, r0	; 63
	/* Enable UDRE interrupt */
	UCSR3B |= (1 << UDRIE3);
    1040:	e1 e3       	ldi	r30, 0x31	; 49
    1042:	f1 e0       	ldi	r31, 0x01	; 1
    1044:	80 81       	ld	r24, Z
    1046:	80 62       	ori	r24, 0x20	; 32
    1048:	80 83       	st	Z, r24
    104a:	08 95       	ret

0000104c <USART_3_printCHAR>:
    104c:	e0 df       	rcall	.-64     	; 0x100e <USART_3_write>
    104e:	80 e0       	ldi	r24, 0x00	; 0
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	08 95       	ret

00001054 <USART_3_init>:
    1054:	e5 e6       	ldi	r30, 0x65	; 101
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	8b 7f       	andi	r24, 0xFB	; 251
    105c:	80 83       	st	Z, r24
    105e:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <__TEXT_REGION_LENGTH__+0x700135>
    1062:	87 e6       	ldi	r24, 0x67	; 103
    1064:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__TEXT_REGION_LENGTH__+0x700134>
    1068:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
    106c:	88 e9       	ldi	r24, 0x98	; 152
    106e:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <__TEXT_REGION_LENGTH__+0x700131>
    1072:	10 92 28 03 	sts	0x0328, r1	; 0x800328 <USART_3_rx_tail>
    1076:	10 92 29 03 	sts	0x0329, r1	; 0x800329 <USART_3_rx_head>
    107a:	10 92 27 03 	sts	0x0327, r1	; 0x800327 <USART_3_rx_elements>
    107e:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <USART_3_tx_tail>
    1082:	10 92 1e 03 	sts	0x031E, r1	; 0x80031e <USART_3_tx_head>
    1086:	10 92 1c 03 	sts	0x031C, r1	; 0x80031c <USART_3_tx_elements>
    108a:	80 e0       	ldi	r24, 0x00	; 0
    108c:	92 e0       	ldi	r25, 0x02	; 2
    108e:	90 93 2f 04 	sts	0x042F, r25	; 0x80042f <__iob+0x3>
    1092:	80 93 2e 04 	sts	0x042E, r24	; 0x80042e <__iob+0x2>
    1096:	80 e0       	ldi	r24, 0x00	; 0
    1098:	08 95       	ret

0000109a <__adddi3>:
    109a:	2a 0d       	add	r18, r10
    109c:	3b 1d       	adc	r19, r11
    109e:	4c 1d       	adc	r20, r12
    10a0:	5d 1d       	adc	r21, r13
    10a2:	6e 1d       	adc	r22, r14
    10a4:	7f 1d       	adc	r23, r15
    10a6:	80 1f       	adc	r24, r16
    10a8:	91 1f       	adc	r25, r17
    10aa:	08 95       	ret

000010ac <__adddi3_s8>:
    10ac:	00 24       	eor	r0, r0
    10ae:	a7 fd       	sbrc	r26, 7
    10b0:	00 94       	com	r0
    10b2:	2a 0f       	add	r18, r26
    10b4:	30 1d       	adc	r19, r0
    10b6:	40 1d       	adc	r20, r0
    10b8:	50 1d       	adc	r21, r0
    10ba:	60 1d       	adc	r22, r0
    10bc:	70 1d       	adc	r23, r0
    10be:	80 1d       	adc	r24, r0
    10c0:	90 1d       	adc	r25, r0
    10c2:	08 95       	ret

000010c4 <__cmpdi2>:
    10c4:	2a 15       	cp	r18, r10
    10c6:	3b 05       	cpc	r19, r11
    10c8:	4c 05       	cpc	r20, r12
    10ca:	5d 05       	cpc	r21, r13
    10cc:	6e 05       	cpc	r22, r14
    10ce:	7f 05       	cpc	r23, r15
    10d0:	80 07       	cpc	r24, r16
    10d2:	91 07       	cpc	r25, r17
    10d4:	08 95       	ret

000010d6 <strncmp>:
    10d6:	fb 01       	movw	r30, r22
    10d8:	dc 01       	movw	r26, r24
    10da:	41 50       	subi	r20, 0x01	; 1
    10dc:	50 40       	sbci	r21, 0x00	; 0
    10de:	30 f0       	brcs	.+12     	; 0x10ec <strncmp+0x16>
    10e0:	8d 91       	ld	r24, X+
    10e2:	01 90       	ld	r0, Z+
    10e4:	80 19       	sub	r24, r0
    10e6:	19 f4       	brne	.+6      	; 0x10ee <strncmp+0x18>
    10e8:	00 20       	and	r0, r0
    10ea:	b9 f7       	brne	.-18     	; 0x10da <strncmp+0x4>
    10ec:	88 1b       	sub	r24, r24
    10ee:	99 0b       	sbc	r25, r25
    10f0:	08 95       	ret

000010f2 <printf>:
    10f2:	cf 93       	push	r28
    10f4:	df 93       	push	r29
    10f6:	cd b7       	in	r28, 0x3d	; 61
    10f8:	de b7       	in	r29, 0x3e	; 62
    10fa:	ae 01       	movw	r20, r28
    10fc:	4a 5f       	subi	r20, 0xFA	; 250
    10fe:	5f 4f       	sbci	r21, 0xFF	; 255
    1100:	fa 01       	movw	r30, r20
    1102:	61 91       	ld	r22, Z+
    1104:	71 91       	ld	r23, Z+
    1106:	af 01       	movw	r20, r30
    1108:	80 91 2e 04 	lds	r24, 0x042E	; 0x80042e <__iob+0x2>
    110c:	90 91 2f 04 	lds	r25, 0x042F	; 0x80042f <__iob+0x3>
    1110:	24 d0       	rcall	.+72     	; 0x115a <vfprintf>
    1112:	df 91       	pop	r29
    1114:	cf 91       	pop	r28
    1116:	08 95       	ret

00001118 <sscanf>:
    1118:	cf 93       	push	r28
    111a:	df 93       	push	r29
    111c:	cd b7       	in	r28, 0x3d	; 61
    111e:	de b7       	in	r29, 0x3e	; 62
    1120:	2e 97       	sbiw	r28, 0x0e	; 14
    1122:	0f b6       	in	r0, 0x3f	; 63
    1124:	f8 94       	cli
    1126:	de bf       	out	0x3e, r29	; 62
    1128:	0f be       	out	0x3f, r0	; 63
    112a:	cd bf       	out	0x3d, r28	; 61
    112c:	85 e0       	ldi	r24, 0x05	; 5
    112e:	8c 83       	std	Y+4, r24	; 0x04
    1130:	8c 89       	ldd	r24, Y+20	; 0x14
    1132:	9d 89       	ldd	r25, Y+21	; 0x15
    1134:	9a 83       	std	Y+2, r25	; 0x02
    1136:	89 83       	std	Y+1, r24	; 0x01
    1138:	ae 01       	movw	r20, r28
    113a:	48 5e       	subi	r20, 0xE8	; 232
    113c:	5f 4f       	sbci	r21, 0xFF	; 255
    113e:	6e 89       	ldd	r22, Y+22	; 0x16
    1140:	7f 89       	ldd	r23, Y+23	; 0x17
    1142:	ce 01       	movw	r24, r28
    1144:	01 96       	adiw	r24, 0x01	; 1
    1146:	b8 d3       	rcall	.+1904   	; 0x18b8 <vfscanf>
    1148:	2e 96       	adiw	r28, 0x0e	; 14
    114a:	0f b6       	in	r0, 0x3f	; 63
    114c:	f8 94       	cli
    114e:	de bf       	out	0x3e, r29	; 62
    1150:	0f be       	out	0x3f, r0	; 63
    1152:	cd bf       	out	0x3d, r28	; 61
    1154:	df 91       	pop	r29
    1156:	cf 91       	pop	r28
    1158:	08 95       	ret

0000115a <vfprintf>:
    115a:	2f 92       	push	r2
    115c:	3f 92       	push	r3
    115e:	4f 92       	push	r4
    1160:	5f 92       	push	r5
    1162:	6f 92       	push	r6
    1164:	7f 92       	push	r7
    1166:	8f 92       	push	r8
    1168:	9f 92       	push	r9
    116a:	af 92       	push	r10
    116c:	bf 92       	push	r11
    116e:	cf 92       	push	r12
    1170:	df 92       	push	r13
    1172:	ef 92       	push	r14
    1174:	ff 92       	push	r15
    1176:	0f 93       	push	r16
    1178:	1f 93       	push	r17
    117a:	cf 93       	push	r28
    117c:	df 93       	push	r29
    117e:	cd b7       	in	r28, 0x3d	; 61
    1180:	de b7       	in	r29, 0x3e	; 62
    1182:	2b 97       	sbiw	r28, 0x0b	; 11
    1184:	0f b6       	in	r0, 0x3f	; 63
    1186:	f8 94       	cli
    1188:	de bf       	out	0x3e, r29	; 62
    118a:	0f be       	out	0x3f, r0	; 63
    118c:	cd bf       	out	0x3d, r28	; 61
    118e:	6c 01       	movw	r12, r24
    1190:	7b 01       	movw	r14, r22
    1192:	8a 01       	movw	r16, r20
    1194:	fc 01       	movw	r30, r24
    1196:	17 82       	std	Z+7, r1	; 0x07
    1198:	16 82       	std	Z+6, r1	; 0x06
    119a:	83 81       	ldd	r24, Z+3	; 0x03
    119c:	81 ff       	sbrs	r24, 1
    119e:	bf c1       	rjmp	.+894    	; 0x151e <vfprintf+0x3c4>
    11a0:	ce 01       	movw	r24, r28
    11a2:	01 96       	adiw	r24, 0x01	; 1
    11a4:	3c 01       	movw	r6, r24
    11a6:	f6 01       	movw	r30, r12
    11a8:	93 81       	ldd	r25, Z+3	; 0x03
    11aa:	f7 01       	movw	r30, r14
    11ac:	93 fd       	sbrc	r25, 3
    11ae:	85 91       	lpm	r24, Z+
    11b0:	93 ff       	sbrs	r25, 3
    11b2:	81 91       	ld	r24, Z+
    11b4:	7f 01       	movw	r14, r30
    11b6:	88 23       	and	r24, r24
    11b8:	09 f4       	brne	.+2      	; 0x11bc <vfprintf+0x62>
    11ba:	ad c1       	rjmp	.+858    	; 0x1516 <vfprintf+0x3bc>
    11bc:	85 32       	cpi	r24, 0x25	; 37
    11be:	39 f4       	brne	.+14     	; 0x11ce <vfprintf+0x74>
    11c0:	93 fd       	sbrc	r25, 3
    11c2:	85 91       	lpm	r24, Z+
    11c4:	93 ff       	sbrs	r25, 3
    11c6:	81 91       	ld	r24, Z+
    11c8:	7f 01       	movw	r14, r30
    11ca:	85 32       	cpi	r24, 0x25	; 37
    11cc:	21 f4       	brne	.+8      	; 0x11d6 <vfprintf+0x7c>
    11ce:	b6 01       	movw	r22, r12
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	f0 d4       	rcall	.+2528   	; 0x1bb4 <fputc>
    11d4:	e8 cf       	rjmp	.-48     	; 0x11a6 <vfprintf+0x4c>
    11d6:	91 2c       	mov	r9, r1
    11d8:	21 2c       	mov	r2, r1
    11da:	31 2c       	mov	r3, r1
    11dc:	ff e1       	ldi	r31, 0x1F	; 31
    11de:	f3 15       	cp	r31, r3
    11e0:	d8 f0       	brcs	.+54     	; 0x1218 <vfprintf+0xbe>
    11e2:	8b 32       	cpi	r24, 0x2B	; 43
    11e4:	79 f0       	breq	.+30     	; 0x1204 <vfprintf+0xaa>
    11e6:	38 f4       	brcc	.+14     	; 0x11f6 <vfprintf+0x9c>
    11e8:	80 32       	cpi	r24, 0x20	; 32
    11ea:	79 f0       	breq	.+30     	; 0x120a <vfprintf+0xb0>
    11ec:	83 32       	cpi	r24, 0x23	; 35
    11ee:	a1 f4       	brne	.+40     	; 0x1218 <vfprintf+0xbe>
    11f0:	23 2d       	mov	r18, r3
    11f2:	20 61       	ori	r18, 0x10	; 16
    11f4:	1d c0       	rjmp	.+58     	; 0x1230 <vfprintf+0xd6>
    11f6:	8d 32       	cpi	r24, 0x2D	; 45
    11f8:	61 f0       	breq	.+24     	; 0x1212 <vfprintf+0xb8>
    11fa:	80 33       	cpi	r24, 0x30	; 48
    11fc:	69 f4       	brne	.+26     	; 0x1218 <vfprintf+0xbe>
    11fe:	23 2d       	mov	r18, r3
    1200:	21 60       	ori	r18, 0x01	; 1
    1202:	16 c0       	rjmp	.+44     	; 0x1230 <vfprintf+0xd6>
    1204:	83 2d       	mov	r24, r3
    1206:	82 60       	ori	r24, 0x02	; 2
    1208:	38 2e       	mov	r3, r24
    120a:	e3 2d       	mov	r30, r3
    120c:	e4 60       	ori	r30, 0x04	; 4
    120e:	3e 2e       	mov	r3, r30
    1210:	2a c0       	rjmp	.+84     	; 0x1266 <vfprintf+0x10c>
    1212:	f3 2d       	mov	r31, r3
    1214:	f8 60       	ori	r31, 0x08	; 8
    1216:	1d c0       	rjmp	.+58     	; 0x1252 <vfprintf+0xf8>
    1218:	37 fc       	sbrc	r3, 7
    121a:	2d c0       	rjmp	.+90     	; 0x1276 <vfprintf+0x11c>
    121c:	20 ed       	ldi	r18, 0xD0	; 208
    121e:	28 0f       	add	r18, r24
    1220:	2a 30       	cpi	r18, 0x0A	; 10
    1222:	40 f0       	brcs	.+16     	; 0x1234 <vfprintf+0xda>
    1224:	8e 32       	cpi	r24, 0x2E	; 46
    1226:	b9 f4       	brne	.+46     	; 0x1256 <vfprintf+0xfc>
    1228:	36 fc       	sbrc	r3, 6
    122a:	75 c1       	rjmp	.+746    	; 0x1516 <vfprintf+0x3bc>
    122c:	23 2d       	mov	r18, r3
    122e:	20 64       	ori	r18, 0x40	; 64
    1230:	32 2e       	mov	r3, r18
    1232:	19 c0       	rjmp	.+50     	; 0x1266 <vfprintf+0x10c>
    1234:	36 fe       	sbrs	r3, 6
    1236:	06 c0       	rjmp	.+12     	; 0x1244 <vfprintf+0xea>
    1238:	8a e0       	ldi	r24, 0x0A	; 10
    123a:	98 9e       	mul	r9, r24
    123c:	20 0d       	add	r18, r0
    123e:	11 24       	eor	r1, r1
    1240:	92 2e       	mov	r9, r18
    1242:	11 c0       	rjmp	.+34     	; 0x1266 <vfprintf+0x10c>
    1244:	ea e0       	ldi	r30, 0x0A	; 10
    1246:	2e 9e       	mul	r2, r30
    1248:	20 0d       	add	r18, r0
    124a:	11 24       	eor	r1, r1
    124c:	22 2e       	mov	r2, r18
    124e:	f3 2d       	mov	r31, r3
    1250:	f0 62       	ori	r31, 0x20	; 32
    1252:	3f 2e       	mov	r3, r31
    1254:	08 c0       	rjmp	.+16     	; 0x1266 <vfprintf+0x10c>
    1256:	8c 36       	cpi	r24, 0x6C	; 108
    1258:	21 f4       	brne	.+8      	; 0x1262 <vfprintf+0x108>
    125a:	83 2d       	mov	r24, r3
    125c:	80 68       	ori	r24, 0x80	; 128
    125e:	38 2e       	mov	r3, r24
    1260:	02 c0       	rjmp	.+4      	; 0x1266 <vfprintf+0x10c>
    1262:	88 36       	cpi	r24, 0x68	; 104
    1264:	41 f4       	brne	.+16     	; 0x1276 <vfprintf+0x11c>
    1266:	f7 01       	movw	r30, r14
    1268:	93 fd       	sbrc	r25, 3
    126a:	85 91       	lpm	r24, Z+
    126c:	93 ff       	sbrs	r25, 3
    126e:	81 91       	ld	r24, Z+
    1270:	7f 01       	movw	r14, r30
    1272:	81 11       	cpse	r24, r1
    1274:	b3 cf       	rjmp	.-154    	; 0x11dc <vfprintf+0x82>
    1276:	98 2f       	mov	r25, r24
    1278:	9f 7d       	andi	r25, 0xDF	; 223
    127a:	95 54       	subi	r25, 0x45	; 69
    127c:	93 30       	cpi	r25, 0x03	; 3
    127e:	28 f4       	brcc	.+10     	; 0x128a <vfprintf+0x130>
    1280:	0c 5f       	subi	r16, 0xFC	; 252
    1282:	1f 4f       	sbci	r17, 0xFF	; 255
    1284:	9f e3       	ldi	r25, 0x3F	; 63
    1286:	99 83       	std	Y+1, r25	; 0x01
    1288:	0d c0       	rjmp	.+26     	; 0x12a4 <vfprintf+0x14a>
    128a:	83 36       	cpi	r24, 0x63	; 99
    128c:	31 f0       	breq	.+12     	; 0x129a <vfprintf+0x140>
    128e:	83 37       	cpi	r24, 0x73	; 115
    1290:	71 f0       	breq	.+28     	; 0x12ae <vfprintf+0x154>
    1292:	83 35       	cpi	r24, 0x53	; 83
    1294:	09 f0       	breq	.+2      	; 0x1298 <vfprintf+0x13e>
    1296:	55 c0       	rjmp	.+170    	; 0x1342 <vfprintf+0x1e8>
    1298:	20 c0       	rjmp	.+64     	; 0x12da <vfprintf+0x180>
    129a:	f8 01       	movw	r30, r16
    129c:	80 81       	ld	r24, Z
    129e:	89 83       	std	Y+1, r24	; 0x01
    12a0:	0e 5f       	subi	r16, 0xFE	; 254
    12a2:	1f 4f       	sbci	r17, 0xFF	; 255
    12a4:	88 24       	eor	r8, r8
    12a6:	83 94       	inc	r8
    12a8:	91 2c       	mov	r9, r1
    12aa:	53 01       	movw	r10, r6
    12ac:	12 c0       	rjmp	.+36     	; 0x12d2 <vfprintf+0x178>
    12ae:	28 01       	movw	r4, r16
    12b0:	f2 e0       	ldi	r31, 0x02	; 2
    12b2:	4f 0e       	add	r4, r31
    12b4:	51 1c       	adc	r5, r1
    12b6:	f8 01       	movw	r30, r16
    12b8:	a0 80       	ld	r10, Z
    12ba:	b1 80       	ldd	r11, Z+1	; 0x01
    12bc:	36 fe       	sbrs	r3, 6
    12be:	03 c0       	rjmp	.+6      	; 0x12c6 <vfprintf+0x16c>
    12c0:	69 2d       	mov	r22, r9
    12c2:	70 e0       	ldi	r23, 0x00	; 0
    12c4:	02 c0       	rjmp	.+4      	; 0x12ca <vfprintf+0x170>
    12c6:	6f ef       	ldi	r22, 0xFF	; 255
    12c8:	7f ef       	ldi	r23, 0xFF	; 255
    12ca:	c5 01       	movw	r24, r10
    12cc:	2a d4       	rcall	.+2132   	; 0x1b22 <strnlen>
    12ce:	4c 01       	movw	r8, r24
    12d0:	82 01       	movw	r16, r4
    12d2:	f3 2d       	mov	r31, r3
    12d4:	ff 77       	andi	r31, 0x7F	; 127
    12d6:	3f 2e       	mov	r3, r31
    12d8:	15 c0       	rjmp	.+42     	; 0x1304 <vfprintf+0x1aa>
    12da:	28 01       	movw	r4, r16
    12dc:	22 e0       	ldi	r18, 0x02	; 2
    12de:	42 0e       	add	r4, r18
    12e0:	51 1c       	adc	r5, r1
    12e2:	f8 01       	movw	r30, r16
    12e4:	a0 80       	ld	r10, Z
    12e6:	b1 80       	ldd	r11, Z+1	; 0x01
    12e8:	36 fe       	sbrs	r3, 6
    12ea:	03 c0       	rjmp	.+6      	; 0x12f2 <vfprintf+0x198>
    12ec:	69 2d       	mov	r22, r9
    12ee:	70 e0       	ldi	r23, 0x00	; 0
    12f0:	02 c0       	rjmp	.+4      	; 0x12f6 <vfprintf+0x19c>
    12f2:	6f ef       	ldi	r22, 0xFF	; 255
    12f4:	7f ef       	ldi	r23, 0xFF	; 255
    12f6:	c5 01       	movw	r24, r10
    12f8:	09 d4       	rcall	.+2066   	; 0x1b0c <strnlen_P>
    12fa:	4c 01       	movw	r8, r24
    12fc:	f3 2d       	mov	r31, r3
    12fe:	f0 68       	ori	r31, 0x80	; 128
    1300:	3f 2e       	mov	r3, r31
    1302:	82 01       	movw	r16, r4
    1304:	33 fc       	sbrc	r3, 3
    1306:	19 c0       	rjmp	.+50     	; 0x133a <vfprintf+0x1e0>
    1308:	82 2d       	mov	r24, r2
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	88 16       	cp	r8, r24
    130e:	99 06       	cpc	r9, r25
    1310:	a0 f4       	brcc	.+40     	; 0x133a <vfprintf+0x1e0>
    1312:	b6 01       	movw	r22, r12
    1314:	80 e2       	ldi	r24, 0x20	; 32
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	4d d4       	rcall	.+2202   	; 0x1bb4 <fputc>
    131a:	2a 94       	dec	r2
    131c:	f5 cf       	rjmp	.-22     	; 0x1308 <vfprintf+0x1ae>
    131e:	f5 01       	movw	r30, r10
    1320:	37 fc       	sbrc	r3, 7
    1322:	85 91       	lpm	r24, Z+
    1324:	37 fe       	sbrs	r3, 7
    1326:	81 91       	ld	r24, Z+
    1328:	5f 01       	movw	r10, r30
    132a:	b6 01       	movw	r22, r12
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	42 d4       	rcall	.+2180   	; 0x1bb4 <fputc>
    1330:	21 10       	cpse	r2, r1
    1332:	2a 94       	dec	r2
    1334:	21 e0       	ldi	r18, 0x01	; 1
    1336:	82 1a       	sub	r8, r18
    1338:	91 08       	sbc	r9, r1
    133a:	81 14       	cp	r8, r1
    133c:	91 04       	cpc	r9, r1
    133e:	79 f7       	brne	.-34     	; 0x131e <vfprintf+0x1c4>
    1340:	e1 c0       	rjmp	.+450    	; 0x1504 <vfprintf+0x3aa>
    1342:	84 36       	cpi	r24, 0x64	; 100
    1344:	11 f0       	breq	.+4      	; 0x134a <vfprintf+0x1f0>
    1346:	89 36       	cpi	r24, 0x69	; 105
    1348:	39 f5       	brne	.+78     	; 0x1398 <vfprintf+0x23e>
    134a:	f8 01       	movw	r30, r16
    134c:	37 fe       	sbrs	r3, 7
    134e:	07 c0       	rjmp	.+14     	; 0x135e <vfprintf+0x204>
    1350:	60 81       	ld	r22, Z
    1352:	71 81       	ldd	r23, Z+1	; 0x01
    1354:	82 81       	ldd	r24, Z+2	; 0x02
    1356:	93 81       	ldd	r25, Z+3	; 0x03
    1358:	0c 5f       	subi	r16, 0xFC	; 252
    135a:	1f 4f       	sbci	r17, 0xFF	; 255
    135c:	08 c0       	rjmp	.+16     	; 0x136e <vfprintf+0x214>
    135e:	60 81       	ld	r22, Z
    1360:	71 81       	ldd	r23, Z+1	; 0x01
    1362:	07 2e       	mov	r0, r23
    1364:	00 0c       	add	r0, r0
    1366:	88 0b       	sbc	r24, r24
    1368:	99 0b       	sbc	r25, r25
    136a:	0e 5f       	subi	r16, 0xFE	; 254
    136c:	1f 4f       	sbci	r17, 0xFF	; 255
    136e:	f3 2d       	mov	r31, r3
    1370:	ff 76       	andi	r31, 0x6F	; 111
    1372:	3f 2e       	mov	r3, r31
    1374:	97 ff       	sbrs	r25, 7
    1376:	09 c0       	rjmp	.+18     	; 0x138a <vfprintf+0x230>
    1378:	90 95       	com	r25
    137a:	80 95       	com	r24
    137c:	70 95       	com	r23
    137e:	61 95       	neg	r22
    1380:	7f 4f       	sbci	r23, 0xFF	; 255
    1382:	8f 4f       	sbci	r24, 0xFF	; 255
    1384:	9f 4f       	sbci	r25, 0xFF	; 255
    1386:	f0 68       	ori	r31, 0x80	; 128
    1388:	3f 2e       	mov	r3, r31
    138a:	2a e0       	ldi	r18, 0x0A	; 10
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	a3 01       	movw	r20, r6
    1390:	66 d4       	rcall	.+2252   	; 0x1c5e <__ultoa_invert>
    1392:	88 2e       	mov	r8, r24
    1394:	86 18       	sub	r8, r6
    1396:	44 c0       	rjmp	.+136    	; 0x1420 <vfprintf+0x2c6>
    1398:	85 37       	cpi	r24, 0x75	; 117
    139a:	31 f4       	brne	.+12     	; 0x13a8 <vfprintf+0x24e>
    139c:	23 2d       	mov	r18, r3
    139e:	2f 7e       	andi	r18, 0xEF	; 239
    13a0:	b2 2e       	mov	r11, r18
    13a2:	2a e0       	ldi	r18, 0x0A	; 10
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	25 c0       	rjmp	.+74     	; 0x13f2 <vfprintf+0x298>
    13a8:	93 2d       	mov	r25, r3
    13aa:	99 7f       	andi	r25, 0xF9	; 249
    13ac:	b9 2e       	mov	r11, r25
    13ae:	8f 36       	cpi	r24, 0x6F	; 111
    13b0:	c1 f0       	breq	.+48     	; 0x13e2 <vfprintf+0x288>
    13b2:	18 f4       	brcc	.+6      	; 0x13ba <vfprintf+0x260>
    13b4:	88 35       	cpi	r24, 0x58	; 88
    13b6:	79 f0       	breq	.+30     	; 0x13d6 <vfprintf+0x27c>
    13b8:	ae c0       	rjmp	.+348    	; 0x1516 <vfprintf+0x3bc>
    13ba:	80 37       	cpi	r24, 0x70	; 112
    13bc:	19 f0       	breq	.+6      	; 0x13c4 <vfprintf+0x26a>
    13be:	88 37       	cpi	r24, 0x78	; 120
    13c0:	21 f0       	breq	.+8      	; 0x13ca <vfprintf+0x270>
    13c2:	a9 c0       	rjmp	.+338    	; 0x1516 <vfprintf+0x3bc>
    13c4:	e9 2f       	mov	r30, r25
    13c6:	e0 61       	ori	r30, 0x10	; 16
    13c8:	be 2e       	mov	r11, r30
    13ca:	b4 fe       	sbrs	r11, 4
    13cc:	0d c0       	rjmp	.+26     	; 0x13e8 <vfprintf+0x28e>
    13ce:	fb 2d       	mov	r31, r11
    13d0:	f4 60       	ori	r31, 0x04	; 4
    13d2:	bf 2e       	mov	r11, r31
    13d4:	09 c0       	rjmp	.+18     	; 0x13e8 <vfprintf+0x28e>
    13d6:	34 fe       	sbrs	r3, 4
    13d8:	0a c0       	rjmp	.+20     	; 0x13ee <vfprintf+0x294>
    13da:	29 2f       	mov	r18, r25
    13dc:	26 60       	ori	r18, 0x06	; 6
    13de:	b2 2e       	mov	r11, r18
    13e0:	06 c0       	rjmp	.+12     	; 0x13ee <vfprintf+0x294>
    13e2:	28 e0       	ldi	r18, 0x08	; 8
    13e4:	30 e0       	ldi	r19, 0x00	; 0
    13e6:	05 c0       	rjmp	.+10     	; 0x13f2 <vfprintf+0x298>
    13e8:	20 e1       	ldi	r18, 0x10	; 16
    13ea:	30 e0       	ldi	r19, 0x00	; 0
    13ec:	02 c0       	rjmp	.+4      	; 0x13f2 <vfprintf+0x298>
    13ee:	20 e1       	ldi	r18, 0x10	; 16
    13f0:	32 e0       	ldi	r19, 0x02	; 2
    13f2:	f8 01       	movw	r30, r16
    13f4:	b7 fe       	sbrs	r11, 7
    13f6:	07 c0       	rjmp	.+14     	; 0x1406 <vfprintf+0x2ac>
    13f8:	60 81       	ld	r22, Z
    13fa:	71 81       	ldd	r23, Z+1	; 0x01
    13fc:	82 81       	ldd	r24, Z+2	; 0x02
    13fe:	93 81       	ldd	r25, Z+3	; 0x03
    1400:	0c 5f       	subi	r16, 0xFC	; 252
    1402:	1f 4f       	sbci	r17, 0xFF	; 255
    1404:	06 c0       	rjmp	.+12     	; 0x1412 <vfprintf+0x2b8>
    1406:	60 81       	ld	r22, Z
    1408:	71 81       	ldd	r23, Z+1	; 0x01
    140a:	80 e0       	ldi	r24, 0x00	; 0
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	0e 5f       	subi	r16, 0xFE	; 254
    1410:	1f 4f       	sbci	r17, 0xFF	; 255
    1412:	a3 01       	movw	r20, r6
    1414:	24 d4       	rcall	.+2120   	; 0x1c5e <__ultoa_invert>
    1416:	88 2e       	mov	r8, r24
    1418:	86 18       	sub	r8, r6
    141a:	fb 2d       	mov	r31, r11
    141c:	ff 77       	andi	r31, 0x7F	; 127
    141e:	3f 2e       	mov	r3, r31
    1420:	36 fe       	sbrs	r3, 6
    1422:	0d c0       	rjmp	.+26     	; 0x143e <vfprintf+0x2e4>
    1424:	23 2d       	mov	r18, r3
    1426:	2e 7f       	andi	r18, 0xFE	; 254
    1428:	a2 2e       	mov	r10, r18
    142a:	89 14       	cp	r8, r9
    142c:	58 f4       	brcc	.+22     	; 0x1444 <vfprintf+0x2ea>
    142e:	34 fe       	sbrs	r3, 4
    1430:	0b c0       	rjmp	.+22     	; 0x1448 <vfprintf+0x2ee>
    1432:	32 fc       	sbrc	r3, 2
    1434:	09 c0       	rjmp	.+18     	; 0x1448 <vfprintf+0x2ee>
    1436:	83 2d       	mov	r24, r3
    1438:	8e 7e       	andi	r24, 0xEE	; 238
    143a:	a8 2e       	mov	r10, r24
    143c:	05 c0       	rjmp	.+10     	; 0x1448 <vfprintf+0x2ee>
    143e:	b8 2c       	mov	r11, r8
    1440:	a3 2c       	mov	r10, r3
    1442:	03 c0       	rjmp	.+6      	; 0x144a <vfprintf+0x2f0>
    1444:	b8 2c       	mov	r11, r8
    1446:	01 c0       	rjmp	.+2      	; 0x144a <vfprintf+0x2f0>
    1448:	b9 2c       	mov	r11, r9
    144a:	a4 fe       	sbrs	r10, 4
    144c:	0f c0       	rjmp	.+30     	; 0x146c <vfprintf+0x312>
    144e:	fe 01       	movw	r30, r28
    1450:	e8 0d       	add	r30, r8
    1452:	f1 1d       	adc	r31, r1
    1454:	80 81       	ld	r24, Z
    1456:	80 33       	cpi	r24, 0x30	; 48
    1458:	21 f4       	brne	.+8      	; 0x1462 <vfprintf+0x308>
    145a:	9a 2d       	mov	r25, r10
    145c:	99 7e       	andi	r25, 0xE9	; 233
    145e:	a9 2e       	mov	r10, r25
    1460:	09 c0       	rjmp	.+18     	; 0x1474 <vfprintf+0x31a>
    1462:	a2 fe       	sbrs	r10, 2
    1464:	06 c0       	rjmp	.+12     	; 0x1472 <vfprintf+0x318>
    1466:	b3 94       	inc	r11
    1468:	b3 94       	inc	r11
    146a:	04 c0       	rjmp	.+8      	; 0x1474 <vfprintf+0x31a>
    146c:	8a 2d       	mov	r24, r10
    146e:	86 78       	andi	r24, 0x86	; 134
    1470:	09 f0       	breq	.+2      	; 0x1474 <vfprintf+0x31a>
    1472:	b3 94       	inc	r11
    1474:	a3 fc       	sbrc	r10, 3
    1476:	10 c0       	rjmp	.+32     	; 0x1498 <vfprintf+0x33e>
    1478:	a0 fe       	sbrs	r10, 0
    147a:	06 c0       	rjmp	.+12     	; 0x1488 <vfprintf+0x32e>
    147c:	b2 14       	cp	r11, r2
    147e:	80 f4       	brcc	.+32     	; 0x14a0 <vfprintf+0x346>
    1480:	28 0c       	add	r2, r8
    1482:	92 2c       	mov	r9, r2
    1484:	9b 18       	sub	r9, r11
    1486:	0d c0       	rjmp	.+26     	; 0x14a2 <vfprintf+0x348>
    1488:	b2 14       	cp	r11, r2
    148a:	58 f4       	brcc	.+22     	; 0x14a2 <vfprintf+0x348>
    148c:	b6 01       	movw	r22, r12
    148e:	80 e2       	ldi	r24, 0x20	; 32
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	90 d3       	rcall	.+1824   	; 0x1bb4 <fputc>
    1494:	b3 94       	inc	r11
    1496:	f8 cf       	rjmp	.-16     	; 0x1488 <vfprintf+0x32e>
    1498:	b2 14       	cp	r11, r2
    149a:	18 f4       	brcc	.+6      	; 0x14a2 <vfprintf+0x348>
    149c:	2b 18       	sub	r2, r11
    149e:	02 c0       	rjmp	.+4      	; 0x14a4 <vfprintf+0x34a>
    14a0:	98 2c       	mov	r9, r8
    14a2:	21 2c       	mov	r2, r1
    14a4:	a4 fe       	sbrs	r10, 4
    14a6:	0f c0       	rjmp	.+30     	; 0x14c6 <vfprintf+0x36c>
    14a8:	b6 01       	movw	r22, r12
    14aa:	80 e3       	ldi	r24, 0x30	; 48
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	82 d3       	rcall	.+1796   	; 0x1bb4 <fputc>
    14b0:	a2 fe       	sbrs	r10, 2
    14b2:	16 c0       	rjmp	.+44     	; 0x14e0 <vfprintf+0x386>
    14b4:	a1 fc       	sbrc	r10, 1
    14b6:	03 c0       	rjmp	.+6      	; 0x14be <vfprintf+0x364>
    14b8:	88 e7       	ldi	r24, 0x78	; 120
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	02 c0       	rjmp	.+4      	; 0x14c2 <vfprintf+0x368>
    14be:	88 e5       	ldi	r24, 0x58	; 88
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	b6 01       	movw	r22, r12
    14c4:	0c c0       	rjmp	.+24     	; 0x14de <vfprintf+0x384>
    14c6:	8a 2d       	mov	r24, r10
    14c8:	86 78       	andi	r24, 0x86	; 134
    14ca:	51 f0       	breq	.+20     	; 0x14e0 <vfprintf+0x386>
    14cc:	a1 fe       	sbrs	r10, 1
    14ce:	02 c0       	rjmp	.+4      	; 0x14d4 <vfprintf+0x37a>
    14d0:	8b e2       	ldi	r24, 0x2B	; 43
    14d2:	01 c0       	rjmp	.+2      	; 0x14d6 <vfprintf+0x37c>
    14d4:	80 e2       	ldi	r24, 0x20	; 32
    14d6:	a7 fc       	sbrc	r10, 7
    14d8:	8d e2       	ldi	r24, 0x2D	; 45
    14da:	b6 01       	movw	r22, r12
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	6a d3       	rcall	.+1748   	; 0x1bb4 <fputc>
    14e0:	89 14       	cp	r8, r9
    14e2:	30 f4       	brcc	.+12     	; 0x14f0 <vfprintf+0x396>
    14e4:	b6 01       	movw	r22, r12
    14e6:	80 e3       	ldi	r24, 0x30	; 48
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	64 d3       	rcall	.+1736   	; 0x1bb4 <fputc>
    14ec:	9a 94       	dec	r9
    14ee:	f8 cf       	rjmp	.-16     	; 0x14e0 <vfprintf+0x386>
    14f0:	8a 94       	dec	r8
    14f2:	f3 01       	movw	r30, r6
    14f4:	e8 0d       	add	r30, r8
    14f6:	f1 1d       	adc	r31, r1
    14f8:	80 81       	ld	r24, Z
    14fa:	b6 01       	movw	r22, r12
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	5a d3       	rcall	.+1716   	; 0x1bb4 <fputc>
    1500:	81 10       	cpse	r8, r1
    1502:	f6 cf       	rjmp	.-20     	; 0x14f0 <vfprintf+0x396>
    1504:	22 20       	and	r2, r2
    1506:	09 f4       	brne	.+2      	; 0x150a <vfprintf+0x3b0>
    1508:	4e ce       	rjmp	.-868    	; 0x11a6 <vfprintf+0x4c>
    150a:	b6 01       	movw	r22, r12
    150c:	80 e2       	ldi	r24, 0x20	; 32
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	51 d3       	rcall	.+1698   	; 0x1bb4 <fputc>
    1512:	2a 94       	dec	r2
    1514:	f7 cf       	rjmp	.-18     	; 0x1504 <vfprintf+0x3aa>
    1516:	f6 01       	movw	r30, r12
    1518:	86 81       	ldd	r24, Z+6	; 0x06
    151a:	97 81       	ldd	r25, Z+7	; 0x07
    151c:	02 c0       	rjmp	.+4      	; 0x1522 <vfprintf+0x3c8>
    151e:	8f ef       	ldi	r24, 0xFF	; 255
    1520:	9f ef       	ldi	r25, 0xFF	; 255
    1522:	2b 96       	adiw	r28, 0x0b	; 11
    1524:	0f b6       	in	r0, 0x3f	; 63
    1526:	f8 94       	cli
    1528:	de bf       	out	0x3e, r29	; 62
    152a:	0f be       	out	0x3f, r0	; 63
    152c:	cd bf       	out	0x3d, r28	; 61
    152e:	df 91       	pop	r29
    1530:	cf 91       	pop	r28
    1532:	1f 91       	pop	r17
    1534:	0f 91       	pop	r16
    1536:	ff 90       	pop	r15
    1538:	ef 90       	pop	r14
    153a:	df 90       	pop	r13
    153c:	cf 90       	pop	r12
    153e:	bf 90       	pop	r11
    1540:	af 90       	pop	r10
    1542:	9f 90       	pop	r9
    1544:	8f 90       	pop	r8
    1546:	7f 90       	pop	r7
    1548:	6f 90       	pop	r6
    154a:	5f 90       	pop	r5
    154c:	4f 90       	pop	r4
    154e:	3f 90       	pop	r3
    1550:	2f 90       	pop	r2
    1552:	08 95       	ret

00001554 <putval>:
    1554:	20 fd       	sbrc	r18, 0
    1556:	09 c0       	rjmp	.+18     	; 0x156a <putval+0x16>
    1558:	fc 01       	movw	r30, r24
    155a:	23 fd       	sbrc	r18, 3
    155c:	05 c0       	rjmp	.+10     	; 0x1568 <putval+0x14>
    155e:	22 ff       	sbrs	r18, 2
    1560:	02 c0       	rjmp	.+4      	; 0x1566 <putval+0x12>
    1562:	73 83       	std	Z+3, r23	; 0x03
    1564:	62 83       	std	Z+2, r22	; 0x02
    1566:	51 83       	std	Z+1, r21	; 0x01
    1568:	40 83       	st	Z, r20
    156a:	08 95       	ret

0000156c <mulacc>:
    156c:	44 fd       	sbrc	r20, 4
    156e:	17 c0       	rjmp	.+46     	; 0x159e <mulacc+0x32>
    1570:	46 fd       	sbrc	r20, 6
    1572:	17 c0       	rjmp	.+46     	; 0x15a2 <mulacc+0x36>
    1574:	ab 01       	movw	r20, r22
    1576:	bc 01       	movw	r22, r24
    1578:	da 01       	movw	r26, r20
    157a:	fb 01       	movw	r30, r22
    157c:	aa 0f       	add	r26, r26
    157e:	bb 1f       	adc	r27, r27
    1580:	ee 1f       	adc	r30, r30
    1582:	ff 1f       	adc	r31, r31
    1584:	10 94       	com	r1
    1586:	d1 f7       	brne	.-12     	; 0x157c <mulacc+0x10>
    1588:	4a 0f       	add	r20, r26
    158a:	5b 1f       	adc	r21, r27
    158c:	6e 1f       	adc	r22, r30
    158e:	7f 1f       	adc	r23, r31
    1590:	cb 01       	movw	r24, r22
    1592:	ba 01       	movw	r22, r20
    1594:	66 0f       	add	r22, r22
    1596:	77 1f       	adc	r23, r23
    1598:	88 1f       	adc	r24, r24
    159a:	99 1f       	adc	r25, r25
    159c:	09 c0       	rjmp	.+18     	; 0x15b0 <mulacc+0x44>
    159e:	33 e0       	ldi	r19, 0x03	; 3
    15a0:	01 c0       	rjmp	.+2      	; 0x15a4 <mulacc+0x38>
    15a2:	34 e0       	ldi	r19, 0x04	; 4
    15a4:	66 0f       	add	r22, r22
    15a6:	77 1f       	adc	r23, r23
    15a8:	88 1f       	adc	r24, r24
    15aa:	99 1f       	adc	r25, r25
    15ac:	31 50       	subi	r19, 0x01	; 1
    15ae:	d1 f7       	brne	.-12     	; 0x15a4 <mulacc+0x38>
    15b0:	62 0f       	add	r22, r18
    15b2:	71 1d       	adc	r23, r1
    15b4:	81 1d       	adc	r24, r1
    15b6:	91 1d       	adc	r25, r1
    15b8:	08 95       	ret

000015ba <skip_spaces>:
    15ba:	0f 93       	push	r16
    15bc:	1f 93       	push	r17
    15be:	cf 93       	push	r28
    15c0:	df 93       	push	r29
    15c2:	8c 01       	movw	r16, r24
    15c4:	c8 01       	movw	r24, r16
    15c6:	b8 d2       	rcall	.+1392   	; 0x1b38 <fgetc>
    15c8:	ec 01       	movw	r28, r24
    15ca:	97 fd       	sbrc	r25, 7
    15cc:	06 c0       	rjmp	.+12     	; 0x15da <skip_spaces+0x20>
    15ce:	8b d2       	rcall	.+1302   	; 0x1ae6 <isspace>
    15d0:	89 2b       	or	r24, r25
    15d2:	c1 f7       	brne	.-16     	; 0x15c4 <skip_spaces+0xa>
    15d4:	b8 01       	movw	r22, r16
    15d6:	ce 01       	movw	r24, r28
    15d8:	29 d3       	rcall	.+1618   	; 0x1c2c <ungetc>
    15da:	ce 01       	movw	r24, r28
    15dc:	df 91       	pop	r29
    15de:	cf 91       	pop	r28
    15e0:	1f 91       	pop	r17
    15e2:	0f 91       	pop	r16
    15e4:	08 95       	ret

000015e6 <conv_int>:
    15e6:	8f 92       	push	r8
    15e8:	9f 92       	push	r9
    15ea:	af 92       	push	r10
    15ec:	bf 92       	push	r11
    15ee:	ef 92       	push	r14
    15f0:	ff 92       	push	r15
    15f2:	0f 93       	push	r16
    15f4:	1f 93       	push	r17
    15f6:	cf 93       	push	r28
    15f8:	df 93       	push	r29
    15fa:	8c 01       	movw	r16, r24
    15fc:	d6 2f       	mov	r29, r22
    15fe:	7a 01       	movw	r14, r20
    1600:	b2 2e       	mov	r11, r18
    1602:	9a d2       	rcall	.+1332   	; 0x1b38 <fgetc>
    1604:	9c 01       	movw	r18, r24
    1606:	33 27       	eor	r19, r19
    1608:	2b 32       	cpi	r18, 0x2B	; 43
    160a:	31 05       	cpc	r19, r1
    160c:	31 f0       	breq	.+12     	; 0x161a <conv_int+0x34>
    160e:	2d 32       	cpi	r18, 0x2D	; 45
    1610:	31 05       	cpc	r19, r1
    1612:	59 f4       	brne	.+22     	; 0x162a <conv_int+0x44>
    1614:	8b 2d       	mov	r24, r11
    1616:	80 68       	ori	r24, 0x80	; 128
    1618:	b8 2e       	mov	r11, r24
    161a:	d1 50       	subi	r29, 0x01	; 1
    161c:	11 f4       	brne	.+4      	; 0x1622 <conv_int+0x3c>
    161e:	80 e0       	ldi	r24, 0x00	; 0
    1620:	61 c0       	rjmp	.+194    	; 0x16e4 <conv_int+0xfe>
    1622:	c8 01       	movw	r24, r16
    1624:	89 d2       	rcall	.+1298   	; 0x1b38 <fgetc>
    1626:	97 fd       	sbrc	r25, 7
    1628:	fa cf       	rjmp	.-12     	; 0x161e <conv_int+0x38>
    162a:	cb 2d       	mov	r28, r11
    162c:	cd 7f       	andi	r28, 0xFD	; 253
    162e:	2b 2d       	mov	r18, r11
    1630:	20 73       	andi	r18, 0x30	; 48
    1632:	f9 f4       	brne	.+62     	; 0x1672 <conv_int+0x8c>
    1634:	80 33       	cpi	r24, 0x30	; 48
    1636:	e9 f4       	brne	.+58     	; 0x1672 <conv_int+0x8c>
    1638:	aa 24       	eor	r10, r10
    163a:	aa 94       	dec	r10
    163c:	ad 0e       	add	r10, r29
    163e:	09 f4       	brne	.+2      	; 0x1642 <conv_int+0x5c>
    1640:	3e c0       	rjmp	.+124    	; 0x16be <conv_int+0xd8>
    1642:	c8 01       	movw	r24, r16
    1644:	79 d2       	rcall	.+1266   	; 0x1b38 <fgetc>
    1646:	97 fd       	sbrc	r25, 7
    1648:	3a c0       	rjmp	.+116    	; 0x16be <conv_int+0xd8>
    164a:	9c 01       	movw	r18, r24
    164c:	2f 7d       	andi	r18, 0xDF	; 223
    164e:	33 27       	eor	r19, r19
    1650:	28 35       	cpi	r18, 0x58	; 88
    1652:	31 05       	cpc	r19, r1
    1654:	41 f4       	brne	.+16     	; 0x1666 <conv_int+0x80>
    1656:	c2 64       	ori	r28, 0x42	; 66
    1658:	d2 50       	subi	r29, 0x02	; 2
    165a:	89 f1       	breq	.+98     	; 0x16be <conv_int+0xd8>
    165c:	c8 01       	movw	r24, r16
    165e:	6c d2       	rcall	.+1240   	; 0x1b38 <fgetc>
    1660:	97 ff       	sbrs	r25, 7
    1662:	07 c0       	rjmp	.+14     	; 0x1672 <conv_int+0x8c>
    1664:	2c c0       	rjmp	.+88     	; 0x16be <conv_int+0xd8>
    1666:	b6 fe       	sbrs	r11, 6
    1668:	02 c0       	rjmp	.+4      	; 0x166e <conv_int+0x88>
    166a:	c2 60       	ori	r28, 0x02	; 2
    166c:	01 c0       	rjmp	.+2      	; 0x1670 <conv_int+0x8a>
    166e:	c2 61       	ori	r28, 0x12	; 18
    1670:	da 2d       	mov	r29, r10
    1672:	81 2c       	mov	r8, r1
    1674:	91 2c       	mov	r9, r1
    1676:	54 01       	movw	r10, r8
    1678:	20 ed       	ldi	r18, 0xD0	; 208
    167a:	28 0f       	add	r18, r24
    167c:	28 30       	cpi	r18, 0x08	; 8
    167e:	78 f0       	brcs	.+30     	; 0x169e <conv_int+0xb8>
    1680:	c4 ff       	sbrs	r28, 4
    1682:	03 c0       	rjmp	.+6      	; 0x168a <conv_int+0xa4>
    1684:	b8 01       	movw	r22, r16
    1686:	d2 d2       	rcall	.+1444   	; 0x1c2c <ungetc>
    1688:	17 c0       	rjmp	.+46     	; 0x16b8 <conv_int+0xd2>
    168a:	2a 30       	cpi	r18, 0x0A	; 10
    168c:	40 f0       	brcs	.+16     	; 0x169e <conv_int+0xb8>
    168e:	c6 ff       	sbrs	r28, 6
    1690:	f9 cf       	rjmp	.-14     	; 0x1684 <conv_int+0x9e>
    1692:	2f 7d       	andi	r18, 0xDF	; 223
    1694:	3f ee       	ldi	r19, 0xEF	; 239
    1696:	32 0f       	add	r19, r18
    1698:	36 30       	cpi	r19, 0x06	; 6
    169a:	a0 f7       	brcc	.-24     	; 0x1684 <conv_int+0x9e>
    169c:	27 50       	subi	r18, 0x07	; 7
    169e:	4c 2f       	mov	r20, r28
    16a0:	c5 01       	movw	r24, r10
    16a2:	b4 01       	movw	r22, r8
    16a4:	63 df       	rcall	.-314    	; 0x156c <mulacc>
    16a6:	4b 01       	movw	r8, r22
    16a8:	5c 01       	movw	r10, r24
    16aa:	c2 60       	ori	r28, 0x02	; 2
    16ac:	d1 50       	subi	r29, 0x01	; 1
    16ae:	51 f0       	breq	.+20     	; 0x16c4 <conv_int+0xde>
    16b0:	c8 01       	movw	r24, r16
    16b2:	42 d2       	rcall	.+1156   	; 0x1b38 <fgetc>
    16b4:	97 ff       	sbrs	r25, 7
    16b6:	e0 cf       	rjmp	.-64     	; 0x1678 <conv_int+0x92>
    16b8:	c1 fd       	sbrc	r28, 1
    16ba:	04 c0       	rjmp	.+8      	; 0x16c4 <conv_int+0xde>
    16bc:	b0 cf       	rjmp	.-160    	; 0x161e <conv_int+0x38>
    16be:	81 2c       	mov	r8, r1
    16c0:	91 2c       	mov	r9, r1
    16c2:	54 01       	movw	r10, r8
    16c4:	c7 ff       	sbrs	r28, 7
    16c6:	08 c0       	rjmp	.+16     	; 0x16d8 <conv_int+0xf2>
    16c8:	b0 94       	com	r11
    16ca:	a0 94       	com	r10
    16cc:	90 94       	com	r9
    16ce:	80 94       	com	r8
    16d0:	81 1c       	adc	r8, r1
    16d2:	91 1c       	adc	r9, r1
    16d4:	a1 1c       	adc	r10, r1
    16d6:	b1 1c       	adc	r11, r1
    16d8:	2c 2f       	mov	r18, r28
    16da:	b5 01       	movw	r22, r10
    16dc:	a4 01       	movw	r20, r8
    16de:	c7 01       	movw	r24, r14
    16e0:	39 df       	rcall	.-398    	; 0x1554 <putval>
    16e2:	81 e0       	ldi	r24, 0x01	; 1
    16e4:	df 91       	pop	r29
    16e6:	cf 91       	pop	r28
    16e8:	1f 91       	pop	r17
    16ea:	0f 91       	pop	r16
    16ec:	ff 90       	pop	r15
    16ee:	ef 90       	pop	r14
    16f0:	bf 90       	pop	r11
    16f2:	af 90       	pop	r10
    16f4:	9f 90       	pop	r9
    16f6:	8f 90       	pop	r8
    16f8:	08 95       	ret

000016fa <conv_brk>:
    16fa:	5f 92       	push	r5
    16fc:	6f 92       	push	r6
    16fe:	7f 92       	push	r7
    1700:	8f 92       	push	r8
    1702:	9f 92       	push	r9
    1704:	af 92       	push	r10
    1706:	bf 92       	push	r11
    1708:	cf 92       	push	r12
    170a:	df 92       	push	r13
    170c:	ef 92       	push	r14
    170e:	ff 92       	push	r15
    1710:	0f 93       	push	r16
    1712:	1f 93       	push	r17
    1714:	cf 93       	push	r28
    1716:	df 93       	push	r29
    1718:	cd b7       	in	r28, 0x3d	; 61
    171a:	de b7       	in	r29, 0x3e	; 62
    171c:	a0 97       	sbiw	r28, 0x20	; 32
    171e:	0f b6       	in	r0, 0x3f	; 63
    1720:	f8 94       	cli
    1722:	de bf       	out	0x3e, r29	; 62
    1724:	0f be       	out	0x3f, r0	; 63
    1726:	cd bf       	out	0x3d, r28	; 61
    1728:	5c 01       	movw	r10, r24
    172a:	96 2e       	mov	r9, r22
    172c:	7a 01       	movw	r14, r20
    172e:	f9 01       	movw	r30, r18
    1730:	8e 01       	movw	r16, r28
    1732:	0f 5f       	subi	r16, 0xFF	; 255
    1734:	1f 4f       	sbci	r17, 0xFF	; 255
    1736:	68 01       	movw	r12, r16
    1738:	80 e2       	ldi	r24, 0x20	; 32
    173a:	d8 01       	movw	r26, r16
    173c:	1d 92       	st	X+, r1
    173e:	8a 95       	dec	r24
    1740:	e9 f7       	brne	.-6      	; 0x173c <conv_brk+0x42>
    1742:	d5 01       	movw	r26, r10
    1744:	13 96       	adiw	r26, 0x03	; 3
    1746:	8c 90       	ld	r8, X
    1748:	80 e0       	ldi	r24, 0x00	; 0
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	61 2c       	mov	r6, r1
    174e:	71 2c       	mov	r7, r1
    1750:	30 e0       	ldi	r19, 0x00	; 0
    1752:	61 e0       	ldi	r22, 0x01	; 1
    1754:	70 e0       	ldi	r23, 0x00	; 0
    1756:	83 fc       	sbrc	r8, 3
    1758:	25 91       	lpm	r18, Z+
    175a:	83 fe       	sbrs	r8, 3
    175c:	21 91       	ld	r18, Z+
    175e:	8f 01       	movw	r16, r30
    1760:	52 2e       	mov	r5, r18
    1762:	21 11       	cpse	r18, r1
    1764:	03 c0       	rjmp	.+6      	; 0x176c <conv_brk+0x72>
    1766:	80 e0       	ldi	r24, 0x00	; 0
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	90 c0       	rjmp	.+288    	; 0x188c <conv_brk+0x192>
    176c:	2e 35       	cpi	r18, 0x5E	; 94
    176e:	11 f4       	brne	.+4      	; 0x1774 <conv_brk+0x7a>
    1770:	00 97       	sbiw	r24, 0x00	; 0
    1772:	51 f1       	breq	.+84     	; 0x17c8 <conv_brk+0xce>
    1774:	43 2f       	mov	r20, r19
    1776:	50 e0       	ldi	r21, 0x00	; 0
    1778:	48 17       	cp	r20, r24
    177a:	59 07       	cpc	r21, r25
    177c:	3c f4       	brge	.+14     	; 0x178c <conv_brk+0x92>
    177e:	2d 35       	cpi	r18, 0x5D	; 93
    1780:	59 f1       	breq	.+86     	; 0x17d8 <conv_brk+0xde>
    1782:	2d 32       	cpi	r18, 0x2D	; 45
    1784:	19 f4       	brne	.+6      	; 0x178c <conv_brk+0x92>
    1786:	77 20       	and	r7, r7
    1788:	09 f1       	breq	.+66     	; 0x17cc <conv_brk+0xd2>
    178a:	03 c0       	rjmp	.+6      	; 0x1792 <conv_brk+0x98>
    178c:	77 20       	and	r7, r7
    178e:	09 f4       	brne	.+2      	; 0x1792 <conv_brk+0x98>
    1790:	68 c0       	rjmp	.+208    	; 0x1862 <conv_brk+0x168>
    1792:	45 2d       	mov	r20, r5
    1794:	46 95       	lsr	r20
    1796:	46 95       	lsr	r20
    1798:	46 95       	lsr	r20
    179a:	d6 01       	movw	r26, r12
    179c:	a4 0f       	add	r26, r20
    179e:	b1 1d       	adc	r27, r1
    17a0:	45 2d       	mov	r20, r5
    17a2:	47 70       	andi	r20, 0x07	; 7
    17a4:	8b 01       	movw	r16, r22
    17a6:	02 c0       	rjmp	.+4      	; 0x17ac <conv_brk+0xb2>
    17a8:	00 0f       	add	r16, r16
    17aa:	11 1f       	adc	r17, r17
    17ac:	4a 95       	dec	r20
    17ae:	e2 f7       	brpl	.-8      	; 0x17a8 <conv_brk+0xae>
    17b0:	a8 01       	movw	r20, r16
    17b2:	5c 91       	ld	r21, X
    17b4:	45 2b       	or	r20, r21
    17b6:	4c 93       	st	X, r20
    17b8:	65 14       	cp	r6, r5
    17ba:	59 f0       	breq	.+22     	; 0x17d2 <conv_brk+0xd8>
    17bc:	56 14       	cp	r5, r6
    17be:	10 f4       	brcc	.+4      	; 0x17c4 <conv_brk+0xca>
    17c0:	53 94       	inc	r5
    17c2:	e7 cf       	rjmp	.-50     	; 0x1792 <conv_brk+0x98>
    17c4:	5a 94       	dec	r5
    17c6:	e5 cf       	rjmp	.-54     	; 0x1792 <conv_brk+0x98>
    17c8:	31 e0       	ldi	r19, 0x01	; 1
    17ca:	04 c0       	rjmp	.+8      	; 0x17d4 <conv_brk+0xda>
    17cc:	77 24       	eor	r7, r7
    17ce:	73 94       	inc	r7
    17d0:	01 c0       	rjmp	.+2      	; 0x17d4 <conv_brk+0xda>
    17d2:	71 2c       	mov	r7, r1
    17d4:	01 96       	adiw	r24, 0x01	; 1
    17d6:	bf cf       	rjmp	.-130    	; 0x1756 <conv_brk+0x5c>
    17d8:	77 20       	and	r7, r7
    17da:	19 f0       	breq	.+6      	; 0x17e2 <conv_brk+0xe8>
    17dc:	8e 81       	ldd	r24, Y+6	; 0x06
    17de:	80 62       	ori	r24, 0x20	; 32
    17e0:	8e 83       	std	Y+6, r24	; 0x06
    17e2:	31 11       	cpse	r19, r1
    17e4:	03 c0       	rjmp	.+6      	; 0x17ec <conv_brk+0xf2>
    17e6:	88 24       	eor	r8, r8
    17e8:	83 94       	inc	r8
    17ea:	17 c0       	rjmp	.+46     	; 0x181a <conv_brk+0x120>
    17ec:	f6 01       	movw	r30, r12
    17ee:	9e 01       	movw	r18, r28
    17f0:	2f 5d       	subi	r18, 0xDF	; 223
    17f2:	3f 4f       	sbci	r19, 0xFF	; 255
    17f4:	80 81       	ld	r24, Z
    17f6:	80 95       	com	r24
    17f8:	81 93       	st	Z+, r24
    17fa:	2e 17       	cp	r18, r30
    17fc:	3f 07       	cpc	r19, r31
    17fe:	d1 f7       	brne	.-12     	; 0x17f4 <conv_brk+0xfa>
    1800:	f2 cf       	rjmp	.-28     	; 0x17e6 <conv_brk+0xec>
    1802:	e1 14       	cp	r14, r1
    1804:	f1 04       	cpc	r15, r1
    1806:	29 f0       	breq	.+10     	; 0x1812 <conv_brk+0x118>
    1808:	d7 01       	movw	r26, r14
    180a:	8c 93       	st	X, r24
    180c:	f7 01       	movw	r30, r14
    180e:	31 96       	adiw	r30, 0x01	; 1
    1810:	7f 01       	movw	r14, r30
    1812:	9a 94       	dec	r9
    1814:	81 2c       	mov	r8, r1
    1816:	99 20       	and	r9, r9
    1818:	e9 f0       	breq	.+58     	; 0x1854 <conv_brk+0x15a>
    181a:	c5 01       	movw	r24, r10
    181c:	8d d1       	rcall	.+794    	; 0x1b38 <fgetc>
    181e:	97 fd       	sbrc	r25, 7
    1820:	17 c0       	rjmp	.+46     	; 0x1850 <conv_brk+0x156>
    1822:	fc 01       	movw	r30, r24
    1824:	ff 27       	eor	r31, r31
    1826:	23 e0       	ldi	r18, 0x03	; 3
    1828:	f5 95       	asr	r31
    182a:	e7 95       	ror	r30
    182c:	2a 95       	dec	r18
    182e:	e1 f7       	brne	.-8      	; 0x1828 <conv_brk+0x12e>
    1830:	ec 0d       	add	r30, r12
    1832:	fd 1d       	adc	r31, r13
    1834:	20 81       	ld	r18, Z
    1836:	30 e0       	ldi	r19, 0x00	; 0
    1838:	ac 01       	movw	r20, r24
    183a:	47 70       	andi	r20, 0x07	; 7
    183c:	55 27       	eor	r21, r21
    183e:	02 c0       	rjmp	.+4      	; 0x1844 <conv_brk+0x14a>
    1840:	35 95       	asr	r19
    1842:	27 95       	ror	r18
    1844:	4a 95       	dec	r20
    1846:	e2 f7       	brpl	.-8      	; 0x1840 <conv_brk+0x146>
    1848:	20 fd       	sbrc	r18, 0
    184a:	db cf       	rjmp	.-74     	; 0x1802 <conv_brk+0x108>
    184c:	b5 01       	movw	r22, r10
    184e:	ee d1       	rcall	.+988    	; 0x1c2c <ungetc>
    1850:	81 10       	cpse	r8, r1
    1852:	89 cf       	rjmp	.-238    	; 0x1766 <conv_brk+0x6c>
    1854:	e1 14       	cp	r14, r1
    1856:	f1 04       	cpc	r15, r1
    1858:	11 f0       	breq	.+4      	; 0x185e <conv_brk+0x164>
    185a:	d7 01       	movw	r26, r14
    185c:	1c 92       	st	X, r1
    185e:	c8 01       	movw	r24, r16
    1860:	15 c0       	rjmp	.+42     	; 0x188c <conv_brk+0x192>
    1862:	42 2f       	mov	r20, r18
    1864:	46 95       	lsr	r20
    1866:	46 95       	lsr	r20
    1868:	46 95       	lsr	r20
    186a:	d6 01       	movw	r26, r12
    186c:	a4 0f       	add	r26, r20
    186e:	b1 1d       	adc	r27, r1
    1870:	42 2f       	mov	r20, r18
    1872:	47 70       	andi	r20, 0x07	; 7
    1874:	8b 01       	movw	r16, r22
    1876:	02 c0       	rjmp	.+4      	; 0x187c <conv_brk+0x182>
    1878:	00 0f       	add	r16, r16
    187a:	11 1f       	adc	r17, r17
    187c:	4a 95       	dec	r20
    187e:	e2 f7       	brpl	.-8      	; 0x1878 <conv_brk+0x17e>
    1880:	a8 01       	movw	r20, r16
    1882:	5c 91       	ld	r21, X
    1884:	45 2b       	or	r20, r21
    1886:	4c 93       	st	X, r20
    1888:	62 2e       	mov	r6, r18
    188a:	a4 cf       	rjmp	.-184    	; 0x17d4 <conv_brk+0xda>
    188c:	a0 96       	adiw	r28, 0x20	; 32
    188e:	0f b6       	in	r0, 0x3f	; 63
    1890:	f8 94       	cli
    1892:	de bf       	out	0x3e, r29	; 62
    1894:	0f be       	out	0x3f, r0	; 63
    1896:	cd bf       	out	0x3d, r28	; 61
    1898:	df 91       	pop	r29
    189a:	cf 91       	pop	r28
    189c:	1f 91       	pop	r17
    189e:	0f 91       	pop	r16
    18a0:	ff 90       	pop	r15
    18a2:	ef 90       	pop	r14
    18a4:	df 90       	pop	r13
    18a6:	cf 90       	pop	r12
    18a8:	bf 90       	pop	r11
    18aa:	af 90       	pop	r10
    18ac:	9f 90       	pop	r9
    18ae:	8f 90       	pop	r8
    18b0:	7f 90       	pop	r7
    18b2:	6f 90       	pop	r6
    18b4:	5f 90       	pop	r5
    18b6:	08 95       	ret

000018b8 <vfscanf>:
    18b8:	5f 92       	push	r5
    18ba:	6f 92       	push	r6
    18bc:	7f 92       	push	r7
    18be:	8f 92       	push	r8
    18c0:	9f 92       	push	r9
    18c2:	af 92       	push	r10
    18c4:	bf 92       	push	r11
    18c6:	cf 92       	push	r12
    18c8:	df 92       	push	r13
    18ca:	ef 92       	push	r14
    18cc:	ff 92       	push	r15
    18ce:	0f 93       	push	r16
    18d0:	1f 93       	push	r17
    18d2:	cf 93       	push	r28
    18d4:	df 93       	push	r29
    18d6:	6c 01       	movw	r12, r24
    18d8:	eb 01       	movw	r28, r22
    18da:	5a 01       	movw	r10, r20
    18dc:	fc 01       	movw	r30, r24
    18de:	17 82       	std	Z+7, r1	; 0x07
    18e0:	16 82       	std	Z+6, r1	; 0x06
    18e2:	51 2c       	mov	r5, r1
    18e4:	f6 01       	movw	r30, r12
    18e6:	e3 80       	ldd	r14, Z+3	; 0x03
    18e8:	fe 01       	movw	r30, r28
    18ea:	e3 fc       	sbrc	r14, 3
    18ec:	85 91       	lpm	r24, Z+
    18ee:	e3 fe       	sbrs	r14, 3
    18f0:	81 91       	ld	r24, Z+
    18f2:	18 2f       	mov	r17, r24
    18f4:	ef 01       	movw	r28, r30
    18f6:	88 23       	and	r24, r24
    18f8:	09 f4       	brne	.+2      	; 0x18fc <vfscanf+0x44>
    18fa:	e0 c0       	rjmp	.+448    	; 0x1abc <vfscanf+0x204>
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	f3 d0       	rcall	.+486    	; 0x1ae6 <isspace>
    1900:	89 2b       	or	r24, r25
    1902:	19 f0       	breq	.+6      	; 0x190a <vfscanf+0x52>
    1904:	c6 01       	movw	r24, r12
    1906:	59 de       	rcall	.-846    	; 0x15ba <skip_spaces>
    1908:	ed cf       	rjmp	.-38     	; 0x18e4 <vfscanf+0x2c>
    190a:	15 32       	cpi	r17, 0x25	; 37
    190c:	41 f4       	brne	.+16     	; 0x191e <vfscanf+0x66>
    190e:	fe 01       	movw	r30, r28
    1910:	e3 fc       	sbrc	r14, 3
    1912:	15 91       	lpm	r17, Z+
    1914:	e3 fe       	sbrs	r14, 3
    1916:	11 91       	ld	r17, Z+
    1918:	ef 01       	movw	r28, r30
    191a:	15 32       	cpi	r17, 0x25	; 37
    191c:	71 f4       	brne	.+28     	; 0x193a <vfscanf+0x82>
    191e:	c6 01       	movw	r24, r12
    1920:	0b d1       	rcall	.+534    	; 0x1b38 <fgetc>
    1922:	97 fd       	sbrc	r25, 7
    1924:	c9 c0       	rjmp	.+402    	; 0x1ab8 <vfscanf+0x200>
    1926:	41 2f       	mov	r20, r17
    1928:	50 e0       	ldi	r21, 0x00	; 0
    192a:	9c 01       	movw	r18, r24
    192c:	33 27       	eor	r19, r19
    192e:	24 17       	cp	r18, r20
    1930:	35 07       	cpc	r19, r21
    1932:	c1 f2       	breq	.-80     	; 0x18e4 <vfscanf+0x2c>
    1934:	b6 01       	movw	r22, r12
    1936:	7a d1       	rcall	.+756    	; 0x1c2c <ungetc>
    1938:	c1 c0       	rjmp	.+386    	; 0x1abc <vfscanf+0x204>
    193a:	1a 32       	cpi	r17, 0x2A	; 42
    193c:	39 f4       	brne	.+14     	; 0x194c <vfscanf+0x94>
    193e:	e3 fc       	sbrc	r14, 3
    1940:	15 91       	lpm	r17, Z+
    1942:	e3 fe       	sbrs	r14, 3
    1944:	11 91       	ld	r17, Z+
    1946:	ef 01       	movw	r28, r30
    1948:	01 e0       	ldi	r16, 0x01	; 1
    194a:	01 c0       	rjmp	.+2      	; 0x194e <vfscanf+0x96>
    194c:	00 e0       	ldi	r16, 0x00	; 0
    194e:	f1 2c       	mov	r15, r1
    1950:	20 ed       	ldi	r18, 0xD0	; 208
    1952:	21 0f       	add	r18, r17
    1954:	2a 30       	cpi	r18, 0x0A	; 10
    1956:	78 f4       	brcc	.+30     	; 0x1976 <vfscanf+0xbe>
    1958:	02 60       	ori	r16, 0x02	; 2
    195a:	6f 2d       	mov	r22, r15
    195c:	70 e0       	ldi	r23, 0x00	; 0
    195e:	80 e0       	ldi	r24, 0x00	; 0
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	40 e2       	ldi	r20, 0x20	; 32
    1964:	03 de       	rcall	.-1018   	; 0x156c <mulacc>
    1966:	f6 2e       	mov	r15, r22
    1968:	fe 01       	movw	r30, r28
    196a:	e3 fc       	sbrc	r14, 3
    196c:	15 91       	lpm	r17, Z+
    196e:	e3 fe       	sbrs	r14, 3
    1970:	11 91       	ld	r17, Z+
    1972:	ef 01       	movw	r28, r30
    1974:	ed cf       	rjmp	.-38     	; 0x1950 <vfscanf+0x98>
    1976:	01 ff       	sbrs	r16, 1
    1978:	03 c0       	rjmp	.+6      	; 0x1980 <vfscanf+0xc8>
    197a:	f1 10       	cpse	r15, r1
    197c:	03 c0       	rjmp	.+6      	; 0x1984 <vfscanf+0xcc>
    197e:	9e c0       	rjmp	.+316    	; 0x1abc <vfscanf+0x204>
    1980:	ff 24       	eor	r15, r15
    1982:	fa 94       	dec	r15
    1984:	18 36       	cpi	r17, 0x68	; 104
    1986:	19 f0       	breq	.+6      	; 0x198e <vfscanf+0xd6>
    1988:	1c 36       	cpi	r17, 0x6C	; 108
    198a:	51 f0       	breq	.+20     	; 0x19a0 <vfscanf+0xe8>
    198c:	10 c0       	rjmp	.+32     	; 0x19ae <vfscanf+0xf6>
    198e:	fe 01       	movw	r30, r28
    1990:	e3 fc       	sbrc	r14, 3
    1992:	15 91       	lpm	r17, Z+
    1994:	e3 fe       	sbrs	r14, 3
    1996:	11 91       	ld	r17, Z+
    1998:	ef 01       	movw	r28, r30
    199a:	18 36       	cpi	r17, 0x68	; 104
    199c:	41 f4       	brne	.+16     	; 0x19ae <vfscanf+0xf6>
    199e:	08 60       	ori	r16, 0x08	; 8
    19a0:	04 60       	ori	r16, 0x04	; 4
    19a2:	fe 01       	movw	r30, r28
    19a4:	e3 fc       	sbrc	r14, 3
    19a6:	15 91       	lpm	r17, Z+
    19a8:	e3 fe       	sbrs	r14, 3
    19aa:	11 91       	ld	r17, Z+
    19ac:	ef 01       	movw	r28, r30
    19ae:	11 23       	and	r17, r17
    19b0:	09 f4       	brne	.+2      	; 0x19b4 <vfscanf+0xfc>
    19b2:	84 c0       	rjmp	.+264    	; 0x1abc <vfscanf+0x204>
    19b4:	61 2f       	mov	r22, r17
    19b6:	70 e0       	ldi	r23, 0x00	; 0
    19b8:	84 ee       	ldi	r24, 0xE4	; 228
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	9c d0       	rcall	.+312    	; 0x1af6 <strchr_P>
    19be:	89 2b       	or	r24, r25
    19c0:	09 f4       	brne	.+2      	; 0x19c4 <vfscanf+0x10c>
    19c2:	7c c0       	rjmp	.+248    	; 0x1abc <vfscanf+0x204>
    19c4:	00 fd       	sbrc	r16, 0
    19c6:	07 c0       	rjmp	.+14     	; 0x19d6 <vfscanf+0x11e>
    19c8:	f5 01       	movw	r30, r10
    19ca:	80 80       	ld	r8, Z
    19cc:	91 80       	ldd	r9, Z+1	; 0x01
    19ce:	c5 01       	movw	r24, r10
    19d0:	02 96       	adiw	r24, 0x02	; 2
    19d2:	5c 01       	movw	r10, r24
    19d4:	02 c0       	rjmp	.+4      	; 0x19da <vfscanf+0x122>
    19d6:	81 2c       	mov	r8, r1
    19d8:	91 2c       	mov	r9, r1
    19da:	1e 36       	cpi	r17, 0x6E	; 110
    19dc:	49 f4       	brne	.+18     	; 0x19f0 <vfscanf+0x138>
    19de:	f6 01       	movw	r30, r12
    19e0:	46 81       	ldd	r20, Z+6	; 0x06
    19e2:	57 81       	ldd	r21, Z+7	; 0x07
    19e4:	60 e0       	ldi	r22, 0x00	; 0
    19e6:	70 e0       	ldi	r23, 0x00	; 0
    19e8:	20 2f       	mov	r18, r16
    19ea:	c4 01       	movw	r24, r8
    19ec:	b3 dd       	rcall	.-1178   	; 0x1554 <putval>
    19ee:	7a cf       	rjmp	.-268    	; 0x18e4 <vfscanf+0x2c>
    19f0:	13 36       	cpi	r17, 0x63	; 99
    19f2:	a1 f4       	brne	.+40     	; 0x1a1c <vfscanf+0x164>
    19f4:	01 fd       	sbrc	r16, 1
    19f6:	02 c0       	rjmp	.+4      	; 0x19fc <vfscanf+0x144>
    19f8:	ff 24       	eor	r15, r15
    19fa:	f3 94       	inc	r15
    19fc:	c6 01       	movw	r24, r12
    19fe:	9c d0       	rcall	.+312    	; 0x1b38 <fgetc>
    1a00:	97 fd       	sbrc	r25, 7
    1a02:	5a c0       	rjmp	.+180    	; 0x1ab8 <vfscanf+0x200>
    1a04:	81 14       	cp	r8, r1
    1a06:	91 04       	cpc	r9, r1
    1a08:	29 f0       	breq	.+10     	; 0x1a14 <vfscanf+0x15c>
    1a0a:	f4 01       	movw	r30, r8
    1a0c:	80 83       	st	Z, r24
    1a0e:	c4 01       	movw	r24, r8
    1a10:	01 96       	adiw	r24, 0x01	; 1
    1a12:	4c 01       	movw	r8, r24
    1a14:	fa 94       	dec	r15
    1a16:	f1 10       	cpse	r15, r1
    1a18:	f1 cf       	rjmp	.-30     	; 0x19fc <vfscanf+0x144>
    1a1a:	4a c0       	rjmp	.+148    	; 0x1ab0 <vfscanf+0x1f8>
    1a1c:	1b 35       	cpi	r17, 0x5B	; 91
    1a1e:	51 f4       	brne	.+20     	; 0x1a34 <vfscanf+0x17c>
    1a20:	9e 01       	movw	r18, r28
    1a22:	a4 01       	movw	r20, r8
    1a24:	6f 2d       	mov	r22, r15
    1a26:	c6 01       	movw	r24, r12
    1a28:	68 de       	rcall	.-816    	; 0x16fa <conv_brk>
    1a2a:	ec 01       	movw	r28, r24
    1a2c:	89 2b       	or	r24, r25
    1a2e:	09 f0       	breq	.+2      	; 0x1a32 <vfscanf+0x17a>
    1a30:	3f c0       	rjmp	.+126    	; 0x1ab0 <vfscanf+0x1f8>
    1a32:	39 c0       	rjmp	.+114    	; 0x1aa6 <vfscanf+0x1ee>
    1a34:	c6 01       	movw	r24, r12
    1a36:	c1 dd       	rcall	.-1150   	; 0x15ba <skip_spaces>
    1a38:	97 fd       	sbrc	r25, 7
    1a3a:	3e c0       	rjmp	.+124    	; 0x1ab8 <vfscanf+0x200>
    1a3c:	1f 36       	cpi	r17, 0x6F	; 111
    1a3e:	49 f1       	breq	.+82     	; 0x1a92 <vfscanf+0x1da>
    1a40:	28 f4       	brcc	.+10     	; 0x1a4c <vfscanf+0x194>
    1a42:	14 36       	cpi	r17, 0x64	; 100
    1a44:	21 f1       	breq	.+72     	; 0x1a8e <vfscanf+0x1d6>
    1a46:	19 36       	cpi	r17, 0x69	; 105
    1a48:	39 f1       	breq	.+78     	; 0x1a98 <vfscanf+0x1e0>
    1a4a:	25 c0       	rjmp	.+74     	; 0x1a96 <vfscanf+0x1de>
    1a4c:	13 37       	cpi	r17, 0x73	; 115
    1a4e:	71 f0       	breq	.+28     	; 0x1a6c <vfscanf+0x1b4>
    1a50:	15 37       	cpi	r17, 0x75	; 117
    1a52:	e9 f0       	breq	.+58     	; 0x1a8e <vfscanf+0x1d6>
    1a54:	20 c0       	rjmp	.+64     	; 0x1a96 <vfscanf+0x1de>
    1a56:	81 14       	cp	r8, r1
    1a58:	91 04       	cpc	r9, r1
    1a5a:	29 f0       	breq	.+10     	; 0x1a66 <vfscanf+0x1ae>
    1a5c:	f4 01       	movw	r30, r8
    1a5e:	60 82       	st	Z, r6
    1a60:	c4 01       	movw	r24, r8
    1a62:	01 96       	adiw	r24, 0x01	; 1
    1a64:	4c 01       	movw	r8, r24
    1a66:	fa 94       	dec	r15
    1a68:	ff 20       	and	r15, r15
    1a6a:	59 f0       	breq	.+22     	; 0x1a82 <vfscanf+0x1ca>
    1a6c:	c6 01       	movw	r24, r12
    1a6e:	64 d0       	rcall	.+200    	; 0x1b38 <fgetc>
    1a70:	3c 01       	movw	r6, r24
    1a72:	97 fd       	sbrc	r25, 7
    1a74:	06 c0       	rjmp	.+12     	; 0x1a82 <vfscanf+0x1ca>
    1a76:	37 d0       	rcall	.+110    	; 0x1ae6 <isspace>
    1a78:	89 2b       	or	r24, r25
    1a7a:	69 f3       	breq	.-38     	; 0x1a56 <vfscanf+0x19e>
    1a7c:	b6 01       	movw	r22, r12
    1a7e:	c3 01       	movw	r24, r6
    1a80:	d5 d0       	rcall	.+426    	; 0x1c2c <ungetc>
    1a82:	81 14       	cp	r8, r1
    1a84:	91 04       	cpc	r9, r1
    1a86:	a1 f0       	breq	.+40     	; 0x1ab0 <vfscanf+0x1f8>
    1a88:	f4 01       	movw	r30, r8
    1a8a:	10 82       	st	Z, r1
    1a8c:	11 c0       	rjmp	.+34     	; 0x1ab0 <vfscanf+0x1f8>
    1a8e:	00 62       	ori	r16, 0x20	; 32
    1a90:	03 c0       	rjmp	.+6      	; 0x1a98 <vfscanf+0x1e0>
    1a92:	00 61       	ori	r16, 0x10	; 16
    1a94:	01 c0       	rjmp	.+2      	; 0x1a98 <vfscanf+0x1e0>
    1a96:	00 64       	ori	r16, 0x40	; 64
    1a98:	20 2f       	mov	r18, r16
    1a9a:	a4 01       	movw	r20, r8
    1a9c:	6f 2d       	mov	r22, r15
    1a9e:	c6 01       	movw	r24, r12
    1aa0:	a2 dd       	rcall	.-1212   	; 0x15e6 <conv_int>
    1aa2:	81 11       	cpse	r24, r1
    1aa4:	05 c0       	rjmp	.+10     	; 0x1ab0 <vfscanf+0x1f8>
    1aa6:	f6 01       	movw	r30, r12
    1aa8:	83 81       	ldd	r24, Z+3	; 0x03
    1aaa:	80 73       	andi	r24, 0x30	; 48
    1aac:	29 f4       	brne	.+10     	; 0x1ab8 <vfscanf+0x200>
    1aae:	06 c0       	rjmp	.+12     	; 0x1abc <vfscanf+0x204>
    1ab0:	00 fd       	sbrc	r16, 0
    1ab2:	18 cf       	rjmp	.-464    	; 0x18e4 <vfscanf+0x2c>
    1ab4:	53 94       	inc	r5
    1ab6:	16 cf       	rjmp	.-468    	; 0x18e4 <vfscanf+0x2c>
    1ab8:	55 20       	and	r5, r5
    1aba:	19 f0       	breq	.+6      	; 0x1ac2 <vfscanf+0x20a>
    1abc:	85 2d       	mov	r24, r5
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	02 c0       	rjmp	.+4      	; 0x1ac6 <vfscanf+0x20e>
    1ac2:	8f ef       	ldi	r24, 0xFF	; 255
    1ac4:	9f ef       	ldi	r25, 0xFF	; 255
    1ac6:	df 91       	pop	r29
    1ac8:	cf 91       	pop	r28
    1aca:	1f 91       	pop	r17
    1acc:	0f 91       	pop	r16
    1ace:	ff 90       	pop	r15
    1ad0:	ef 90       	pop	r14
    1ad2:	df 90       	pop	r13
    1ad4:	cf 90       	pop	r12
    1ad6:	bf 90       	pop	r11
    1ad8:	af 90       	pop	r10
    1ada:	9f 90       	pop	r9
    1adc:	8f 90       	pop	r8
    1ade:	7f 90       	pop	r7
    1ae0:	6f 90       	pop	r6
    1ae2:	5f 90       	pop	r5
    1ae4:	08 95       	ret

00001ae6 <isspace>:
    1ae6:	91 11       	cpse	r25, r1
    1ae8:	18 c1       	rjmp	.+560    	; 0x1d1a <__ctype_isfalse>
    1aea:	80 32       	cpi	r24, 0x20	; 32
    1aec:	19 f0       	breq	.+6      	; 0x1af4 <isspace+0xe>
    1aee:	89 50       	subi	r24, 0x09	; 9
    1af0:	85 50       	subi	r24, 0x05	; 5
    1af2:	d0 f7       	brcc	.-12     	; 0x1ae8 <isspace+0x2>
    1af4:	08 95       	ret

00001af6 <strchr_P>:
    1af6:	fc 01       	movw	r30, r24
    1af8:	05 90       	lpm	r0, Z+
    1afa:	06 16       	cp	r0, r22
    1afc:	21 f0       	breq	.+8      	; 0x1b06 <strchr_P+0x10>
    1afe:	00 20       	and	r0, r0
    1b00:	d9 f7       	brne	.-10     	; 0x1af8 <strchr_P+0x2>
    1b02:	c0 01       	movw	r24, r0
    1b04:	08 95       	ret
    1b06:	31 97       	sbiw	r30, 0x01	; 1
    1b08:	cf 01       	movw	r24, r30
    1b0a:	08 95       	ret

00001b0c <strnlen_P>:
    1b0c:	fc 01       	movw	r30, r24
    1b0e:	05 90       	lpm	r0, Z+
    1b10:	61 50       	subi	r22, 0x01	; 1
    1b12:	70 40       	sbci	r23, 0x00	; 0
    1b14:	01 10       	cpse	r0, r1
    1b16:	d8 f7       	brcc	.-10     	; 0x1b0e <strnlen_P+0x2>
    1b18:	80 95       	com	r24
    1b1a:	90 95       	com	r25
    1b1c:	8e 0f       	add	r24, r30
    1b1e:	9f 1f       	adc	r25, r31
    1b20:	08 95       	ret

00001b22 <strnlen>:
    1b22:	fc 01       	movw	r30, r24
    1b24:	61 50       	subi	r22, 0x01	; 1
    1b26:	70 40       	sbci	r23, 0x00	; 0
    1b28:	01 90       	ld	r0, Z+
    1b2a:	01 10       	cpse	r0, r1
    1b2c:	d8 f7       	brcc	.-10     	; 0x1b24 <strnlen+0x2>
    1b2e:	80 95       	com	r24
    1b30:	90 95       	com	r25
    1b32:	8e 0f       	add	r24, r30
    1b34:	9f 1f       	adc	r25, r31
    1b36:	08 95       	ret

00001b38 <fgetc>:
    1b38:	cf 93       	push	r28
    1b3a:	df 93       	push	r29
    1b3c:	ec 01       	movw	r28, r24
    1b3e:	2b 81       	ldd	r18, Y+3	; 0x03
    1b40:	20 ff       	sbrs	r18, 0
    1b42:	33 c0       	rjmp	.+102    	; 0x1baa <fgetc+0x72>
    1b44:	26 ff       	sbrs	r18, 6
    1b46:	0a c0       	rjmp	.+20     	; 0x1b5c <fgetc+0x24>
    1b48:	2f 7b       	andi	r18, 0xBF	; 191
    1b4a:	2b 83       	std	Y+3, r18	; 0x03
    1b4c:	8e 81       	ldd	r24, Y+6	; 0x06
    1b4e:	9f 81       	ldd	r25, Y+7	; 0x07
    1b50:	01 96       	adiw	r24, 0x01	; 1
    1b52:	9f 83       	std	Y+7, r25	; 0x07
    1b54:	8e 83       	std	Y+6, r24	; 0x06
    1b56:	8a 81       	ldd	r24, Y+2	; 0x02
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	29 c0       	rjmp	.+82     	; 0x1bae <fgetc+0x76>
    1b5c:	22 ff       	sbrs	r18, 2
    1b5e:	0f c0       	rjmp	.+30     	; 0x1b7e <fgetc+0x46>
    1b60:	e8 81       	ld	r30, Y
    1b62:	f9 81       	ldd	r31, Y+1	; 0x01
    1b64:	80 81       	ld	r24, Z
    1b66:	08 2e       	mov	r0, r24
    1b68:	00 0c       	add	r0, r0
    1b6a:	99 0b       	sbc	r25, r25
    1b6c:	00 97       	sbiw	r24, 0x00	; 0
    1b6e:	19 f4       	brne	.+6      	; 0x1b76 <fgetc+0x3e>
    1b70:	20 62       	ori	r18, 0x20	; 32
    1b72:	2b 83       	std	Y+3, r18	; 0x03
    1b74:	1a c0       	rjmp	.+52     	; 0x1baa <fgetc+0x72>
    1b76:	31 96       	adiw	r30, 0x01	; 1
    1b78:	f9 83       	std	Y+1, r31	; 0x01
    1b7a:	e8 83       	st	Y, r30
    1b7c:	0e c0       	rjmp	.+28     	; 0x1b9a <fgetc+0x62>
    1b7e:	ea 85       	ldd	r30, Y+10	; 0x0a
    1b80:	fb 85       	ldd	r31, Y+11	; 0x0b
    1b82:	19 95       	eicall
    1b84:	97 ff       	sbrs	r25, 7
    1b86:	09 c0       	rjmp	.+18     	; 0x1b9a <fgetc+0x62>
    1b88:	2b 81       	ldd	r18, Y+3	; 0x03
    1b8a:	01 96       	adiw	r24, 0x01	; 1
    1b8c:	11 f0       	breq	.+4      	; 0x1b92 <fgetc+0x5a>
    1b8e:	80 e2       	ldi	r24, 0x20	; 32
    1b90:	01 c0       	rjmp	.+2      	; 0x1b94 <fgetc+0x5c>
    1b92:	80 e1       	ldi	r24, 0x10	; 16
    1b94:	82 2b       	or	r24, r18
    1b96:	8b 83       	std	Y+3, r24	; 0x03
    1b98:	08 c0       	rjmp	.+16     	; 0x1baa <fgetc+0x72>
    1b9a:	2e 81       	ldd	r18, Y+6	; 0x06
    1b9c:	3f 81       	ldd	r19, Y+7	; 0x07
    1b9e:	2f 5f       	subi	r18, 0xFF	; 255
    1ba0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ba2:	3f 83       	std	Y+7, r19	; 0x07
    1ba4:	2e 83       	std	Y+6, r18	; 0x06
    1ba6:	99 27       	eor	r25, r25
    1ba8:	02 c0       	rjmp	.+4      	; 0x1bae <fgetc+0x76>
    1baa:	8f ef       	ldi	r24, 0xFF	; 255
    1bac:	9f ef       	ldi	r25, 0xFF	; 255
    1bae:	df 91       	pop	r29
    1bb0:	cf 91       	pop	r28
    1bb2:	08 95       	ret

00001bb4 <fputc>:
    1bb4:	0f 93       	push	r16
    1bb6:	1f 93       	push	r17
    1bb8:	cf 93       	push	r28
    1bba:	df 93       	push	r29
    1bbc:	fb 01       	movw	r30, r22
    1bbe:	23 81       	ldd	r18, Z+3	; 0x03
    1bc0:	21 fd       	sbrc	r18, 1
    1bc2:	03 c0       	rjmp	.+6      	; 0x1bca <fputc+0x16>
    1bc4:	8f ef       	ldi	r24, 0xFF	; 255
    1bc6:	9f ef       	ldi	r25, 0xFF	; 255
    1bc8:	2c c0       	rjmp	.+88     	; 0x1c22 <fputc+0x6e>
    1bca:	22 ff       	sbrs	r18, 2
    1bcc:	16 c0       	rjmp	.+44     	; 0x1bfa <fputc+0x46>
    1bce:	46 81       	ldd	r20, Z+6	; 0x06
    1bd0:	57 81       	ldd	r21, Z+7	; 0x07
    1bd2:	24 81       	ldd	r18, Z+4	; 0x04
    1bd4:	35 81       	ldd	r19, Z+5	; 0x05
    1bd6:	42 17       	cp	r20, r18
    1bd8:	53 07       	cpc	r21, r19
    1bda:	44 f4       	brge	.+16     	; 0x1bec <fputc+0x38>
    1bdc:	a0 81       	ld	r26, Z
    1bde:	b1 81       	ldd	r27, Z+1	; 0x01
    1be0:	9d 01       	movw	r18, r26
    1be2:	2f 5f       	subi	r18, 0xFF	; 255
    1be4:	3f 4f       	sbci	r19, 0xFF	; 255
    1be6:	31 83       	std	Z+1, r19	; 0x01
    1be8:	20 83       	st	Z, r18
    1bea:	8c 93       	st	X, r24
    1bec:	26 81       	ldd	r18, Z+6	; 0x06
    1bee:	37 81       	ldd	r19, Z+7	; 0x07
    1bf0:	2f 5f       	subi	r18, 0xFF	; 255
    1bf2:	3f 4f       	sbci	r19, 0xFF	; 255
    1bf4:	37 83       	std	Z+7, r19	; 0x07
    1bf6:	26 83       	std	Z+6, r18	; 0x06
    1bf8:	14 c0       	rjmp	.+40     	; 0x1c22 <fputc+0x6e>
    1bfa:	8b 01       	movw	r16, r22
    1bfc:	ec 01       	movw	r28, r24
    1bfe:	fb 01       	movw	r30, r22
    1c00:	00 84       	ldd	r0, Z+8	; 0x08
    1c02:	f1 85       	ldd	r31, Z+9	; 0x09
    1c04:	e0 2d       	mov	r30, r0
    1c06:	19 95       	eicall
    1c08:	89 2b       	or	r24, r25
    1c0a:	e1 f6       	brne	.-72     	; 0x1bc4 <fputc+0x10>
    1c0c:	d8 01       	movw	r26, r16
    1c0e:	16 96       	adiw	r26, 0x06	; 6
    1c10:	8d 91       	ld	r24, X+
    1c12:	9c 91       	ld	r25, X
    1c14:	17 97       	sbiw	r26, 0x07	; 7
    1c16:	01 96       	adiw	r24, 0x01	; 1
    1c18:	17 96       	adiw	r26, 0x07	; 7
    1c1a:	9c 93       	st	X, r25
    1c1c:	8e 93       	st	-X, r24
    1c1e:	16 97       	sbiw	r26, 0x06	; 6
    1c20:	ce 01       	movw	r24, r28
    1c22:	df 91       	pop	r29
    1c24:	cf 91       	pop	r28
    1c26:	1f 91       	pop	r17
    1c28:	0f 91       	pop	r16
    1c2a:	08 95       	ret

00001c2c <ungetc>:
    1c2c:	fb 01       	movw	r30, r22
    1c2e:	23 81       	ldd	r18, Z+3	; 0x03
    1c30:	20 ff       	sbrs	r18, 0
    1c32:	12 c0       	rjmp	.+36     	; 0x1c58 <ungetc+0x2c>
    1c34:	26 fd       	sbrc	r18, 6
    1c36:	10 c0       	rjmp	.+32     	; 0x1c58 <ungetc+0x2c>
    1c38:	8f 3f       	cpi	r24, 0xFF	; 255
    1c3a:	3f ef       	ldi	r19, 0xFF	; 255
    1c3c:	93 07       	cpc	r25, r19
    1c3e:	61 f0       	breq	.+24     	; 0x1c58 <ungetc+0x2c>
    1c40:	82 83       	std	Z+2, r24	; 0x02
    1c42:	2f 7d       	andi	r18, 0xDF	; 223
    1c44:	20 64       	ori	r18, 0x40	; 64
    1c46:	23 83       	std	Z+3, r18	; 0x03
    1c48:	26 81       	ldd	r18, Z+6	; 0x06
    1c4a:	37 81       	ldd	r19, Z+7	; 0x07
    1c4c:	21 50       	subi	r18, 0x01	; 1
    1c4e:	31 09       	sbc	r19, r1
    1c50:	37 83       	std	Z+7, r19	; 0x07
    1c52:	26 83       	std	Z+6, r18	; 0x06
    1c54:	99 27       	eor	r25, r25
    1c56:	08 95       	ret
    1c58:	8f ef       	ldi	r24, 0xFF	; 255
    1c5a:	9f ef       	ldi	r25, 0xFF	; 255
    1c5c:	08 95       	ret

00001c5e <__ultoa_invert>:
    1c5e:	fa 01       	movw	r30, r20
    1c60:	aa 27       	eor	r26, r26
    1c62:	28 30       	cpi	r18, 0x08	; 8
    1c64:	51 f1       	breq	.+84     	; 0x1cba <__ultoa_invert+0x5c>
    1c66:	20 31       	cpi	r18, 0x10	; 16
    1c68:	81 f1       	breq	.+96     	; 0x1cca <__ultoa_invert+0x6c>
    1c6a:	e8 94       	clt
    1c6c:	6f 93       	push	r22
    1c6e:	6e 7f       	andi	r22, 0xFE	; 254
    1c70:	6e 5f       	subi	r22, 0xFE	; 254
    1c72:	7f 4f       	sbci	r23, 0xFF	; 255
    1c74:	8f 4f       	sbci	r24, 0xFF	; 255
    1c76:	9f 4f       	sbci	r25, 0xFF	; 255
    1c78:	af 4f       	sbci	r26, 0xFF	; 255
    1c7a:	b1 e0       	ldi	r27, 0x01	; 1
    1c7c:	3e d0       	rcall	.+124    	; 0x1cfa <__ultoa_invert+0x9c>
    1c7e:	b4 e0       	ldi	r27, 0x04	; 4
    1c80:	3c d0       	rcall	.+120    	; 0x1cfa <__ultoa_invert+0x9c>
    1c82:	67 0f       	add	r22, r23
    1c84:	78 1f       	adc	r23, r24
    1c86:	89 1f       	adc	r24, r25
    1c88:	9a 1f       	adc	r25, r26
    1c8a:	a1 1d       	adc	r26, r1
    1c8c:	68 0f       	add	r22, r24
    1c8e:	79 1f       	adc	r23, r25
    1c90:	8a 1f       	adc	r24, r26
    1c92:	91 1d       	adc	r25, r1
    1c94:	a1 1d       	adc	r26, r1
    1c96:	6a 0f       	add	r22, r26
    1c98:	71 1d       	adc	r23, r1
    1c9a:	81 1d       	adc	r24, r1
    1c9c:	91 1d       	adc	r25, r1
    1c9e:	a1 1d       	adc	r26, r1
    1ca0:	20 d0       	rcall	.+64     	; 0x1ce2 <__ultoa_invert+0x84>
    1ca2:	09 f4       	brne	.+2      	; 0x1ca6 <__ultoa_invert+0x48>
    1ca4:	68 94       	set
    1ca6:	3f 91       	pop	r19
    1ca8:	2a e0       	ldi	r18, 0x0A	; 10
    1caa:	26 9f       	mul	r18, r22
    1cac:	11 24       	eor	r1, r1
    1cae:	30 19       	sub	r19, r0
    1cb0:	30 5d       	subi	r19, 0xD0	; 208
    1cb2:	31 93       	st	Z+, r19
    1cb4:	de f6       	brtc	.-74     	; 0x1c6c <__ultoa_invert+0xe>
    1cb6:	cf 01       	movw	r24, r30
    1cb8:	08 95       	ret
    1cba:	46 2f       	mov	r20, r22
    1cbc:	47 70       	andi	r20, 0x07	; 7
    1cbe:	40 5d       	subi	r20, 0xD0	; 208
    1cc0:	41 93       	st	Z+, r20
    1cc2:	b3 e0       	ldi	r27, 0x03	; 3
    1cc4:	0f d0       	rcall	.+30     	; 0x1ce4 <__ultoa_invert+0x86>
    1cc6:	c9 f7       	brne	.-14     	; 0x1cba <__ultoa_invert+0x5c>
    1cc8:	f6 cf       	rjmp	.-20     	; 0x1cb6 <__ultoa_invert+0x58>
    1cca:	46 2f       	mov	r20, r22
    1ccc:	4f 70       	andi	r20, 0x0F	; 15
    1cce:	40 5d       	subi	r20, 0xD0	; 208
    1cd0:	4a 33       	cpi	r20, 0x3A	; 58
    1cd2:	18 f0       	brcs	.+6      	; 0x1cda <__ultoa_invert+0x7c>
    1cd4:	49 5d       	subi	r20, 0xD9	; 217
    1cd6:	31 fd       	sbrc	r19, 1
    1cd8:	40 52       	subi	r20, 0x20	; 32
    1cda:	41 93       	st	Z+, r20
    1cdc:	02 d0       	rcall	.+4      	; 0x1ce2 <__ultoa_invert+0x84>
    1cde:	a9 f7       	brne	.-22     	; 0x1cca <__ultoa_invert+0x6c>
    1ce0:	ea cf       	rjmp	.-44     	; 0x1cb6 <__ultoa_invert+0x58>
    1ce2:	b4 e0       	ldi	r27, 0x04	; 4
    1ce4:	a6 95       	lsr	r26
    1ce6:	97 95       	ror	r25
    1ce8:	87 95       	ror	r24
    1cea:	77 95       	ror	r23
    1cec:	67 95       	ror	r22
    1cee:	ba 95       	dec	r27
    1cf0:	c9 f7       	brne	.-14     	; 0x1ce4 <__ultoa_invert+0x86>
    1cf2:	00 97       	sbiw	r24, 0x00	; 0
    1cf4:	61 05       	cpc	r22, r1
    1cf6:	71 05       	cpc	r23, r1
    1cf8:	08 95       	ret
    1cfa:	9b 01       	movw	r18, r22
    1cfc:	ac 01       	movw	r20, r24
    1cfe:	0a 2e       	mov	r0, r26
    1d00:	06 94       	lsr	r0
    1d02:	57 95       	ror	r21
    1d04:	47 95       	ror	r20
    1d06:	37 95       	ror	r19
    1d08:	27 95       	ror	r18
    1d0a:	ba 95       	dec	r27
    1d0c:	c9 f7       	brne	.-14     	; 0x1d00 <__ultoa_invert+0xa2>
    1d0e:	62 0f       	add	r22, r18
    1d10:	73 1f       	adc	r23, r19
    1d12:	84 1f       	adc	r24, r20
    1d14:	95 1f       	adc	r25, r21
    1d16:	a0 1d       	adc	r26, r0
    1d18:	08 95       	ret

00001d1a <__ctype_isfalse>:
    1d1a:	99 27       	eor	r25, r25
    1d1c:	88 27       	eor	r24, r24

00001d1e <__ctype_istrue>:
    1d1e:	08 95       	ret

00001d20 <_exit>:
    1d20:	f8 94       	cli

00001d22 <__stop_program>:
    1d22:	ff cf       	rjmp	.-2      	; 0x1d22 <__stop_program>
