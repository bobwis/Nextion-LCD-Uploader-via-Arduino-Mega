
async serial transfer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c2  00800200  00001d1a  00001dae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001d1a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000170  008002c2  008002c2  00001e70  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001e70  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001ecc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002d0  00000000  00000000  00001f10  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003044  00000000  00000000  000021e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001336  00000000  00000000  00005224  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001684  00000000  00000000  0000655a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000754  00000000  00000000  00007be0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001080  00000000  00000000  00008334  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001574  00000000  00000000  000093b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000250  00000000  00000000  0000a928  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	77 c0       	rjmp	.+238    	; 0xf0 <__ctors_end>
       2:	00 00       	nop
       4:	95 c0       	rjmp	.+298    	; 0x130 <__bad_interrupt>
       6:	00 00       	nop
       8:	93 c0       	rjmp	.+294    	; 0x130 <__bad_interrupt>
       a:	00 00       	nop
       c:	91 c0       	rjmp	.+290    	; 0x130 <__bad_interrupt>
       e:	00 00       	nop
      10:	8f c0       	rjmp	.+286    	; 0x130 <__bad_interrupt>
      12:	00 00       	nop
      14:	8d c0       	rjmp	.+282    	; 0x130 <__bad_interrupt>
      16:	00 00       	nop
      18:	8b c0       	rjmp	.+278    	; 0x130 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	89 c0       	rjmp	.+274    	; 0x130 <__bad_interrupt>
      1e:	00 00       	nop
      20:	87 c0       	rjmp	.+270    	; 0x130 <__bad_interrupt>
      22:	00 00       	nop
      24:	85 c0       	rjmp	.+266    	; 0x130 <__bad_interrupt>
      26:	00 00       	nop
      28:	83 c0       	rjmp	.+262    	; 0x130 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	81 c0       	rjmp	.+258    	; 0x130 <__bad_interrupt>
      2e:	00 00       	nop
      30:	7f c0       	rjmp	.+254    	; 0x130 <__bad_interrupt>
      32:	00 00       	nop
      34:	7d c0       	rjmp	.+250    	; 0x130 <__bad_interrupt>
      36:	00 00       	nop
      38:	7b c0       	rjmp	.+246    	; 0x130 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	79 c0       	rjmp	.+242    	; 0x130 <__bad_interrupt>
      3e:	00 00       	nop
      40:	77 c0       	rjmp	.+238    	; 0x130 <__bad_interrupt>
      42:	00 00       	nop
      44:	78 c0       	rjmp	.+240    	; 0x136 <__vector_17>
      46:	00 00       	nop
      48:	73 c0       	rjmp	.+230    	; 0x130 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	71 c0       	rjmp	.+226    	; 0x130 <__bad_interrupt>
      4e:	00 00       	nop
      50:	6f c0       	rjmp	.+222    	; 0x130 <__bad_interrupt>
      52:	00 00       	nop
      54:	6d c0       	rjmp	.+218    	; 0x130 <__bad_interrupt>
      56:	00 00       	nop
      58:	6b c0       	rjmp	.+214    	; 0x130 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	69 c0       	rjmp	.+210    	; 0x130 <__bad_interrupt>
      5e:	00 00       	nop
      60:	67 c0       	rjmp	.+206    	; 0x130 <__bad_interrupt>
      62:	00 00       	nop
      64:	8e c5       	rjmp	.+2844   	; 0xb82 <__vector_25>
      66:	00 00       	nop
      68:	b5 c5       	rjmp	.+2922   	; 0xbd4 <__vector_26>
      6a:	00 00       	nop
      6c:	61 c0       	rjmp	.+194    	; 0x130 <__bad_interrupt>
      6e:	00 00       	nop
      70:	5f c0       	rjmp	.+190    	; 0x130 <__bad_interrupt>
      72:	00 00       	nop
      74:	5d c0       	rjmp	.+186    	; 0x130 <__bad_interrupt>
      76:	00 00       	nop
      78:	5b c0       	rjmp	.+182    	; 0x130 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	59 c0       	rjmp	.+178    	; 0x130 <__bad_interrupt>
      7e:	00 00       	nop
      80:	a8 c0       	rjmp	.+336    	; 0x1d2 <__vector_32>
      82:	00 00       	nop
      84:	55 c0       	rjmp	.+170    	; 0x130 <__bad_interrupt>
      86:	00 00       	nop
      88:	53 c0       	rjmp	.+166    	; 0x130 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	51 c0       	rjmp	.+162    	; 0x130 <__bad_interrupt>
      8e:	00 00       	nop
      90:	2f c6       	rjmp	.+3166   	; 0xcf0 <__vector_36>
      92:	00 00       	nop
      94:	56 c6       	rjmp	.+3244   	; 0xd42 <__vector_37>
      96:	00 00       	nop
      98:	4b c0       	rjmp	.+150    	; 0x130 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	49 c0       	rjmp	.+146    	; 0x130 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	47 c0       	rjmp	.+142    	; 0x130 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	45 c0       	rjmp	.+138    	; 0x130 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	43 c0       	rjmp	.+134    	; 0x130 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	41 c0       	rjmp	.+130    	; 0x130 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	3f c0       	rjmp	.+126    	; 0x130 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	3d c0       	rjmp	.+122    	; 0x130 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	3b c0       	rjmp	.+118    	; 0x130 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	39 c0       	rjmp	.+114    	; 0x130 <__bad_interrupt>
      be:	00 00       	nop
      c0:	37 c0       	rjmp	.+110    	; 0x130 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	35 c0       	rjmp	.+106    	; 0x130 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	33 c0       	rjmp	.+102    	; 0x130 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	89 c6       	rjmp	.+3346   	; 0xde0 <__vector_51>
      ce:	00 00       	nop
      d0:	b0 c6       	rjmp	.+3424   	; 0xe32 <__vector_52>
      d2:	00 00       	nop
      d4:	2d c0       	rjmp	.+90     	; 0x130 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	3a c7       	rjmp	.+3700   	; 0xf4e <__vector_54>
      da:	00 00       	nop
      dc:	61 c7       	rjmp	.+3778   	; 0xfa0 <__vector_55>
      de:	00 00       	nop
      e0:	27 c0       	rjmp	.+78     	; 0x130 <__bad_interrupt>
	...

000000e4 <__trampolines_end>:
      e4:	63 64       	ori	r22, 0x43	; 67
      e6:	69 6e       	ori	r22, 0xE9	; 233
      e8:	6f 70       	andi	r22, 0x0F	; 15
      ea:	73 75       	andi	r23, 0x53	; 83
      ec:	78 58       	subi	r23, 0x88	; 136
      ee:	5b 00       	.word	0x005b	; ????

000000f0 <__ctors_end>:
      f0:	11 24       	eor	r1, r1
      f2:	1f be       	out	0x3f, r1	; 63
      f4:	cf ef       	ldi	r28, 0xFF	; 255
      f6:	d1 e2       	ldi	r29, 0x21	; 33
      f8:	de bf       	out	0x3e, r29	; 62
      fa:	cd bf       	out	0x3d, r28	; 61
      fc:	00 e0       	ldi	r16, 0x00	; 0
      fe:	0c bf       	out	0x3c, r16	; 60

00000100 <__do_copy_data>:
     100:	12 e0       	ldi	r17, 0x02	; 2
     102:	a0 e0       	ldi	r26, 0x00	; 0
     104:	b2 e0       	ldi	r27, 0x02	; 2
     106:	ea e1       	ldi	r30, 0x1A	; 26
     108:	fd e1       	ldi	r31, 0x1D	; 29
     10a:	00 e0       	ldi	r16, 0x00	; 0
     10c:	0b bf       	out	0x3b, r16	; 59
     10e:	02 c0       	rjmp	.+4      	; 0x114 <__do_copy_data+0x14>
     110:	07 90       	elpm	r0, Z+
     112:	0d 92       	st	X+, r0
     114:	a2 3c       	cpi	r26, 0xC2	; 194
     116:	b1 07       	cpc	r27, r17
     118:	d9 f7       	brne	.-10     	; 0x110 <__do_copy_data+0x10>

0000011a <__do_clear_bss>:
     11a:	24 e0       	ldi	r18, 0x04	; 4
     11c:	a2 ec       	ldi	r26, 0xC2	; 194
     11e:	b2 e0       	ldi	r27, 0x02	; 2
     120:	01 c0       	rjmp	.+2      	; 0x124 <.do_clear_bss_start>

00000122 <.do_clear_bss_loop>:
     122:	1d 92       	st	X+, r1

00000124 <.do_clear_bss_start>:
     124:	a2 33       	cpi	r26, 0x32	; 50
     126:	b2 07       	cpc	r27, r18
     128:	e1 f7       	brne	.-8      	; 0x122 <.do_clear_bss_loop>
     12a:	f6 d3       	rcall	.+2028   	; 0x918 <main>
     12c:	0c 94 8b 0e 	jmp	0x1d16	; 0x1d16 <_exit>

00000130 <__bad_interrupt>:
     130:	67 cf       	rjmp	.-306    	; 0x0 <__vectors>

00000132 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
**/
void atmel_start_init(void)
{
     132:	9c c4       	rjmp	.+2360   	; 0xa6c <system_init>
     134:	08 95       	ret

00000136 <__vector_17>:
#include <utils.h>

volatile uint64_t msectimer0 = 0;

ISR(TIMER1_COMPA_vect)
{
     136:	1f 92       	push	r1
     138:	0f 92       	push	r0
     13a:	0f b6       	in	r0, 0x3f	; 63
     13c:	0f 92       	push	r0
     13e:	11 24       	eor	r1, r1
     140:	2f 93       	push	r18
     142:	3f 93       	push	r19
     144:	4f 93       	push	r20
     146:	5f 93       	push	r21
     148:	6f 93       	push	r22
     14a:	7f 93       	push	r23
     14c:	8f 93       	push	r24
     14e:	9f 93       	push	r25
     150:	af 93       	push	r26
	static uint16_t nextcmp = 0;

	nextcmp = nextcmp + 16000;
     152:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <__data_end>
     156:	90 91 c3 02 	lds	r25, 0x02C3	; 0x8002c3 <__data_end+0x1>
     15a:	80 58       	subi	r24, 0x80	; 128
     15c:	91 4c       	sbci	r25, 0xC1	; 193
     15e:	90 93 c3 02 	sts	0x02C3, r25	; 0x8002c3 <__data_end+0x1>
     162:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <__data_end>
	OCR1AH = nextcmp >> 8 ;
     166:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
	OCR1AL = nextcmp & 0xff;
     16a:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <__data_end>
     16e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
	msectimer0++;
     172:	20 91 c4 02 	lds	r18, 0x02C4	; 0x8002c4 <msectimer0>
     176:	30 91 c5 02 	lds	r19, 0x02C5	; 0x8002c5 <msectimer0+0x1>
     17a:	40 91 c6 02 	lds	r20, 0x02C6	; 0x8002c6 <msectimer0+0x2>
     17e:	50 91 c7 02 	lds	r21, 0x02C7	; 0x8002c7 <msectimer0+0x3>
     182:	60 91 c8 02 	lds	r22, 0x02C8	; 0x8002c8 <msectimer0+0x4>
     186:	70 91 c9 02 	lds	r23, 0x02C9	; 0x8002c9 <msectimer0+0x5>
     18a:	80 91 ca 02 	lds	r24, 0x02CA	; 0x8002ca <msectimer0+0x6>
     18e:	90 91 cb 02 	lds	r25, 0x02CB	; 0x8002cb <msectimer0+0x7>
     192:	a1 e0       	ldi	r26, 0x01	; 1
     194:	86 d7       	rcall	.+3852   	; 0x10a2 <__adddi3_s8>
     196:	20 93 c4 02 	sts	0x02C4, r18	; 0x8002c4 <msectimer0>
     19a:	30 93 c5 02 	sts	0x02C5, r19	; 0x8002c5 <msectimer0+0x1>
     19e:	40 93 c6 02 	sts	0x02C6, r20	; 0x8002c6 <msectimer0+0x2>
     1a2:	50 93 c7 02 	sts	0x02C7, r21	; 0x8002c7 <msectimer0+0x3>
     1a6:	60 93 c8 02 	sts	0x02C8, r22	; 0x8002c8 <msectimer0+0x4>
     1aa:	70 93 c9 02 	sts	0x02C9, r23	; 0x8002c9 <msectimer0+0x5>
     1ae:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <msectimer0+0x6>
     1b2:	90 93 cb 02 	sts	0x02CB, r25	; 0x8002cb <msectimer0+0x7>
	/* Insert your TIMER_0 compare channel A interrupt handling code here */
}
     1b6:	af 91       	pop	r26
     1b8:	9f 91       	pop	r25
     1ba:	8f 91       	pop	r24
     1bc:	7f 91       	pop	r23
     1be:	6f 91       	pop	r22
     1c0:	5f 91       	pop	r21
     1c2:	4f 91       	pop	r20
     1c4:	3f 91       	pop	r19
     1c6:	2f 91       	pop	r18
     1c8:	0f 90       	pop	r0
     1ca:	0f be       	out	0x3f, r0	; 63
     1cc:	0f 90       	pop	r0
     1ce:	1f 90       	pop	r1
     1d0:	18 95       	reti

000001d2 <__vector_32>:

ISR(TIMER3_COMPA_vect)
{
     1d2:	1f 92       	push	r1
     1d4:	0f 92       	push	r0
     1d6:	0f b6       	in	r0, 0x3f	; 63
     1d8:	0f 92       	push	r0
     1da:	11 24       	eor	r1, r1

	/* Insert your TIMER_1 compare channel A interrupt handling code here */
}
     1dc:	0f 90       	pop	r0
     1de:	0f be       	out	0x3f, r0	; 63
     1e0:	0f 90       	pop	r0
     1e2:	1f 90       	pop	r1
     1e4:	18 95       	reti

000001e6 <delay_ms>:
		_delay_ms(1);
	}
}
#else
void delay_ms(uint16_t count)
{
     1e6:	6f 92       	push	r6
     1e8:	7f 92       	push	r7
     1ea:	8f 92       	push	r8
     1ec:	9f 92       	push	r9
     1ee:	af 92       	push	r10
     1f0:	bf 92       	push	r11
     1f2:	cf 92       	push	r12
     1f4:	df 92       	push	r13
     1f6:	ef 92       	push	r14
     1f8:	ff 92       	push	r15
     1fa:	0f 93       	push	r16
     1fc:	1f 93       	push	r17
     1fe:	cf 93       	push	r28
     200:	df 93       	push	r29
     202:	cd b7       	in	r28, 0x3d	; 61
     204:	de b7       	in	r29, 0x3e	; 62
     206:	60 97       	sbiw	r28, 0x10	; 16
     208:	0f b6       	in	r0, 0x3f	; 63
     20a:	f8 94       	cli
     20c:	de bf       	out	0x3e, r29	; 62
     20e:	0f be       	out	0x3f, r0	; 63
     210:	cd bf       	out	0x3d, r28	; 61
volatile uint64_t k,j;
	while(1) {
		cli();
     212:	f8 94       	cli
		j = msectimer0;
     214:	f0 91 c4 02 	lds	r31, 0x02C4	; 0x8002c4 <msectimer0>
     218:	e0 91 c5 02 	lds	r30, 0x02C5	; 0x8002c5 <msectimer0+0x1>
     21c:	70 91 c6 02 	lds	r23, 0x02C6	; 0x8002c6 <msectimer0+0x2>
     220:	60 91 c7 02 	lds	r22, 0x02C7	; 0x8002c7 <msectimer0+0x3>
     224:	50 91 c8 02 	lds	r21, 0x02C8	; 0x8002c8 <msectimer0+0x4>
     228:	40 91 c9 02 	lds	r20, 0x02C9	; 0x8002c9 <msectimer0+0x5>
     22c:	30 91 ca 02 	lds	r19, 0x02CA	; 0x8002ca <msectimer0+0x6>
     230:	20 91 cb 02 	lds	r18, 0x02CB	; 0x8002cb <msectimer0+0x7>
     234:	f9 87       	std	Y+9, r31	; 0x09
     236:	ea 87       	std	Y+10, r30	; 0x0a
     238:	7b 87       	std	Y+11, r23	; 0x0b
     23a:	6c 87       	std	Y+12, r22	; 0x0c
     23c:	5d 87       	std	Y+13, r21	; 0x0d
     23e:	4e 87       	std	Y+14, r20	; 0x0e
     240:	3f 87       	std	Y+15, r19	; 0x0f
     242:	28 8b       	std	Y+16, r18	; 0x10
		sei();
     244:	78 94       	sei
		k = j + (uint64_t)count;
     246:	4c 01       	movw	r8, r24
     248:	69 84       	ldd	r6, Y+9	; 0x09
     24a:	7a 84       	ldd	r7, Y+10	; 0x0a
     24c:	bb 85       	ldd	r27, Y+11	; 0x0b
     24e:	ac 85       	ldd	r26, Y+12	; 0x0c
     250:	fd 85       	ldd	r31, Y+13	; 0x0d
     252:	ee 85       	ldd	r30, Y+14	; 0x0e
     254:	0f 85       	ldd	r16, Y+15	; 0x0f
     256:	18 89       	ldd	r17, Y+16	; 0x10
     258:	28 2f       	mov	r18, r24
     25a:	39 2d       	mov	r19, r9
     25c:	40 e0       	ldi	r20, 0x00	; 0
     25e:	50 e0       	ldi	r21, 0x00	; 0
     260:	60 e0       	ldi	r22, 0x00	; 0
     262:	70 e0       	ldi	r23, 0x00	; 0
     264:	80 e0       	ldi	r24, 0x00	; 0
     266:	90 e0       	ldi	r25, 0x00	; 0
     268:	a6 2c       	mov	r10, r6
     26a:	b7 2c       	mov	r11, r7
     26c:	cb 2e       	mov	r12, r27
     26e:	da 2e       	mov	r13, r26
     270:	ef 2e       	mov	r14, r31
     272:	fe 2e       	mov	r15, r30
     274:	0d d7       	rcall	.+3610   	; 0x1090 <__adddi3>
     276:	29 83       	std	Y+1, r18	; 0x01
     278:	3a 83       	std	Y+2, r19	; 0x02
     27a:	4b 83       	std	Y+3, r20	; 0x03
     27c:	5c 83       	std	Y+4, r21	; 0x04
     27e:	6d 83       	std	Y+5, r22	; 0x05
     280:	7e 83       	std	Y+6, r23	; 0x06
     282:	8f 83       	std	Y+7, r24	; 0x07
     284:	98 87       	std	Y+8, r25	; 0x08
		while(1) {
			cli();
     286:	f8 94       	cli
			j = msectimer0;
     288:	70 91 c4 02 	lds	r23, 0x02C4	; 0x8002c4 <msectimer0>
     28c:	60 91 c5 02 	lds	r22, 0x02C5	; 0x8002c5 <msectimer0+0x1>
     290:	50 91 c6 02 	lds	r21, 0x02C6	; 0x8002c6 <msectimer0+0x2>
     294:	40 91 c7 02 	lds	r20, 0x02C7	; 0x8002c7 <msectimer0+0x3>
     298:	30 91 c8 02 	lds	r19, 0x02C8	; 0x8002c8 <msectimer0+0x4>
     29c:	20 91 c9 02 	lds	r18, 0x02C9	; 0x8002c9 <msectimer0+0x5>
     2a0:	90 91 ca 02 	lds	r25, 0x02CA	; 0x8002ca <msectimer0+0x6>
     2a4:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <msectimer0+0x7>
     2a8:	79 87       	std	Y+9, r23	; 0x09
     2aa:	6a 87       	std	Y+10, r22	; 0x0a
     2ac:	5b 87       	std	Y+11, r21	; 0x0b
     2ae:	4c 87       	std	Y+12, r20	; 0x0c
     2b0:	3d 87       	std	Y+13, r19	; 0x0d
     2b2:	2e 87       	std	Y+14, r18	; 0x0e
     2b4:	9f 87       	std	Y+15, r25	; 0x0f
     2b6:	88 8b       	std	Y+16, r24	; 0x10
			sei();
     2b8:	78 94       	sei
			if (j >= k)
     2ba:	29 85       	ldd	r18, Y+9	; 0x09
     2bc:	3a 85       	ldd	r19, Y+10	; 0x0a
     2be:	4b 85       	ldd	r20, Y+11	; 0x0b
     2c0:	5c 85       	ldd	r21, Y+12	; 0x0c
     2c2:	6d 85       	ldd	r22, Y+13	; 0x0d
     2c4:	7e 85       	ldd	r23, Y+14	; 0x0e
     2c6:	8f 85       	ldd	r24, Y+15	; 0x0f
     2c8:	98 89       	ldd	r25, Y+16	; 0x10
     2ca:	a9 80       	ldd	r10, Y+1	; 0x01
     2cc:	ba 80       	ldd	r11, Y+2	; 0x02
     2ce:	cb 80       	ldd	r12, Y+3	; 0x03
     2d0:	dc 80       	ldd	r13, Y+4	; 0x04
     2d2:	ed 80       	ldd	r14, Y+5	; 0x05
     2d4:	fe 80       	ldd	r15, Y+6	; 0x06
     2d6:	0f 81       	ldd	r16, Y+7	; 0x07
     2d8:	18 85       	ldd	r17, Y+8	; 0x08
     2da:	ef d6       	rcall	.+3550   	; 0x10ba <__cmpdi2>
     2dc:	a0 f2       	brcs	.-88     	; 0x286 <delay_ms+0xa0>
			{
				return;
			}
		}
	}
}
     2de:	60 96       	adiw	r28, 0x10	; 16
     2e0:	0f b6       	in	r0, 0x3f	; 63
     2e2:	f8 94       	cli
     2e4:	de bf       	out	0x3e, r29	; 62
     2e6:	0f be       	out	0x3f, r0	; 63
     2e8:	cd bf       	out	0x3d, r28	; 61
     2ea:	df 91       	pop	r29
     2ec:	cf 91       	pop	r28
     2ee:	1f 91       	pop	r17
     2f0:	0f 91       	pop	r16
     2f2:	ff 90       	pop	r15
     2f4:	ef 90       	pop	r14
     2f6:	df 90       	pop	r13
     2f8:	cf 90       	pop	r12
     2fa:	bf 90       	pop	r11
     2fc:	af 90       	pop	r10
     2fe:	9f 90       	pop	r9
     300:	8f 90       	pop	r8
     302:	7f 90       	pop	r7
     304:	6f 90       	pop	r6
     306:	08 95       	ret

00000308 <findlcd>:
#endif

// Find the LCD and return the current baud rate or -1 if not found
int findlcd(void)
{
     308:	af 92       	push	r10
     30a:	bf 92       	push	r11
     30c:	cf 92       	push	r12
     30e:	df 92       	push	r13
     310:	ef 92       	push	r14
     312:	ff 92       	push	r15
     314:	0f 93       	push	r16
     316:	1f 93       	push	r17
     318:	cf 93       	push	r28
     31a:	df 93       	push	r29
     31c:	cd b7       	in	r28, 0x3d	; 61
     31e:	de b7       	in	r29, 0x3e	; 62
     320:	c6 59       	subi	r28, 0x96	; 150
     322:	d1 09       	sbc	r29, r1
     324:	0f b6       	in	r0, 0x3f	; 63
     326:	f8 94       	cli
     328:	de bf       	out	0x3e, r29	; 62
     32a:	0f be       	out	0x3f, r0	; 63
     32c:	cd bf       	out	0x3d, r28	; 61
	const char discovermsg[]="\x00\xff\xff\xff""connect\xff\xff\xff";	// discovery message
     32e:	8f e0       	ldi	r24, 0x0F	; 15
     330:	ee e0       	ldi	r30, 0x0E	; 14
     332:	f2 e0       	ldi	r31, 0x02	; 2
     334:	de 01       	movw	r26, r28
     336:	11 96       	adiw	r26, 0x01	; 1
     338:	01 90       	ld	r0, Z+
     33a:	0d 92       	st	X+, r0
     33c:	8a 95       	dec	r24
     33e:	e1 f7       	brne	.-8      	; 0x338 <findlcd+0x30>
	const char foundmsg[]="comok ";		// first part of expected LCD response
     340:	87 e0       	ldi	r24, 0x07	; 7
     342:	e5 e3       	ldi	r30, 0x35	; 53
     344:	f2 e0       	ldi	r31, 0x02	; 2
     346:	de 01       	movw	r26, r28
     348:	50 96       	adiw	r26, 0x10	; 16
     34a:	01 90       	ld	r0, Z+
     34c:	0d 92       	st	X+, r0
     34e:	8a 95       	dec	r24
     350:	e1 f7       	brne	.-8      	; 0x34a <findlcd+0x42>

	int	i, j, rindex, bindex;
	int inindex = 0;
	int wtim = 0;

	for(i=0; i<sizeof(lcdsig); i++)
     352:	80 e0       	ldi	r24, 0x00	; 0
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	05 c0       	rjmp	.+10     	; 0x362 <findlcd+0x5a>
	{
		lcdsig[i] = 0;			// clear the rx bufffer
     358:	fc 01       	movw	r30, r24
     35a:	e4 53       	subi	r30, 0x34	; 52
     35c:	fd 4f       	sbci	r31, 0xFD	; 253
     35e:	10 82       	st	Z, r1

	int	i, j, rindex, bindex;
	int inindex = 0;
	int wtim = 0;

	for(i=0; i<sizeof(lcdsig); i++)
     360:	01 96       	adiw	r24, 0x01	; 1
     362:	80 35       	cpi	r24, 0x50	; 80
     364:	91 05       	cpc	r25, r1
     366:	c0 f3       	brcs	.-16     	; 0x358 <findlcd+0x50>
     368:	80 e0       	ldi	r24, 0x00	; 0
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	08 c0       	rjmp	.+16     	; 0x37e <findlcd+0x76>
	{
		lcdsig[i] = 0;			// clear the rx bufffer
	}
	for(i=0; i<sizeof(response); i++)
	{
		response[i] = 0;			// clear the response bufffer
     36e:	e7 e1       	ldi	r30, 0x17	; 23
     370:	f0 e0       	ldi	r31, 0x00	; 0
     372:	ec 0f       	add	r30, r28
     374:	fd 1f       	adc	r31, r29
     376:	e8 0f       	add	r30, r24
     378:	f9 1f       	adc	r31, r25
     37a:	10 82       	st	Z, r1

	for(i=0; i<sizeof(lcdsig); i++)
	{
		lcdsig[i] = 0;			// clear the rx bufffer
	}
	for(i=0; i<sizeof(response); i++)
     37c:	01 96       	adiw	r24, 0x01	; 1
     37e:	80 38       	cpi	r24, 0x80	; 128
     380:	91 05       	cpc	r25, r1
     382:	a8 f3       	brcs	.-22     	; 0x36e <findlcd+0x66>
     384:	c1 2c       	mov	r12, r1
     386:	d1 2c       	mov	r13, r1
     388:	cf c0       	rjmp	.+414    	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
	}

	for(bindex=0; bindex<sizeof(btable); bindex++)		// try every baud
	{
		inindex = 0;
		UBRR2H = (btable[bindex][BMULT] >> 8);
     38a:	f6 01       	movw	r30, r12
     38c:	ee 0f       	add	r30, r30
     38e:	ff 1f       	adc	r31, r31
     390:	ee 0f       	add	r30, r30
     392:	ff 1f       	adc	r31, r31
     394:	ea 55       	subi	r30, 0x5A	; 90
     396:	fd 4f       	sbci	r31, 0xFD	; 253
     398:	81 81       	ldd	r24, Z+1	; 0x01
     39a:	80 93 d5 00 	sts	0x00D5, r24	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
		UBRR2L = (btable[bindex][BMULT] & 0xff);
     39e:	80 81       	ld	r24, Z
     3a0:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
		delay_ms(10);			// allow baud gen to settle
     3a4:	8a e0       	ldi	r24, 0x0A	; 10
     3a6:	90 e0       	ldi	r25, 0x00	; 0
     3a8:	1e df       	rcall	.-452    	; 0x1e6 <delay_ms>
		response[i] = 0;			// clear the response bufffer
	}

	for(bindex=0; bindex<sizeof(btable); bindex++)		// try every baud
	{
		inindex = 0;
     3aa:	00 e0       	ldi	r16, 0x00	; 0
     3ac:	10 e0       	ldi	r17, 0x00	; 0
		UBRR2H = (btable[bindex][BMULT] >> 8);
		UBRR2L = (btable[bindex][BMULT] & 0xff);
		delay_ms(10);			// allow baud gen to settle

		for(j=0; j<sizeof(discovermsg)-1; j++)		// send discovery command to LCD
     3ae:	a1 2c       	mov	r10, r1
     3b0:	b1 2c       	mov	r11, r1
     3b2:	1f c0       	rjmp	.+62     	; 0x3f2 <findlcd+0xea>
		{
			USART_2_write(discovermsg[j]);	// connect
     3b4:	e1 e0       	ldi	r30, 0x01	; 1
     3b6:	f0 e0       	ldi	r31, 0x00	; 0
     3b8:	ec 0f       	add	r30, r28
     3ba:	fd 1f       	adc	r31, r29
     3bc:	ea 0d       	add	r30, r10
     3be:	fb 1d       	adc	r31, r11
     3c0:	80 81       	ld	r24, Z
     3c2:	89 d5       	rcall	.+2834   	; 0xed6 <USART_2_write>
			while(USART_2_is_rx_ready())
     3c4:	10 c0       	rjmp	.+32     	; 0x3e6 <findlcd+0xde>
			{
				if(inindex < sizeof(response))
     3c6:	00 38       	cpi	r16, 0x80	; 128
     3c8:	11 05       	cpc	r17, r1
     3ca:	68 f4       	brcc	.+26     	; 0x3e6 <findlcd+0xde>
				{
					response[inindex++] = USART_2_read();
     3cc:	78 01       	movw	r14, r16
     3ce:	2f ef       	ldi	r18, 0xFF	; 255
     3d0:	e2 1a       	sub	r14, r18
     3d2:	f2 0a       	sbc	r15, r18
     3d4:	67 d5       	rcall	.+2766   	; 0xea4 <USART_2_read>
     3d6:	e7 e1       	ldi	r30, 0x17	; 23
     3d8:	f0 e0       	ldi	r31, 0x00	; 0
     3da:	ec 0f       	add	r30, r28
     3dc:	fd 1f       	adc	r31, r29
     3de:	e0 0f       	add	r30, r16
     3e0:	f1 1f       	adc	r31, r17
     3e2:	80 83       	st	Z, r24
		delay_ms(10);			// allow baud gen to settle

		for(j=0; j<sizeof(discovermsg)-1; j++)		// send discovery command to LCD
		{
			USART_2_write(discovermsg[j]);	// connect
			while(USART_2_is_rx_ready())
     3e4:	87 01       	movw	r16, r14
     3e6:	57 d5       	rcall	.+2734   	; 0xe96 <USART_2_is_rx_ready>
     3e8:	81 11       	cpse	r24, r1
     3ea:	ed cf       	rjmp	.-38     	; 0x3c6 <findlcd+0xbe>
		inindex = 0;
		UBRR2H = (btable[bindex][BMULT] >> 8);
		UBRR2L = (btable[bindex][BMULT] & 0xff);
		delay_ms(10);			// allow baud gen to settle

		for(j=0; j<sizeof(discovermsg)-1; j++)		// send discovery command to LCD
     3ec:	3f ef       	ldi	r19, 0xFF	; 255
     3ee:	a3 1a       	sub	r10, r19
     3f0:	b3 0a       	sbc	r11, r19
     3f2:	4e e0       	ldi	r20, 0x0E	; 14
     3f4:	a4 16       	cp	r10, r20
     3f6:	b1 04       	cpc	r11, r1
     3f8:	e8 f2       	brcs	.-70     	; 0x3b4 <findlcd+0xac>
     3fa:	a1 2c       	mov	r10, r1
     3fc:	b1 2c       	mov	r11, r1
     3fe:	19 c0       	rjmp	.+50     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>

		for (wtim = 0; (wtim < 250); wtim++)		// hang around a bit and try to collect complete response
		{
			while(USART_2_is_rx_ready())
			{
				if(inindex < sizeof(response))
     400:	00 38       	cpi	r16, 0x80	; 128
     402:	11 05       	cpc	r17, r1
				{
					response[inindex++] = USART_2_read();
     404:	68 f4       	brcc	.+26     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     406:	78 01       	movw	r14, r16
     408:	5f ef       	ldi	r21, 0xFF	; 255
     40a:	e5 1a       	sub	r14, r21
     40c:	f5 0a       	sbc	r15, r21
     40e:	4a d5       	rcall	.+2708   	; 0xea4 <USART_2_read>
     410:	e7 e1       	ldi	r30, 0x17	; 23
     412:	f0 e0       	ldi	r31, 0x00	; 0
     414:	ec 0f       	add	r30, r28
     416:	fd 1f       	adc	r31, r29
     418:	e0 0f       	add	r30, r16
			}
		}

		for (wtim = 0; (wtim < 250); wtim++)		// hang around a bit and try to collect complete response
		{
			while(USART_2_is_rx_ready())
     41a:	f1 1f       	adc	r31, r17
     41c:	80 83       	st	Z, r24
     41e:	87 01       	movw	r16, r14
				if(inindex < sizeof(response))
				{
					response[inindex++] = USART_2_read();
				}
			}
			delay_ms(1);			// allow one char time at 2400 baud, 5ms is 64 chars at 115200
     420:	3a d5       	rcall	.+2676   	; 0xe96 <USART_2_is_rx_ready>
     422:	81 11       	cpse	r24, r1
     424:	ed cf       	rjmp	.-38     	; 0x400 <__LOCK_REGION_LENGTH__>
     426:	81 e0       	ldi	r24, 0x01	; 1
					response[inindex++] = USART_2_read();
				}
			}
		}

		for (wtim = 0; (wtim < 250); wtim++)		// hang around a bit and try to collect complete response
     428:	90 e0       	ldi	r25, 0x00	; 0
     42a:	dd de       	rcall	.-582    	; 0x1e6 <delay_ms>
     42c:	8f ef       	ldi	r24, 0xFF	; 255
     42e:	a8 1a       	sub	r10, r24
     430:	b8 0a       	sbc	r11, r24
     432:	2a ef       	ldi	r18, 0xFA	; 250
     434:	a2 16       	cp	r10, r18
				}
			}
			delay_ms(1);			// allow one char time at 2400 baud, 5ms is 64 chars at 115200
		}

		if (inindex)		// we *have* received something
     436:	b1 04       	cpc	r11, r1
     438:	9c f3       	brlt	.-26     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     43a:	01 15       	cp	r16, r1
     43c:	11 05       	cpc	r17, r1
     43e:	09 f0       	breq	.+2      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
		{
			for(rindex=0; rindex<inindex; rindex++)		// the length of the rx'd string
			{
				if (strncmp(&response[rindex],foundmsg,sizeof(foundmsg-1)) == 0)		// look for the start
     440:	6a c0       	rjmp	.+212    	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
     442:	6f c0       	rjmp	.+222    	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
     444:	42 e0       	ldi	r20, 0x02	; 2
     446:	50 e0       	ldi	r21, 0x00	; 0
     448:	be 01       	movw	r22, r28
     44a:	60 5f       	subi	r22, 0xF0	; 240
     44c:	7f 4f       	sbci	r23, 0xFF	; 255
     44e:	87 e1       	ldi	r24, 0x17	; 23
     450:	90 e0       	ldi	r25, 0x00	; 0
     452:	8c 0f       	add	r24, r28
     454:	9d 1f       	adc	r25, r29
     456:	8e 0d       	add	r24, r14
     458:	9f 1d       	adc	r25, r15
     45a:	38 d6       	rcall	.+3184   	; 0x10cc <strncmp>
     45c:	89 2b       	or	r24, r25
     45e:	09 f4       	brne	.+2      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
				{
					for(i=rindex; i<inindex; i++)		// found start, now look for terminator bytes
					{
						if ((response[i] == 0xff) && (response[i+1] == 0xff) && (response[i+2] == 0xff))	// found response terminator
     460:	51 c0       	rjmp	.+162    	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
     462:	55 c0       	rjmp	.+170    	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
     464:	e7 e1       	ldi	r30, 0x17	; 23
     466:	f0 e0       	ldi	r31, 0x00	; 0
     468:	ec 0f       	add	r30, r28
     46a:	fd 1f       	adc	r31, r29
     46c:	e8 0f       	add	r30, r24
     46e:	f9 1f       	adc	r31, r25
     470:	20 81       	ld	r18, Z
     472:	2f 3f       	cpi	r18, 0xFF	; 255
     474:	09 f0       	breq	.+2      	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
     476:	44 c0       	rjmp	.+136    	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
     478:	fc 01       	movw	r30, r24
     47a:	31 96       	adiw	r30, 0x01	; 1
     47c:	47 e1       	ldi	r20, 0x17	; 23
     47e:	50 e0       	ldi	r21, 0x00	; 0
     480:	4c 0f       	add	r20, r28
     482:	5d 1f       	adc	r21, r29
     484:	e4 0f       	add	r30, r20
     486:	f5 1f       	adc	r31, r21
     488:	20 81       	ld	r18, Z
     48a:	2f 3f       	cpi	r18, 0xFF	; 255
     48c:	c9 f5       	brne	.+114    	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
     48e:	9c 01       	movw	r18, r24
     490:	2e 5f       	subi	r18, 0xFE	; 254
     492:	3f 4f       	sbci	r19, 0xFF	; 255
     494:	fa 01       	movw	r30, r20
     496:	e2 0f       	add	r30, r18
     498:	f3 1f       	adc	r31, r19
     49a:	40 81       	ld	r20, Z
						{
							if(i+2-rindex > sizeof(lcdsig)-1)		// will fit in the buffer
     49c:	4f 3f       	cpi	r20, 0xFF	; 255
     49e:	81 f5       	brne	.+96     	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
     4a0:	2e 19       	sub	r18, r14
     4a2:	3f 09       	sbc	r19, r15
							{
								printf("LCD response too long\n\r");
     4a4:	20 35       	cpi	r18, 0x50	; 80
     4a6:	31 05       	cpc	r19, r1
     4a8:	50 f0       	brcs	.+20     	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
     4aa:	8d e1       	ldi	r24, 0x1D	; 29
     4ac:	92 e0       	ldi	r25, 0x02	; 2
     4ae:	9f 93       	push	r25
								return(-1);
     4b0:	8f 93       	push	r24
     4b2:	1a d6       	rcall	.+3124   	; 0x10e8 <printf>
     4b4:	0f 90       	pop	r0
     4b6:	0f 90       	pop	r0
     4b8:	8f ef       	ldi	r24, 0xFF	; 255
							}
							else
							{
								int k;
								j = 0;
								k = i + 3 - rindex;
     4ba:	9f ef       	ldi	r25, 0xFF	; 255
     4bc:	3c c0       	rjmp	.+120    	; 0x536 <__LOCK_REGION_LENGTH__+0x136>
     4be:	03 96       	adiw	r24, 0x03	; 3
								return(-1);
							}
							else
							{
								int k;
								j = 0;
     4c0:	8e 19       	sub	r24, r14
     4c2:	9f 09       	sbc	r25, r15
								k = i + 3 - rindex;
								//		the expression evals wrong??			while (j < (i+3-rindex))
								while (j < k)
     4c4:	20 e0       	ldi	r18, 0x00	; 0
								{
									lcdsig[j++] = response[rindex++];		// copy response string into global
     4c6:	30 e0       	ldi	r19, 0x00	; 0
     4c8:	11 c0       	rjmp	.+34     	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
     4ca:	e7 e1       	ldi	r30, 0x17	; 23
     4cc:	f0 e0       	ldi	r31, 0x00	; 0
     4ce:	ec 0f       	add	r30, r28
     4d0:	fd 1f       	adc	r31, r29
     4d2:	ee 0d       	add	r30, r14
     4d4:	ff 1d       	adc	r31, r15
     4d6:	40 81       	ld	r20, Z
     4d8:	f9 01       	movw	r30, r18
     4da:	e4 53       	subi	r30, 0x34	; 52
     4dc:	fd 4f       	sbci	r31, 0xFD	; 253
     4de:	40 83       	st	Z, r20
     4e0:	a7 01       	movw	r20, r14
     4e2:	4f 5f       	subi	r20, 0xFF	; 255
     4e4:	5f 4f       	sbci	r21, 0xFF	; 255
     4e6:	7a 01       	movw	r14, r20
							{
								int k;
								j = 0;
								k = i + 3 - rindex;
								//		the expression evals wrong??			while (j < (i+3-rindex))
								while (j < k)
     4e8:	2f 5f       	subi	r18, 0xFF	; 255
     4ea:	3f 4f       	sbci	r19, 0xFF	; 255
     4ec:	28 17       	cp	r18, r24
								{
									lcdsig[j++] = response[rindex++];		// copy response string into global
								}
								lcdsig[j] = '\0';		// add our null terminator
     4ee:	39 07       	cpc	r19, r25
     4f0:	64 f3       	brlt	.-40     	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
     4f2:	f9 01       	movw	r30, r18
     4f4:	e4 53       	subi	r30, 0x34	; 52
								return(bindex);
     4f6:	fd 4f       	sbci	r31, 0xFD	; 253
     4f8:	10 82       	st	Z, r1
     4fa:	8c 2d       	mov	r24, r12
		{
			for(rindex=0; rindex<inindex; rindex++)		// the length of the rx'd string
			{
				if (strncmp(&response[rindex],foundmsg,sizeof(foundmsg-1)) == 0)		// look for the start
				{
					for(i=rindex; i<inindex; i++)		// found start, now look for terminator bytes
     4fc:	9d 2d       	mov	r25, r13
     4fe:	1b c0       	rjmp	.+54     	; 0x536 <__LOCK_REGION_LENGTH__+0x136>
     500:	01 96       	adiw	r24, 0x01	; 1
     502:	01 c0       	rjmp	.+2      	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
     504:	c7 01       	movw	r24, r14
     506:	80 17       	cp	r24, r16
     508:	91 07       	cpc	r25, r17
			delay_ms(1);			// allow one char time at 2400 baud, 5ms is 64 chars at 115200
		}

		if (inindex)		// we *have* received something
		{
			for(rindex=0; rindex<inindex; rindex++)		// the length of the rx'd string
     50a:	0c f4       	brge	.+2      	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
     50c:	ab cf       	rjmp	.-170    	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
     50e:	5f ef       	ldi	r21, 0xFF	; 255
     510:	e5 1a       	sub	r14, r21
     512:	f5 0a       	sbc	r15, r21
     514:	02 c0       	rjmp	.+4      	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
     516:	e1 2c       	mov	r14, r1
     518:	f1 2c       	mov	r15, r1
     51a:	e0 16       	cp	r14, r16
     51c:	f1 06       	cpc	r15, r17
	for(i=0; i<sizeof(response); i++)
	{
		response[i] = 0;			// clear the response bufffer
	}

	for(bindex=0; bindex<sizeof(btable); bindex++)		// try every baud
     51e:	0c f4       	brge	.+2      	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
     520:	91 cf       	rjmp	.-222    	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     522:	8f ef       	ldi	r24, 0xFF	; 255
     524:	c8 1a       	sub	r12, r24
     526:	d8 0a       	sbc	r13, r24
     528:	2c e1       	ldi	r18, 0x1C	; 28
     52a:	c2 16       	cp	r12, r18
     52c:	d1 04       	cpc	r13, r1
				}

			}
		}
	}
	return(-1);
     52e:	08 f4       	brcc	.+2      	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
     530:	2c cf       	rjmp	.-424    	; 0x38a <findlcd+0x82>
}
     532:	8f ef       	ldi	r24, 0xFF	; 255
     534:	9f ef       	ldi	r25, 0xFF	; 255
     536:	ca 56       	subi	r28, 0x6A	; 106
     538:	df 4f       	sbci	r29, 0xFF	; 255
     53a:	0f b6       	in	r0, 0x3f	; 63
     53c:	f8 94       	cli
     53e:	de bf       	out	0x3e, r29	; 62
     540:	0f be       	out	0x3f, r0	; 63
     542:	cd bf       	out	0x3d, r28	; 61
     544:	df 91       	pop	r29
     546:	cf 91       	pop	r28
     548:	1f 91       	pop	r17
     54a:	0f 91       	pop	r16
     54c:	ff 90       	pop	r15
     54e:	ef 90       	pop	r14
     550:	df 90       	pop	r13
     552:	cf 90       	pop	r12
     554:	bf 90       	pop	r11
     556:	af 90       	pop	r10
     558:	08 95       	ret

0000055a <getconnect>:


// see if Nextion editor connects
int getconnect(char buf[], int bsize)
{
     55a:	6f 92       	push	r6
     55c:	7f 92       	push	r7
     55e:	8f 92       	push	r8
     560:	9f 92       	push	r9
     562:	af 92       	push	r10
     564:	bf 92       	push	r11
     566:	cf 92       	push	r12
     568:	df 92       	push	r13
     56a:	ef 92       	push	r14
     56c:	ff 92       	push	r15
     56e:	0f 93       	push	r16
     570:	1f 93       	push	r17
     572:	cf 93       	push	r28
     574:	df 93       	push	r29
     576:	cd b7       	in	r28, 0x3d	; 61
     578:	de b7       	in	r29, 0x3e	; 62
     57a:	2c 97       	sbiw	r28, 0x0c	; 12
     57c:	0f b6       	in	r0, 0x3f	; 63
     57e:	f8 94       	cli
     580:	de bf       	out	0x3e, r29	; 62
     582:	0f be       	out	0x3f, r0	; 63
     584:	cd bf       	out	0x3d, r28	; 61
     586:	6c 01       	movw	r12, r24
     588:	7b 01       	movw	r14, r22
	int inindex = 0, mindex = 0;
	int wtim, i;
	volatile char ch;
	//	volatile char buf[128];
	const char discovermsg[]="connect\xff\xff\xff";		// expected discovery message
     58a:	8b e0       	ldi	r24, 0x0B	; 11
     58c:	ec e3       	ldi	r30, 0x3C	; 60
     58e:	f2 e0       	ldi	r31, 0x02	; 2
     590:	de 01       	movw	r26, r28
     592:	12 96       	adiw	r26, 0x02	; 2
     594:	01 90       	ld	r0, Z+
     596:	0d 92       	st	X+, r0
     598:	8a 95       	dec	r24
     59a:	e1 f7       	brne	.-8      	; 0x594 <getconnect+0x3a>

	for(i=0; i<bsize; buf[i++]='\0');
     59c:	00 e0       	ldi	r16, 0x00	; 0
     59e:	10 e0       	ldi	r17, 0x00	; 0
     5a0:	06 c0       	rjmp	.+12     	; 0x5ae <getconnect+0x54>
     5a2:	f6 01       	movw	r30, r12
     5a4:	e0 0f       	add	r30, r16
     5a6:	f1 1f       	adc	r31, r17
     5a8:	10 82       	st	Z, r1
     5aa:	0f 5f       	subi	r16, 0xFF	; 255
     5ac:	1f 4f       	sbci	r17, 0xFF	; 255
     5ae:	0e 15       	cp	r16, r14
     5b0:	1f 05       	cpc	r17, r15
     5b2:	bc f3       	brlt	.-18     	; 0x5a2 <getconnect+0x48>
     5b4:	61 2c       	mov	r6, r1
     5b6:	71 2c       	mov	r7, r1
     5b8:	81 2c       	mov	r8, r1
     5ba:	91 2c       	mov	r9, r1
     5bc:	a1 2c       	mov	r10, r1
     5be:	b1 2c       	mov	r11, r1
     5c0:	3f c0       	rjmp	.+126    	; 0x640 <getconnect+0xe6>
	for (wtim = 0; (wtim < 5000); wtim++)		// hang around waiting for some input
	{
		while(USART_0_is_rx_ready())
		{
			if(inindex < bsize)
     5c2:	ae 14       	cp	r10, r14
     5c4:	bf 04       	cpc	r11, r15
			{
				ch = USART_0_read();
     5c6:	34 f5       	brge	.+76     	; 0x614 <getconnect+0xba>
     5c8:	3e d3       	rcall	.+1660   	; 0xc46 <USART_0_read>
				buf[inindex++] = ch;
     5ca:	89 83       	std	Y+1, r24	; 0x01
     5cc:	95 01       	movw	r18, r10
     5ce:	2f 5f       	subi	r18, 0xFF	; 255
     5d0:	3f 4f       	sbci	r19, 0xFF	; 255
     5d2:	f6 01       	movw	r30, r12
     5d4:	ea 0d       	add	r30, r10
     5d6:	fb 1d       	adc	r31, r11
     5d8:	89 81       	ldd	r24, Y+1	; 0x01
				if (discovermsg[mindex] == ch)
     5da:	80 83       	st	Z, r24
     5dc:	e2 e0       	ldi	r30, 0x02	; 2
     5de:	f0 e0       	ldi	r31, 0x00	; 0
     5e0:	ec 0f       	add	r30, r28
     5e2:	fd 1f       	adc	r31, r29
     5e4:	e8 0d       	add	r30, r8
     5e6:	f9 1d       	adc	r31, r9
     5e8:	90 81       	ld	r25, Z
     5ea:	89 81       	ldd	r24, Y+1	; 0x01
     5ec:	98 13       	cpse	r25, r24
				{
					mindex++;
     5ee:	1a c0       	rjmp	.+52     	; 0x624 <getconnect+0xca>
     5f0:	8f ef       	ldi	r24, 0xFF	; 255
     5f2:	88 1a       	sub	r8, r24
					if (mindex == sizeof(discovermsg))	// all matched
     5f4:	98 0a       	sbc	r9, r24
     5f6:	8b e0       	ldi	r24, 0x0B	; 11
     5f8:	88 16       	cp	r8, r24
     5fa:	91 04       	cpc	r9, r1
					{
						ch = i & 0xff;
     5fc:	b9 f4       	brne	.+46     	; 0x62c <getconnect+0xd2>
						return(1);
     5fe:	09 83       	std	Y+1, r16	; 0x01
     600:	81 e0       	ldi	r24, 0x01	; 1
     602:	90 e0       	ldi	r25, 0x00	; 0
			}
			else
			{
				// input buffer full
				inindex = 0;
				for(i=0; i<bsize; buf[i++]='\0');
     604:	24 c0       	rjmp	.+72     	; 0x64e <getconnect+0xf4>
     606:	f6 01       	movw	r30, r12
     608:	e0 0f       	add	r30, r16
     60a:	f1 1f       	adc	r31, r17
     60c:	10 82       	st	Z, r1
     60e:	0f 5f       	subi	r16, 0xFF	; 255
     610:	1f 4f       	sbci	r17, 0xFF	; 255
     612:	02 c0       	rjmp	.+4      	; 0x618 <getconnect+0xbe>
     614:	00 e0       	ldi	r16, 0x00	; 0
     616:	10 e0       	ldi	r17, 0x00	; 0
     618:	0e 15       	cp	r16, r14
     61a:	1f 05       	cpc	r17, r15
				}
			}
			else
			{
				// input buffer full
				inindex = 0;
     61c:	a4 f3       	brlt	.-24     	; 0x606 <getconnect+0xac>
     61e:	a1 2c       	mov	r10, r1
     620:	b1 2c       	mov	r11, r1
		while(USART_0_is_rx_ready())
		{
			if(inindex < bsize)
			{
				ch = USART_0_read();
				buf[inindex++] = ch;
     622:	05 c0       	rjmp	.+10     	; 0x62e <getconnect+0xd4>
						return(1);
					}
				}
				else
				{
					mindex = 0;		// reset the search
     624:	59 01       	movw	r10, r18
     626:	81 2c       	mov	r8, r1
	const char discovermsg[]="connect\xff\xff\xff";		// expected discovery message

	for(i=0; i<bsize; buf[i++]='\0');
	for (wtim = 0; (wtim < 5000); wtim++)		// hang around waiting for some input
	{
		while(USART_0_is_rx_ready())
     628:	91 2c       	mov	r9, r1
     62a:	01 c0       	rjmp	.+2      	; 0x62e <getconnect+0xd4>
     62c:	59 01       	movw	r10, r18
				// input buffer full
				inindex = 0;
				for(i=0; i<bsize; buf[i++]='\0');
			}
		}
		delay_ms(1);
     62e:	04 d3       	rcall	.+1544   	; 0xc38 <USART_0_is_rx_ready>
     630:	81 11       	cpse	r24, r1
     632:	c7 cf       	rjmp	.-114    	; 0x5c2 <getconnect+0x68>
	volatile char ch;
	//	volatile char buf[128];
	const char discovermsg[]="connect\xff\xff\xff";		// expected discovery message

	for(i=0; i<bsize; buf[i++]='\0');
	for (wtim = 0; (wtim < 5000); wtim++)		// hang around waiting for some input
     634:	81 e0       	ldi	r24, 0x01	; 1
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	d6 dd       	rcall	.-1108   	; 0x1e6 <delay_ms>
     63a:	8f ef       	ldi	r24, 0xFF	; 255
     63c:	68 1a       	sub	r6, r24
     63e:	78 0a       	sbc	r7, r24
     640:	88 e8       	ldi	r24, 0x88	; 136
     642:	68 16       	cp	r6, r24
				for(i=0; i<bsize; buf[i++]='\0');
			}
		}
		delay_ms(1);
	}
	return(-1);
     644:	83 e1       	ldi	r24, 0x13	; 19
     646:	78 06       	cpc	r7, r24
}
     648:	94 f3       	brlt	.-28     	; 0x62e <getconnect+0xd4>
     64a:	8f ef       	ldi	r24, 0xFF	; 255
     64c:	9f ef       	ldi	r25, 0xFF	; 255
     64e:	2c 96       	adiw	r28, 0x0c	; 12
     650:	0f b6       	in	r0, 0x3f	; 63
     652:	f8 94       	cli
     654:	de bf       	out	0x3e, r29	; 62
     656:	0f be       	out	0x3f, r0	; 63
     658:	cd bf       	out	0x3d, r28	; 61
     65a:	df 91       	pop	r29
     65c:	cf 91       	pop	r28
     65e:	1f 91       	pop	r17
     660:	0f 91       	pop	r16
     662:	ff 90       	pop	r15
     664:	ef 90       	pop	r14
     666:	df 90       	pop	r13
     668:	cf 90       	pop	r12
     66a:	bf 90       	pop	r11
     66c:	af 90       	pop	r10
     66e:	9f 90       	pop	r9
     670:	8f 90       	pop	r8
     672:	7f 90       	pop	r7
     674:	6f 90       	pop	r6
     676:	08 95       	ret

00000678 <conntoed>:

// wait for connect from Nextion Editor and respond
int conntoed()
{
     678:	cf 93       	push	r28
     67a:	df 93       	push	r29
     67c:	cd b7       	in	r28, 0x3d	; 61
     67e:	de b7       	in	r29, 0x3e	; 62
     680:	c6 58       	subi	r28, 0x86	; 134
     682:	d1 09       	sbc	r29, r1
     684:	0f b6       	in	r0, 0x3f	; 63
     686:	f8 94       	cli
     688:	de bf       	out	0x3e, r29	; 62
     68a:	0f be       	out	0x3f, r0	; 63
     68c:	cd bf       	out	0x3d, r28	; 61
	volatile int i;
	char ch;
	char inbuf[128];
	const char nulresp[]={0x1a,0xff,0xff,0xff};
     68e:	8a e1       	ldi	r24, 0x1A	; 26
     690:	cd 57       	subi	r28, 0x7D	; 125
     692:	df 4f       	sbci	r29, 0xFF	; 255
     694:	88 83       	st	Y, r24
     696:	c3 58       	subi	r28, 0x83	; 131
     698:	d0 40       	sbci	r29, 0x00	; 0
     69a:	8f ef       	ldi	r24, 0xFF	; 255
     69c:	cc 57       	subi	r28, 0x7C	; 124
     69e:	df 4f       	sbci	r29, 0xFF	; 255
     6a0:	88 83       	st	Y, r24
     6a2:	c4 58       	subi	r28, 0x84	; 132
     6a4:	d0 40       	sbci	r29, 0x00	; 0
     6a6:	cb 57       	subi	r28, 0x7B	; 123
     6a8:	df 4f       	sbci	r29, 0xFF	; 255
     6aa:	88 83       	st	Y, r24
     6ac:	c5 58       	subi	r28, 0x85	; 133
     6ae:	d0 40       	sbci	r29, 0x00	; 0
     6b0:	ca 57       	subi	r28, 0x7A	; 122
     6b2:	df 4f       	sbci	r29, 0xFF	; 255
     6b4:	88 83       	st	Y, r24
     6b6:	c6 58       	subi	r28, 0x86	; 134
     6b8:	d0 40       	sbci	r29, 0x00	; 0

	i = getconnect(inbuf,sizeof(inbuf));
     6ba:	60 e8       	ldi	r22, 0x80	; 128
     6bc:	70 e0       	ldi	r23, 0x00	; 0
     6be:	ce 01       	movw	r24, r28
     6c0:	03 96       	adiw	r24, 0x03	; 3
     6c2:	4b df       	rcall	.-362    	; 0x55a <getconnect>
     6c4:	9a 83       	std	Y+2, r25	; 0x02
     6c6:	89 83       	std	Y+1, r24	; 0x01
	if (i < 0)
     6c8:	89 81       	ldd	r24, Y+1	; 0x01
     6ca:	9a 81       	ldd	r25, Y+2	; 0x02
     6cc:	99 23       	and	r25, r25
     6ce:	9c f1       	brlt	.+102    	; 0x736 <conntoed+0xbe>
		return(-1);
	}
	// Pc has connected, now send LCD signature response


	for(i=0; i<4; i++)
     6d0:	1a 82       	std	Y+2, r1	; 0x02
     6d2:	19 82       	std	Y+1, r1	; 0x01
     6d4:	19 c0       	rjmp	.+50     	; 0x708 <conntoed+0x90>
	{
		USART_0_write(nulresp[i]);
     6d6:	e9 81       	ldd	r30, Y+1	; 0x01
     6d8:	fa 81       	ldd	r31, Y+2	; 0x02
     6da:	83 e8       	ldi	r24, 0x83	; 131
     6dc:	90 e0       	ldi	r25, 0x00	; 0
     6de:	8c 0f       	add	r24, r28
     6e0:	9d 1f       	adc	r25, r29
     6e2:	e8 0f       	add	r30, r24
     6e4:	f9 1f       	adc	r31, r25
     6e6:	80 81       	ld	r24, Z
     6e8:	c7 d2       	rcall	.+1422   	; 0xc78 <USART_0_write>
		USART_3_write(nulresp[i]);
     6ea:	e9 81       	ldd	r30, Y+1	; 0x01
     6ec:	fa 81       	ldd	r31, Y+2	; 0x02
     6ee:	83 e8       	ldi	r24, 0x83	; 131
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	8c 0f       	add	r24, r28
     6f4:	9d 1f       	adc	r25, r29
     6f6:	e8 0f       	add	r30, r24
     6f8:	f9 1f       	adc	r31, r25
     6fa:	80 81       	ld	r24, Z
     6fc:	83 d4       	rcall	.+2310   	; 0x1004 <USART_3_write>
		return(-1);
	}
	// Pc has connected, now send LCD signature response


	for(i=0; i<4; i++)
     6fe:	89 81       	ldd	r24, Y+1	; 0x01
     700:	9a 81       	ldd	r25, Y+2	; 0x02
     702:	01 96       	adiw	r24, 0x01	; 1
     704:	9a 83       	std	Y+2, r25	; 0x02
     706:	89 83       	std	Y+1, r24	; 0x01
     708:	89 81       	ldd	r24, Y+1	; 0x01
     70a:	9a 81       	ldd	r25, Y+2	; 0x02
     70c:	04 97       	sbiw	r24, 0x04	; 4
     70e:	1c f3       	brlt	.-58     	; 0x6d6 <conntoed+0x5e>
	{
		USART_0_write(nulresp[i]);
		USART_3_write(nulresp[i]);
	}

	i = 0;
     710:	1a 82       	std	Y+2, r1	; 0x02
     712:	19 82       	std	Y+1, r1	; 0x01
	while(lcdsig[i])
     714:	06 c0       	rjmp	.+12     	; 0x722 <conntoed+0xaa>
	{
		USART_0_write(lcdsig[i]);
     716:	e9 81       	ldd	r30, Y+1	; 0x01
     718:	fa 81       	ldd	r31, Y+2	; 0x02
     71a:	e4 53       	subi	r30, 0x34	; 52
     71c:	fd 4f       	sbci	r31, 0xFD	; 253
     71e:	80 81       	ld	r24, Z
     720:	ab d2       	rcall	.+1366   	; 0xc78 <USART_0_write>
		USART_0_write(nulresp[i]);
		USART_3_write(nulresp[i]);
	}

	i = 0;
	while(lcdsig[i])
     722:	e9 81       	ldd	r30, Y+1	; 0x01
     724:	fa 81       	ldd	r31, Y+2	; 0x02
     726:	e4 53       	subi	r30, 0x34	; 52
     728:	fd 4f       	sbci	r31, 0xFD	; 253
     72a:	80 81       	ld	r24, Z
     72c:	81 11       	cpse	r24, r1
     72e:	f3 cf       	rjmp	.-26     	; 0x716 <conntoed+0x9e>
	{
		USART_0_write(lcdsig[i]);
		//		USART_3_write(lcdsig[i++]);
	}
	return(0);
     730:	80 e0       	ldi	r24, 0x00	; 0
     732:	90 e0       	ldi	r25, 0x00	; 0
     734:	02 c0       	rjmp	.+4      	; 0x73a <conntoed+0xc2>
	const char nulresp[]={0x1a,0xff,0xff,0xff};

	i = getconnect(inbuf,sizeof(inbuf));
	if (i < 0)
	{
		return(-1);
     736:	8f ef       	ldi	r24, 0xFF	; 255
     738:	9f ef       	ldi	r25, 0xFF	; 255
	{
		USART_0_write(lcdsig[i]);
		//		USART_3_write(lcdsig[i++]);
	}
	return(0);
}
     73a:	ca 57       	subi	r28, 0x7A	; 122
     73c:	df 4f       	sbci	r29, 0xFF	; 255
     73e:	0f b6       	in	r0, 0x3f	; 63
     740:	f8 94       	cli
     742:	de bf       	out	0x3e, r29	; 62
     744:	0f be       	out	0x3f, r0	; 63
     746:	cd bf       	out	0x3d, r28	; 61
     748:	df 91       	pop	r29
     74a:	cf 91       	pop	r28
     74c:	08 95       	ret

0000074e <getupcmd>:


// wait for and parse the baud rate from the upload command
int getupcmd(char* buf, int bsize)
{
     74e:	3f 92       	push	r3
     750:	4f 92       	push	r4
     752:	5f 92       	push	r5
     754:	6f 92       	push	r6
     756:	7f 92       	push	r7
     758:	8f 92       	push	r8
     75a:	9f 92       	push	r9
     75c:	af 92       	push	r10
     75e:	bf 92       	push	r11
     760:	cf 92       	push	r12
     762:	df 92       	push	r13
     764:	ef 92       	push	r14
     766:	ff 92       	push	r15
     768:	0f 93       	push	r16
     76a:	1f 93       	push	r17
     76c:	cf 93       	push	r28
     76e:	df 93       	push	r29
     770:	cd b7       	in	r28, 0x3d	; 61
     772:	de b7       	in	r29, 0x3e	; 62
     774:	2a 97       	sbiw	r28, 0x0a	; 10
     776:	0f b6       	in	r0, 0x3f	; 63
     778:	f8 94       	cli
     77a:	de bf       	out	0x3e, r29	; 62
     77c:	0f be       	out	0x3f, r0	; 63
     77e:	cd bf       	out	0x3d, r28	; 61
     780:	7c 01       	movw	r14, r24
     782:	8b 01       	movw	r16, r22
	int inindex = 0, mindex = 0;
	int wtim, i, termcnt;
	char ch;
	bool validcmd = false;

	const char uploadmsg[]="whmi-wri ";		// expected upload command
     784:	8a e0       	ldi	r24, 0x0A	; 10
     786:	e7 e4       	ldi	r30, 0x47	; 71
     788:	f2 e0       	ldi	r31, 0x02	; 2
     78a:	de 01       	movw	r26, r28
     78c:	11 96       	adiw	r26, 0x01	; 1
     78e:	01 90       	ld	r0, Z+
     790:	0d 92       	st	X+, r0
     792:	8a 95       	dec	r24
     794:	e1 f7       	brne	.-8      	; 0x78e <getupcmd+0x40>

	for(i=0; i<bsize; buf[i++]='\0');
     796:	80 e0       	ldi	r24, 0x00	; 0
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	05 c0       	rjmp	.+10     	; 0x7a6 <getupcmd+0x58>
     79c:	f7 01       	movw	r30, r14
     79e:	e8 0f       	add	r30, r24
     7a0:	f9 1f       	adc	r31, r25
     7a2:	10 82       	st	Z, r1
     7a4:	01 96       	adiw	r24, 0x01	; 1
     7a6:	80 17       	cp	r24, r16
     7a8:	91 07       	cpc	r25, r17
     7aa:	c4 f3       	brlt	.-16     	; 0x79c <getupcmd+0x4e>
     7ac:	31 2c       	mov	r3, r1
     7ae:	a1 2c       	mov	r10, r1
     7b0:	b1 2c       	mov	r11, r1
     7b2:	41 2c       	mov	r4, r1
     7b4:	51 2c       	mov	r5, r1
     7b6:	61 2c       	mov	r6, r1
     7b8:	71 2c       	mov	r7, r1
     7ba:	c1 2c       	mov	r12, r1
     7bc:	d1 2c       	mov	r13, r1
     7be:	50 c0       	rjmp	.+160    	; 0x860 <getupcmd+0x112>
	termcnt = 0;
	for (wtim = 0; (wtim < 5000); wtim++)		// hang around waiting for some input
	{
		while(USART_0_is_rx_ready())
		{
			if(inindex < bsize)		// check not overflowed our buffer
     7c0:	c0 16       	cp	r12, r16
     7c2:	d1 06       	cpc	r13, r17
			{
				ch = USART_0_read();
     7c4:	7c f5       	brge	.+94     	; 0x824 <getupcmd+0xd6>
				buf[inindex++] = ch;
     7c6:	3f d2       	rcall	.+1150   	; 0xc46 <USART_0_read>
     7c8:	46 01       	movw	r8, r12
     7ca:	9f ef       	ldi	r25, 0xFF	; 255
     7cc:	89 1a       	sub	r8, r25
     7ce:	99 0a       	sbc	r9, r25
     7d0:	f7 01       	movw	r30, r14
     7d2:	ec 0d       	add	r30, r12
     7d4:	fd 1d       	adc	r31, r13
				if (!(validcmd)) {
     7d6:	80 83       	st	Z, r24
     7d8:	31 10       	cpse	r3, r1
					if (uploadmsg[mindex] == ch)			// compare this char
     7da:	13 c0       	rjmp	.+38     	; 0x802 <getupcmd+0xb4>
     7dc:	e1 e0       	ldi	r30, 0x01	; 1
     7de:	f0 e0       	ldi	r31, 0x00	; 0
     7e0:	ec 0f       	add	r30, r28
     7e2:	fd 1f       	adc	r31, r29
     7e4:	e6 0d       	add	r30, r6
     7e6:	f7 1d       	adc	r31, r7
     7e8:	90 81       	ld	r25, Z
					{
						USART_3_write(ch);
     7ea:	89 13       	cpse	r24, r25
     7ec:	26 c0       	rjmp	.+76     	; 0x83a <getupcmd+0xec>
						mindex++;
     7ee:	0a d4       	rcall	.+2068   	; 0x1004 <USART_3_write>
     7f0:	8f ef       	ldi	r24, 0xFF	; 255
     7f2:	68 1a       	sub	r6, r24
						if (mindex == sizeof(uploadmsg))	// all matched
     7f4:	78 0a       	sbc	r7, r24
     7f6:	9a e0       	ldi	r25, 0x0A	; 10
     7f8:	69 16       	cp	r6, r25
     7fa:	71 04       	cpc	r7, r1
		while(USART_0_is_rx_ready())
		{
			if(inindex < bsize)		// check not overflowed our buffer
			{
				ch = USART_0_read();
				buf[inindex++] = ch;
     7fc:	19 f1       	breq	.+70     	; 0x844 <getupcmd+0xf6>
     7fe:	64 01       	movw	r12, r8
					}
				}
				else
				{
					// valid upload command - we need to get the params and find the end
					if (ch == 0xff)
     800:	26 c0       	rjmp	.+76     	; 0x84e <getupcmd+0x100>
     802:	8f 3f       	cpi	r24, 0xFF	; 255
					{
						termcnt++;
     804:	19 f5       	brne	.+70     	; 0x84c <getupcmd+0xfe>
     806:	8f ef       	ldi	r24, 0xFF	; 255
     808:	a8 1a       	sub	r10, r24
						if (termcnt == 3)
     80a:	b8 0a       	sbc	r11, r24
     80c:	93 e0       	ldi	r25, 0x03	; 3
     80e:	a9 16       	cp	r10, r25
     810:	b1 04       	cpc	r11, r1
		while(USART_0_is_rx_ready())
		{
			if(inindex < bsize)		// check not overflowed our buffer
			{
				ch = USART_0_read();
				buf[inindex++] = ch;
     812:	71 f1       	breq	.+92     	; 0x870 <getupcmd+0x122>
     814:	64 01       	movw	r12, r8
			{
				// input buffer full
				inindex = 0;
				validcmd = false;
				termcnt = 0;
				for(i=0; i<bsize; buf[i++]='\0');
     816:	1b c0       	rjmp	.+54     	; 0x84e <getupcmd+0x100>
     818:	f7 01       	movw	r30, r14
     81a:	e8 0f       	add	r30, r24
     81c:	f9 1f       	adc	r31, r25
     81e:	10 82       	st	Z, r1
     820:	01 96       	adiw	r24, 0x01	; 1
     822:	02 c0       	rjmp	.+4      	; 0x828 <getupcmd+0xda>
     824:	80 e0       	ldi	r24, 0x00	; 0
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	80 17       	cp	r24, r16
     82a:	91 07       	cpc	r25, r17
			}
			else
			{
				// input buffer full
				inindex = 0;
				validcmd = false;
     82c:	ac f3       	brlt	.-22     	; 0x818 <getupcmd+0xca>
				termcnt = 0;
     82e:	31 2c       	mov	r3, r1
     830:	a1 2c       	mov	r10, r1
				}
			}
			else
			{
				// input buffer full
				inindex = 0;
     832:	b1 2c       	mov	r11, r1
     834:	c1 2c       	mov	r12, r1
     836:	d1 2c       	mov	r13, r1
						}
					}
					else
					{
						inindex = 0;	// no need to keep that input
						mindex = 0;		// reset the search
     838:	0a c0       	rjmp	.+20     	; 0x84e <getupcmd+0x100>
     83a:	61 2c       	mov	r6, r1
							validcmd = true;
						}
					}
					else
					{
						inindex = 0;	// no need to keep that input
     83c:	71 2c       	mov	r7, r1
     83e:	c1 2c       	mov	r12, r1
     840:	d1 2c       	mov	r13, r1
		while(USART_0_is_rx_ready())
		{
			if(inindex < bsize)		// check not overflowed our buffer
			{
				ch = USART_0_read();
				buf[inindex++] = ch;
     842:	05 c0       	rjmp	.+10     	; 0x84e <getupcmd+0x100>
					{
						USART_3_write(ch);
						mindex++;
						if (mindex == sizeof(uploadmsg))	// all matched
						{
							validcmd = true;
     844:	64 01       	movw	r12, r8
     846:	33 24       	eor	r3, r3
		while(USART_0_is_rx_ready())
		{
			if(inindex < bsize)		// check not overflowed our buffer
			{
				ch = USART_0_read();
				buf[inindex++] = ch;
     848:	33 94       	inc	r3

	for(i=0; i<bsize; buf[i++]='\0');
	termcnt = 0;
	for (wtim = 0; (wtim < 5000); wtim++)		// hang around waiting for some input
	{
		while(USART_0_is_rx_ready())
     84a:	01 c0       	rjmp	.+2      	; 0x84e <getupcmd+0x100>
     84c:	64 01       	movw	r12, r8
     84e:	f4 d1       	rcall	.+1000   	; 0xc38 <USART_0_is_rx_ready>
				validcmd = false;
				termcnt = 0;
				for(i=0; i<bsize; buf[i++]='\0');
			}
		}
		delay_ms(1);
     850:	81 11       	cpse	r24, r1
     852:	b6 cf       	rjmp	.-148    	; 0x7c0 <getupcmd+0x72>
     854:	81 e0       	ldi	r24, 0x01	; 1
     856:	90 e0       	ldi	r25, 0x00	; 0

	const char uploadmsg[]="whmi-wri ";		// expected upload command

	for(i=0; i<bsize; buf[i++]='\0');
	termcnt = 0;
	for (wtim = 0; (wtim < 5000); wtim++)		// hang around waiting for some input
     858:	c6 dc       	rcall	.-1652   	; 0x1e6 <delay_ms>
     85a:	8f ef       	ldi	r24, 0xFF	; 255
     85c:	48 1a       	sub	r4, r24
     85e:	58 0a       	sbc	r5, r24
     860:	98 e8       	ldi	r25, 0x88	; 136
     862:	49 16       	cp	r4, r25
     864:	93 e1       	ldi	r25, 0x13	; 19
     866:	59 06       	cpc	r5, r25
				for(i=0; i<bsize; buf[i++]='\0');
			}
		}
		delay_ms(1);
	}
	return(-1);
     868:	94 f3       	brlt	.-28     	; 0x84e <getupcmd+0x100>
     86a:	8f ef       	ldi	r24, 0xFF	; 255
     86c:	9f ef       	ldi	r25, 0xFF	; 255
					if (ch == 0xff)
					{
						termcnt++;
						if (termcnt == 3)
						{
							return(0);
     86e:	02 c0       	rjmp	.+4      	; 0x874 <getupcmd+0x126>
     870:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
		delay_ms(1);
	}
	return(-1);
}
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	2a 96       	adiw	r28, 0x0a	; 10
     876:	0f b6       	in	r0, 0x3f	; 63
     878:	f8 94       	cli
     87a:	de bf       	out	0x3e, r29	; 62
     87c:	0f be       	out	0x3f, r0	; 63
     87e:	cd bf       	out	0x3d, r28	; 61
     880:	df 91       	pop	r29
     882:	cf 91       	pop	r28
     884:	1f 91       	pop	r17
     886:	0f 91       	pop	r16
     888:	ff 90       	pop	r15
     88a:	ef 90       	pop	r14
     88c:	df 90       	pop	r13
     88e:	cf 90       	pop	r12
     890:	bf 90       	pop	r11
     892:	af 90       	pop	r10
     894:	9f 90       	pop	r9
     896:	8f 90       	pop	r8
     898:	7f 90       	pop	r7
     89a:	6f 90       	pop	r6
     89c:	5f 90       	pop	r5
     89e:	4f 90       	pop	r4
     8a0:	3f 90       	pop	r3
     8a2:	08 95       	ret

000008a4 <doupload>:

// wait for upload command from Nextion Editor and send it to the LCD
// then change the baud rates
int doupload()
{
     8a4:	cf 93       	push	r28
     8a6:	df 93       	push	r29
     8a8:	cd b7       	in	r28, 0x3d	; 61
     8aa:	de b7       	in	r29, 0x3e	; 62
     8ac:	c8 59       	subi	r28, 0x98	; 152
     8ae:	d1 09       	sbc	r29, r1
     8b0:	0f b6       	in	r0, 0x3f	; 63
     8b2:	f8 94       	cli
     8b4:	de bf       	out	0x3e, r29	; 62
     8b6:	0f be       	out	0x3f, r0	; 63
     8b8:	cd bf       	out	0x3d, r28	; 61
	char ch;
	char inbuf[128];
	unsigned long filesize, baudrate;
	char cmd[16];

	i = getupcmd(inbuf,sizeof(inbuf));
     8ba:	60 e8       	ldi	r22, 0x80	; 128
     8bc:	70 e0       	ldi	r23, 0x00	; 0
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	45 df       	rcall	.-374    	; 0x74e <getupcmd>
	if (i < 0)
     8c4:	99 23       	and	r25, r25
     8c6:	e4 f0       	brlt	.+56     	; 0x900 <doupload+0x5c>
	{
		return(-1);
	}
	// Pc has sent upload command
	sscanf(inbuf,"%s,%ld,%ld",cmd,&filesize,&baudrate);
     8c8:	ce 01       	movw	r24, r28
     8ca:	8b 57       	subi	r24, 0x7B	; 123
     8cc:	9f 4f       	sbci	r25, 0xFF	; 255
     8ce:	9f 93       	push	r25
     8d0:	8f 93       	push	r24
     8d2:	04 97       	sbiw	r24, 0x04	; 4
     8d4:	9f 93       	push	r25
     8d6:	8f 93       	push	r24
     8d8:	08 96       	adiw	r24, 0x08	; 8
     8da:	9f 93       	push	r25
     8dc:	8f 93       	push	r24
     8de:	81 e5       	ldi	r24, 0x51	; 81
     8e0:	92 e0       	ldi	r25, 0x02	; 2
     8e2:	9f 93       	push	r25
     8e4:	8f 93       	push	r24
     8e6:	ce 01       	movw	r24, r28
     8e8:	01 96       	adiw	r24, 0x01	; 1
     8ea:	9f 93       	push	r25
     8ec:	8f 93       	push	r24
     8ee:	0f d4       	rcall	.+2078   	; 0x110e <sscanf>

	i = (int)baudrate;
	i = i + (int)filesize;
	return(0);
     8f0:	0f b6       	in	r0, 0x3f	; 63
     8f2:	f8 94       	cli
     8f4:	de bf       	out	0x3e, r29	; 62
     8f6:	0f be       	out	0x3f, r0	; 63
     8f8:	cd bf       	out	0x3d, r28	; 61
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	02 c0       	rjmp	.+4      	; 0x904 <doupload+0x60>
	char cmd[16];

	i = getupcmd(inbuf,sizeof(inbuf));
	if (i < 0)
	{
		return(-1);
     900:	8f ef       	ldi	r24, 0xFF	; 255
     902:	9f ef       	ldi	r25, 0xFF	; 255
	sscanf(inbuf,"%s,%ld,%ld",cmd,&filesize,&baudrate);

	i = (int)baudrate;
	i = i + (int)filesize;
	return(0);
}
     904:	c8 56       	subi	r28, 0x68	; 104
     906:	df 4f       	sbci	r29, 0xFF	; 255
     908:	0f b6       	in	r0, 0x3f	; 63
     90a:	f8 94       	cli
     90c:	de bf       	out	0x3e, r29	; 62
     90e:	0f be       	out	0x3f, r0	; 63
     910:	cd bf       	out	0x3d, r28	; 61
     912:	df 91       	pop	r29
     914:	cf 91       	pop	r28
     916:	08 95       	ret

00000918 <main>:


int main(void)
{
     918:	cf 93       	push	r28
     91a:	df 93       	push	r29
     91c:	cd b7       	in	r28, 0x3d	; 61
     91e:	de b7       	in	r29, 0x3e	; 62
     920:	2a 97       	sbiw	r28, 0x0a	; 10
     922:	0f b6       	in	r0, 0x3f	; 63
     924:	f8 94       	cli
     926:	de bf       	out	0x3e, r29	; 62
     928:	0f be       	out	0x3f, r0	; 63
     92a:	cd bf       	out	0x3d, r28	; 61
	uint8_t data;
	unsigned int bps, ledcnt = 0;
	volatile int i;
	volatile unsigned int j, k;

	char hellomsg[]="Hello\r\n";
     92c:	88 e0       	ldi	r24, 0x08	; 8
     92e:	ee e9       	ldi	r30, 0x9E	; 158
     930:	f2 e0       	ldi	r31, 0x02	; 2
     932:	de 01       	movw	r26, r28
     934:	13 96       	adiw	r26, 0x03	; 3
     936:	01 90       	ld	r0, Z+
     938:	0d 92       	st	X+, r0
     93a:	8a 95       	dec	r24


	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
     93c:	e1 f7       	brne	.-8      	; 0x936 <main+0x1e>

	/* Replace with your application code */
	sei();
     93e:	f9 db       	rcall	.-2062   	; 0x132 <atmel_start_init>


	for(i=0; i<sizeof(hellomsg)-1; i++)
     940:	78 94       	sei
     942:	1a 82       	std	Y+2, r1	; 0x02
     944:	19 82       	std	Y+1, r1	; 0x01
	{
		USART_3_write(hellomsg[i]);
     946:	0f c0       	rjmp	.+30     	; 0x966 <main+0x4e>
     948:	e9 81       	ldd	r30, Y+1	; 0x01
     94a:	fa 81       	ldd	r31, Y+2	; 0x02
     94c:	83 e0       	ldi	r24, 0x03	; 3
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	8c 0f       	add	r24, r28
     952:	9d 1f       	adc	r25, r29
     954:	e8 0f       	add	r30, r24
     956:	f9 1f       	adc	r31, r25
     958:	80 81       	ld	r24, Z

	/* Replace with your application code */
	sei();


	for(i=0; i<sizeof(hellomsg)-1; i++)
     95a:	54 d3       	rcall	.+1704   	; 0x1004 <USART_3_write>
     95c:	89 81       	ldd	r24, Y+1	; 0x01
     95e:	9a 81       	ldd	r25, Y+2	; 0x02
     960:	01 96       	adiw	r24, 0x01	; 1
     962:	9a 83       	std	Y+2, r25	; 0x02
     964:	89 83       	std	Y+1, r24	; 0x01
     966:	89 81       	ldd	r24, Y+1	; 0x01
     968:	9a 81       	ldd	r25, Y+2	; 0x02
     96a:	07 97       	sbiw	r24, 0x07	; 7

	while (1)
	{

		ledcnt = 1;
		i = -1;
     96c:	68 f3       	brcs	.-38     	; 0x948 <main+0x30>
     96e:	8f ef       	ldi	r24, 0xFF	; 255
     970:	9f ef       	ldi	r25, 0xFF	; 255
     972:	9a 83       	std	Y+2, r25	; 0x02
		while (i < 1)
     974:	89 83       	std	Y+1, r24	; 0x01
		{
			printf("Finding LCD\n\r");
     976:	0a c0       	rjmp	.+20     	; 0x98c <main+0x74>
     978:	8c e5       	ldi	r24, 0x5C	; 92
     97a:	92 e0       	ldi	r25, 0x02	; 2
     97c:	9f 93       	push	r25
			i = findlcd();
     97e:	8f 93       	push	r24
     980:	b3 d3       	rcall	.+1894   	; 0x10e8 <printf>
     982:	c2 dc       	rcall	.-1660   	; 0x308 <findlcd>
     984:	9a 83       	std	Y+2, r25	; 0x02
     986:	89 83       	std	Y+1, r24	; 0x01
     988:	0f 90       	pop	r0
	while (1)
	{

		ledcnt = 1;
		i = -1;
		while (i < 1)
     98a:	0f 90       	pop	r0
     98c:	89 81       	ldd	r24, Y+1	; 0x01
     98e:	9a 81       	ldd	r25, Y+2	; 0x02
     990:	18 16       	cp	r1, r24
		{
			printf("Finding LCD\n\r");
			i = findlcd();
		}
//		printf("Found LCD at bindex %d, %s\n\r",i,lcdsig);
		printf("Found LCD\n\r");
     992:	19 06       	cpc	r1, r25
     994:	8c f7       	brge	.-30     	; 0x978 <main+0x60>
     996:	8a e6       	ldi	r24, 0x6A	; 106
     998:	92 e0       	ldi	r25, 0x02	; 2
     99a:	9f 93       	push	r25
		i = -1;
     99c:	8f 93       	push	r24
     99e:	a4 d3       	rcall	.+1864   	; 0x10e8 <printf>
     9a0:	8f ef       	ldi	r24, 0xFF	; 255
     9a2:	9f ef       	ldi	r25, 0xFF	; 255
		while( i < 0)
     9a4:	9a 83       	std	Y+2, r25	; 0x02
		{
			printf("Waiting for Nextion Editor to connect\n\r");
     9a6:	89 83       	std	Y+1, r24	; 0x01
     9a8:	0f 90       	pop	r0
     9aa:	0f 90       	pop	r0
     9ac:	0a c0       	rjmp	.+20     	; 0x9c2 <main+0xaa>
     9ae:	86 e7       	ldi	r24, 0x76	; 118
			i = conntoed();
     9b0:	92 e0       	ldi	r25, 0x02	; 2
     9b2:	9f 93       	push	r25
     9b4:	8f 93       	push	r24
     9b6:	98 d3       	rcall	.+1840   	; 0x10e8 <printf>
     9b8:	5f de       	rcall	.-834    	; 0x678 <conntoed>
			i = findlcd();
		}
//		printf("Found LCD at bindex %d, %s\n\r",i,lcdsig);
		printf("Found LCD\n\r");
		i = -1;
		while( i < 0)
     9ba:	9a 83       	std	Y+2, r25	; 0x02
     9bc:	89 83       	std	Y+1, r24	; 0x01
     9be:	0f 90       	pop	r0
     9c0:	0f 90       	pop	r0
			printf("Waiting for Nextion Editor to connect\n\r");
			i = conntoed();
		}


		doupload();
     9c2:	89 81       	ldd	r24, Y+1	; 0x01
     9c4:	9a 81       	ldd	r25, Y+2	; 0x02


		ledcnt = lcdsig[0];
     9c6:	99 23       	and	r25, r25
     9c8:	94 f3       	brlt	.-28     	; 0x9ae <main+0x96>
		if(ledcnt)
     9ca:	6c df       	rcall	.-296    	; 0x8a4 <doupload>
     9cc:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <lcdsig>
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTB |= 1 << pin;
     9d0:	88 23       	and	r24, r24
     9d2:	21 f0       	breq	.+8      	; 0x9dc <main+0xc4>
     9d4:	85 b1       	in	r24, 0x05	; 5
	} else {
		PORTB &= ~(1 << pin);
     9d6:	80 68       	ori	r24, 0x80	; 128
     9d8:	85 b9       	out	0x05, r24	; 5
     9da:	c9 cf       	rjmp	.-110    	; 0x96e <main+0x56>
     9dc:	85 b1       	in	r24, 0x05	; 5
     9de:	8f 77       	andi	r24, 0x7F	; 127
     9e0:	85 b9       	out	0x05, r24	; 5
     9e2:	c5 cf       	rjmp	.-118    	; 0x96e <main+0x56>

000009e4 <TIMER_0_initialization>:
     9e4:	a4 c0       	rjmp	.+328    	; 0xb2e <TIMER_0_init>
     9e6:	08 95       	ret

000009e8 <TIMER_1_initialization>:
     9e8:	b9 c0       	rjmp	.+370    	; 0xb5c <TIMER_1_init>
     9ea:	08 95       	ret

000009ec <USART_0_initialization>:
     9ec:	8d b1       	in	r24, 0x0d	; 13
     9ee:	8e 7f       	andi	r24, 0xFE	; 254
     9f0:	8d b9       	out	0x0d, r24	; 13
     9f2:	8e b1       	in	r24, 0x0e	; 14
     9f4:	8e 7f       	andi	r24, 0xFE	; 254
     9f6:	8e b9       	out	0x0e, r24	; 14
     9f8:	8d b1       	in	r24, 0x0d	; 13
     9fa:	82 60       	ori	r24, 0x02	; 2
     9fc:	8d b9       	out	0x0d, r24	; 13
     9fe:	8e b1       	in	r24, 0x0e	; 14
     a00:	8d 7f       	andi	r24, 0xFD	; 253
     a02:	8e b9       	out	0x0e, r24	; 14
     a04:	58 c1       	rjmp	.+688    	; 0xcb6 <USART_0_init>
     a06:	08 95       	ret

00000a08 <USART_1_initialization>:
     a08:	8a b1       	in	r24, 0x0a	; 10
     a0a:	8b 7f       	andi	r24, 0xFB	; 251
     a0c:	8a b9       	out	0x0a, r24	; 10
     a0e:	8b b1       	in	r24, 0x0b	; 11
     a10:	8b 7f       	andi	r24, 0xFB	; 251
     a12:	8b b9       	out	0x0b, r24	; 11
     a14:	8a b1       	in	r24, 0x0a	; 10
     a16:	88 60       	ori	r24, 0x08	; 8
     a18:	8a b9       	out	0x0a, r24	; 10
     a1a:	8b b1       	in	r24, 0x0b	; 11
     a1c:	87 7f       	andi	r24, 0xF7	; 247
     a1e:	8b b9       	out	0x0b, r24	; 11
     a20:	c2 c1       	rjmp	.+900    	; 0xda6 <USART_1_init>
     a22:	08 95       	ret

00000a24 <USART_2_initialization>:
     a24:	a1 e0       	ldi	r26, 0x01	; 1
     a26:	b1 e0       	ldi	r27, 0x01	; 1
     a28:	8c 91       	ld	r24, X
     a2a:	8e 7f       	andi	r24, 0xFE	; 254
     a2c:	8c 93       	st	X, r24
     a2e:	e2 e0       	ldi	r30, 0x02	; 2
     a30:	f1 e0       	ldi	r31, 0x01	; 1
     a32:	80 81       	ld	r24, Z
     a34:	8e 7f       	andi	r24, 0xFE	; 254
     a36:	80 83       	st	Z, r24
     a38:	8c 91       	ld	r24, X
     a3a:	82 60       	ori	r24, 0x02	; 2
     a3c:	8c 93       	st	X, r24
     a3e:	80 81       	ld	r24, Z
     a40:	8d 7f       	andi	r24, 0xFD	; 253
     a42:	80 83       	st	Z, r24
     a44:	67 c2       	rjmp	.+1230   	; 0xf14 <USART_2_init>
     a46:	08 95       	ret

00000a48 <USART_3_initialization>:
     a48:	a4 e0       	ldi	r26, 0x04	; 4
     a4a:	b1 e0       	ldi	r27, 0x01	; 1
     a4c:	8c 91       	ld	r24, X
     a4e:	8e 7f       	andi	r24, 0xFE	; 254
     a50:	8c 93       	st	X, r24
     a52:	e5 e0       	ldi	r30, 0x05	; 5
     a54:	f1 e0       	ldi	r31, 0x01	; 1
     a56:	80 81       	ld	r24, Z
     a58:	8e 7f       	andi	r24, 0xFE	; 254
     a5a:	80 83       	st	Z, r24
     a5c:	8c 91       	ld	r24, X
     a5e:	82 60       	ori	r24, 0x02	; 2
     a60:	8c 93       	st	X, r24
     a62:	80 81       	ld	r24, Z
     a64:	8d 7f       	andi	r24, 0xFD	; 253
     a66:	80 83       	st	Z, r24
     a68:	f0 c2       	rjmp	.+1504   	; 0x104a <USART_3_init>
     a6a:	08 95       	ret

00000a6c <system_init>:
     a6c:	8f e3       	ldi	r24, 0x3F	; 63
     a6e:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x700065>
     a72:	8f ee       	ldi	r24, 0xEF	; 239
     a74:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x700064>
     a78:	81 b1       	in	r24, 0x01	; 1
     a7a:	11 b8       	out	0x01, r1	; 1
     a7c:	82 b1       	in	r24, 0x02	; 2
     a7e:	8f ef       	ldi	r24, 0xFF	; 255
     a80:	82 b9       	out	0x02, r24	; 2
     a82:	94 b1       	in	r25, 0x04	; 4
     a84:	14 b8       	out	0x04, r1	; 4
     a86:	95 b1       	in	r25, 0x05	; 5
     a88:	85 b9       	out	0x05, r24	; 5
     a8a:	97 b1       	in	r25, 0x07	; 7
     a8c:	17 b8       	out	0x07, r1	; 7
     a8e:	98 b1       	in	r25, 0x08	; 8
     a90:	88 b9       	out	0x08, r24	; 8
     a92:	9a b1       	in	r25, 0x0a	; 10
     a94:	1a b8       	out	0x0a, r1	; 10
     a96:	9b b1       	in	r25, 0x0b	; 11
     a98:	8b b9       	out	0x0b, r24	; 11
     a9a:	9d b1       	in	r25, 0x0d	; 13
     a9c:	1d b8       	out	0x0d, r1	; 13
     a9e:	9e b1       	in	r25, 0x0e	; 14
     aa0:	8e b9       	out	0x0e, r24	; 14
     aa2:	90 b3       	in	r25, 0x10	; 16
     aa4:	10 ba       	out	0x10, r1	; 16
     aa6:	91 b3       	in	r25, 0x11	; 17
     aa8:	81 bb       	out	0x11, r24	; 17
     aaa:	93 b3       	in	r25, 0x13	; 19
     aac:	90 7c       	andi	r25, 0xC0	; 192
     aae:	93 bb       	out	0x13, r25	; 19
     ab0:	94 b3       	in	r25, 0x14	; 20
     ab2:	9f 63       	ori	r25, 0x3F	; 63
     ab4:	94 bb       	out	0x14, r25	; 20
     ab6:	e1 e0       	ldi	r30, 0x01	; 1
     ab8:	f1 e0       	ldi	r31, 0x01	; 1
     aba:	90 81       	ld	r25, Z
     abc:	10 82       	st	Z, r1
     abe:	e2 e0       	ldi	r30, 0x02	; 2
     ac0:	f1 e0       	ldi	r31, 0x01	; 1
     ac2:	90 81       	ld	r25, Z
     ac4:	80 83       	st	Z, r24
     ac6:	e4 e0       	ldi	r30, 0x04	; 4
     ac8:	f1 e0       	ldi	r31, 0x01	; 1
     aca:	90 81       	ld	r25, Z
     acc:	10 82       	st	Z, r1
     ace:	e5 e0       	ldi	r30, 0x05	; 5
     ad0:	f1 e0       	ldi	r31, 0x01	; 1
     ad2:	90 81       	ld	r25, Z
     ad4:	80 83       	st	Z, r24
     ad6:	e7 e0       	ldi	r30, 0x07	; 7
     ad8:	f1 e0       	ldi	r31, 0x01	; 1
     ada:	90 81       	ld	r25, Z
     adc:	10 82       	st	Z, r1
     ade:	e8 e0       	ldi	r30, 0x08	; 8
     ae0:	f1 e0       	ldi	r31, 0x01	; 1
     ae2:	90 81       	ld	r25, Z
     ae4:	80 83       	st	Z, r24
     ae6:	ea e0       	ldi	r30, 0x0A	; 10
     ae8:	f1 e0       	ldi	r31, 0x01	; 1
     aea:	90 81       	ld	r25, Z
     aec:	10 82       	st	Z, r1
     aee:	eb e0       	ldi	r30, 0x0B	; 11
     af0:	f1 e0       	ldi	r31, 0x01	; 1
     af2:	90 81       	ld	r25, Z
     af4:	80 83       	st	Z, r24
     af6:	84 b1       	in	r24, 0x04	; 4
     af8:	80 68       	ori	r24, 0x80	; 128
     afa:	84 b9       	out	0x04, r24	; 4
     afc:	85 b1       	in	r24, 0x05	; 5
     afe:	8f 77       	andi	r24, 0x7F	; 127
     b00:	85 b9       	out	0x05, r24	; 5
     b02:	40 e0       	ldi	r20, 0x00	; 0
     b04:	60 e8       	ldi	r22, 0x80	; 128
     b06:	81 e6       	ldi	r24, 0x61	; 97
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	09 d0       	rcall	.+18     	; 0xb1e <protected_write_io>
     b0c:	13 be       	out	0x33, r1	; 51
     b0e:	15 be       	out	0x35, r1	; 53
     b10:	69 df       	rcall	.-302    	; 0x9e4 <TIMER_0_initialization>
     b12:	6a df       	rcall	.-300    	; 0x9e8 <TIMER_1_initialization>
     b14:	6b df       	rcall	.-298    	; 0x9ec <USART_0_initialization>
     b16:	78 df       	rcall	.-272    	; 0xa08 <USART_1_initialization>
     b18:	85 df       	rcall	.-246    	; 0xa24 <USART_2_initialization>
     b1a:	96 cf       	rjmp	.-212    	; 0xa48 <USART_3_initialization>
     b1c:	08 95       	ret

00000b1e <protected_write_io>:
#if defined(__GNUC__)
	/*
	 * We need to disable interrupts globally before the protected
	 * sequence. In order to do that we must save SREG first.
	 */
	in      r18,    _SFR_IO_ADDR(SREG)
     b1e:	2f b7       	in	r18, 0x3f	; 63
	cli
     b20:	f8 94       	cli
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
     b22:	1b be       	out	0x3b, r1	; 59
#endif
	movw    r30, r24                // Load addr into Z
     b24:	fc 01       	movw	r30, r24
	st      Z, r22                  // Write protection bit to I/O register
     b26:	60 83       	st	Z, r22
	st      Z, r20                  // Write value to I/O register
     b28:	40 83       	st	Z, r20
	out     _SFR_IO_ADDR(SREG), r18
     b2a:	2f bf       	out	0x3f, r18	; 63

	ret                             // Return to caller
     b2c:	08 95       	ret

00000b2e <TIMER_0_init>:
 */
int8_t TIMER_0_init()
{

	/* Enable TC1 */
	PRR0 &= ~(1 << PRTIM1);
     b2e:	e4 e6       	ldi	r30, 0x64	; 100
     b30:	f0 e0       	ldi	r31, 0x00	; 0
     b32:	80 81       	ld	r24, Z
     b34:	87 7f       	andi	r24, 0xF7	; 247
     b36:	80 83       	st	Z, r24

	// TCCR1A = (0 << COM1A1) | (0 << COM1A0) /* Normal port operation, OCA disconnected */
	//		 | (0 << COM1B1) | (0 << COM1B0) /* Normal port operation, OCB disconnected */
	//		 | (0 << WGM11) | (0 << WGM10); /* TC16 Mode 0 Normal */

	TCCR1B = (0 << WGM13) | (0 << WGM12)                /* TC16 Mode 0 Normal */
     b38:	81 e0       	ldi	r24, 0x01	; 1
     b3a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
	         | 0 << ICES1                               /* Input Capture Edge Select: disabled */
	         | (0 << CS12) | (0 << CS11) | (1 << CS10); /* No prescaling */

	// ICR1 = 0; /* Input capture value, used as top counter value in some modes: 0 */

	OCR1A = 16000; /* Output compare A: 16000 */
     b3e:	80 e8       	ldi	r24, 0x80	; 128
     b40:	9e e3       	ldi	r25, 0x3E	; 62
     b42:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
     b46:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>

	OCR1B = 16000; /* Output compare B: 16000 */
     b4a:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
     b4e:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>

	TIMSK1 = 0 << OCIE1B   /* Output Compare B Match Interrupt Enable: disabled */
     b52:	82 e0       	ldi	r24, 0x02	; 2
     b54:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x70006f>
	         | 1 << OCIE1A /* Output Compare A Match Interrupt Enable: enabled */
	         | 0 << ICIE1  /* Input Capture Interrupt Enable: disabled */
	         | 0 << TOIE1; /* Overflow Interrupt Enable: disabled */

	return 0;
}
     b58:	80 e0       	ldi	r24, 0x00	; 0
     b5a:	08 95       	ret

00000b5c <TIMER_1_init>:
 */
int8_t TIMER_1_init()
{

	/* Enable TC3 */
	PRR1 &= ~(1 << PRTIM3);
     b5c:	e5 e6       	ldi	r30, 0x65	; 101
     b5e:	f0 e0       	ldi	r31, 0x00	; 0
     b60:	80 81       	ld	r24, Z
     b62:	87 7f       	andi	r24, 0xF7	; 247
     b64:	80 83       	st	Z, r24

	// TCCR3A = (0 << COM3A1) | (0 << COM3A0) /* Normal port operation, OCA disconnected */
	//		 | (0 << COM3B1) | (0 << COM3B0) /* Normal port operation, OCB disconnected */
	//		 | (0 << WGM31) | (0 << WGM30); /* TC16 Mode 0 Normal */

	TCCR3B = (0 << WGM33) | (0 << WGM32)                /* TC16 Mode 0 Normal */
     b66:	81 e0       	ldi	r24, 0x01	; 1
     b68:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
	         | 0 << ICES3                               /* Input Capture Edge Select: disabled */
	         | (0 << CS32) | (0 << CS31) | (1 << CS30); /* No prescaling */

	// ICR3 = 0; /* Input capture value, used as top counter value in some modes: 0 */

	OCR3A = 16000; /* Output compare A: 16000 */
     b6c:	80 e8       	ldi	r24, 0x80	; 128
     b6e:	9e e3       	ldi	r25, 0x3E	; 62
     b70:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
     b74:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>

	// OCR3B = 0; /* Output compare B: 0 */

	TIMSK3 = 0 << OCIE3B   /* Output Compare B Match Interrupt Enable: disabled */
     b78:	82 e0       	ldi	r24, 0x02	; 2
     b7a:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
	         | 1 << OCIE3A /* Output Compare A Match Interrupt Enable: enabled */
	         | 0 << ICIE3  /* Input Capture Interrupt Enable: disabled */
	         | 0 << TOIE3; /* Overflow Interrupt Enable: disabled */

	return 0;
}
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	08 95       	ret

00000b82 <__vector_25>:
	USART_3_rx_elements--;
	EXIT_CRITICAL(R);

	/* Return data */
	return USART_3_rxbuf[tmptail];
}
     b82:	1f 92       	push	r1
     b84:	0f 92       	push	r0
     b86:	0f b6       	in	r0, 0x3f	; 63
     b88:	0f 92       	push	r0
     b8a:	11 24       	eor	r1, r1
     b8c:	0b b6       	in	r0, 0x3b	; 59
     b8e:	0f 92       	push	r0
     b90:	8f 93       	push	r24
     b92:	9f 93       	push	r25
     b94:	ef 93       	push	r30
     b96:	ff 93       	push	r31
     b98:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     b9c:	e0 91 ab 03 	lds	r30, 0x03AB	; 0x8003ab <USART_0_rx_head>
     ba0:	ef 5f       	subi	r30, 0xFF	; 255
     ba2:	ef 77       	andi	r30, 0x7F	; 127
     ba4:	e0 93 ab 03 	sts	0x03AB, r30	; 0x8003ab <USART_0_rx_head>
     ba8:	90 91 aa 03 	lds	r25, 0x03AA	; 0x8003aa <USART_0_rx_tail>
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	e4 55       	subi	r30, 0x54	; 84
     bb0:	fc 4f       	sbci	r31, 0xFC	; 252
     bb2:	80 83       	st	Z, r24
     bb4:	80 91 a9 03 	lds	r24, 0x03A9	; 0x8003a9 <USART_0_rx_elements>
     bb8:	8f 5f       	subi	r24, 0xFF	; 255
     bba:	80 93 a9 03 	sts	0x03A9, r24	; 0x8003a9 <USART_0_rx_elements>
     bbe:	ff 91       	pop	r31
     bc0:	ef 91       	pop	r30
     bc2:	9f 91       	pop	r25
     bc4:	8f 91       	pop	r24
     bc6:	0f 90       	pop	r0
     bc8:	0b be       	out	0x3b, r0	; 59
     bca:	0f 90       	pop	r0
     bcc:	0f be       	out	0x3f, r0	; 63
     bce:	0f 90       	pop	r0
     bd0:	1f 90       	pop	r1
     bd2:	18 95       	reti

00000bd4 <__vector_26>:
     bd4:	1f 92       	push	r1
     bd6:	0f 92       	push	r0
     bd8:	0f b6       	in	r0, 0x3f	; 63
     bda:	0f 92       	push	r0
     bdc:	11 24       	eor	r1, r1
     bde:	0b b6       	in	r0, 0x3b	; 59
     be0:	0f 92       	push	r0
     be2:	8f 93       	push	r24
     be4:	ef 93       	push	r30
     be6:	ff 93       	push	r31
     be8:	80 91 96 03 	lds	r24, 0x0396	; 0x800396 <USART_0_tx_elements>
     bec:	88 23       	and	r24, r24
     bee:	89 f0       	breq	.+34     	; 0xc12 <__vector_26+0x3e>
     bf0:	e0 91 97 03 	lds	r30, 0x0397	; 0x800397 <USART_0_tx_tail>
     bf4:	ef 5f       	subi	r30, 0xFF	; 255
     bf6:	ef 70       	andi	r30, 0x0F	; 15
     bf8:	e0 93 97 03 	sts	0x0397, r30	; 0x800397 <USART_0_tx_tail>
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	e7 56       	subi	r30, 0x67	; 103
     c00:	fc 4f       	sbci	r31, 0xFC	; 252
     c02:	80 81       	ld	r24, Z
     c04:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     c08:	80 91 96 03 	lds	r24, 0x0396	; 0x800396 <USART_0_tx_elements>
     c0c:	81 50       	subi	r24, 0x01	; 1
     c0e:	80 93 96 03 	sts	0x0396, r24	; 0x800396 <USART_0_tx_elements>
     c12:	80 91 96 03 	lds	r24, 0x0396	; 0x800396 <USART_0_tx_elements>
     c16:	81 11       	cpse	r24, r1
     c18:	05 c0       	rjmp	.+10     	; 0xc24 <__vector_26+0x50>
     c1a:	e1 ec       	ldi	r30, 0xC1	; 193
     c1c:	f0 e0       	ldi	r31, 0x00	; 0
     c1e:	80 81       	ld	r24, Z
     c20:	8f 7d       	andi	r24, 0xDF	; 223
     c22:	80 83       	st	Z, r24
     c24:	ff 91       	pop	r31
     c26:	ef 91       	pop	r30
     c28:	8f 91       	pop	r24
     c2a:	0f 90       	pop	r0
     c2c:	0b be       	out	0x3b, r0	; 59
     c2e:	0f 90       	pop	r0
     c30:	0f be       	out	0x3f, r0	; 63
     c32:	0f 90       	pop	r0
     c34:	1f 90       	pop	r1
     c36:	18 95       	reti

00000c38 <USART_0_is_rx_ready>:
     c38:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <USART_0_rx_elements>
     c3c:	81 e0       	ldi	r24, 0x01	; 1
     c3e:	91 11       	cpse	r25, r1
     c40:	01 c0       	rjmp	.+2      	; 0xc44 <USART_0_is_rx_ready+0xc>
     c42:	80 e0       	ldi	r24, 0x00	; 0
     c44:	08 95       	ret

00000c46 <USART_0_read>:
     c46:	80 91 a9 03 	lds	r24, 0x03A9	; 0x8003a9 <USART_0_rx_elements>
     c4a:	88 23       	and	r24, r24
     c4c:	e1 f3       	breq	.-8      	; 0xc46 <USART_0_read>
     c4e:	e0 91 aa 03 	lds	r30, 0x03AA	; 0x8003aa <USART_0_rx_tail>
     c52:	ef 5f       	subi	r30, 0xFF	; 255
     c54:	ef 77       	andi	r30, 0x7F	; 127
     c56:	e0 93 aa 03 	sts	0x03AA, r30	; 0x8003aa <USART_0_rx_tail>
     c5a:	0f b6       	in	r0, 0x3f	; 63
     c5c:	f8 94       	cli
     c5e:	0f 92       	push	r0
     c60:	80 91 a9 03 	lds	r24, 0x03A9	; 0x8003a9 <USART_0_rx_elements>
     c64:	81 50       	subi	r24, 0x01	; 1
     c66:	80 93 a9 03 	sts	0x03A9, r24	; 0x8003a9 <USART_0_rx_elements>
     c6a:	0f 90       	pop	r0
     c6c:	0f be       	out	0x3f, r0	; 63
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	e4 55       	subi	r30, 0x54	; 84
     c72:	fc 4f       	sbci	r31, 0xFC	; 252
     c74:	80 81       	ld	r24, Z
     c76:	08 95       	ret

00000c78 <USART_0_write>:
     c78:	20 91 98 03 	lds	r18, 0x0398	; 0x800398 <USART_0_tx_head>
     c7c:	2f 5f       	subi	r18, 0xFF	; 255
     c7e:	2f 70       	andi	r18, 0x0F	; 15
     c80:	90 91 96 03 	lds	r25, 0x0396	; 0x800396 <USART_0_tx_elements>
     c84:	90 31       	cpi	r25, 0x10	; 16
     c86:	e1 f3       	breq	.-8      	; 0xc80 <USART_0_write+0x8>
     c88:	e2 2f       	mov	r30, r18
     c8a:	f0 e0       	ldi	r31, 0x00	; 0
     c8c:	e7 56       	subi	r30, 0x67	; 103
     c8e:	fc 4f       	sbci	r31, 0xFC	; 252
     c90:	80 83       	st	Z, r24
     c92:	20 93 98 03 	sts	0x0398, r18	; 0x800398 <USART_0_tx_head>
     c96:	0f b6       	in	r0, 0x3f	; 63
     c98:	f8 94       	cli
     c9a:	0f 92       	push	r0
     c9c:	80 91 96 03 	lds	r24, 0x0396	; 0x800396 <USART_0_tx_elements>
     ca0:	8f 5f       	subi	r24, 0xFF	; 255
     ca2:	80 93 96 03 	sts	0x0396, r24	; 0x800396 <USART_0_tx_elements>
     ca6:	0f 90       	pop	r0
     ca8:	0f be       	out	0x3f, r0	; 63
     caa:	e1 ec       	ldi	r30, 0xC1	; 193
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	80 62       	ori	r24, 0x20	; 32
     cb2:	80 83       	st	Z, r24
     cb4:	08 95       	ret

00000cb6 <USART_0_init>:
     cb6:	e4 e6       	ldi	r30, 0x64	; 100
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	80 81       	ld	r24, Z
     cbc:	8d 7f       	andi	r24, 0xFD	; 253
     cbe:	80 83       	st	Z, r24
     cc0:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
     cc4:	87 e6       	ldi	r24, 0x67	; 103
     cc6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
     cca:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
     cce:	88 e9       	ldi	r24, 0x98	; 152
     cd0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
     cd4:	10 92 aa 03 	sts	0x03AA, r1	; 0x8003aa <USART_0_rx_tail>
     cd8:	10 92 ab 03 	sts	0x03AB, r1	; 0x8003ab <USART_0_rx_head>
     cdc:	10 92 a9 03 	sts	0x03A9, r1	; 0x8003a9 <USART_0_rx_elements>
     ce0:	10 92 97 03 	sts	0x0397, r1	; 0x800397 <USART_0_tx_tail>
     ce4:	10 92 98 03 	sts	0x0398, r1	; 0x800398 <USART_0_tx_head>
     ce8:	10 92 96 03 	sts	0x0396, r1	; 0x800396 <USART_0_tx_elements>
     cec:	80 e0       	ldi	r24, 0x00	; 0
     cee:	08 95       	ret

00000cf0 <__vector_36>:
     cf0:	1f 92       	push	r1
     cf2:	0f 92       	push	r0
     cf4:	0f b6       	in	r0, 0x3f	; 63
     cf6:	0f 92       	push	r0
     cf8:	11 24       	eor	r1, r1
     cfa:	0b b6       	in	r0, 0x3b	; 59
     cfc:	0f 92       	push	r0
     cfe:	8f 93       	push	r24
     d00:	9f 93       	push	r25
     d02:	ef 93       	push	r30
     d04:	ff 93       	push	r31
     d06:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
     d0a:	e0 91 8d 03 	lds	r30, 0x038D	; 0x80038d <USART_1_rx_head>
     d0e:	ef 5f       	subi	r30, 0xFF	; 255
     d10:	e7 70       	andi	r30, 0x07	; 7
     d12:	e0 93 8d 03 	sts	0x038D, r30	; 0x80038d <USART_1_rx_head>
     d16:	90 91 8c 03 	lds	r25, 0x038C	; 0x80038c <USART_1_rx_tail>
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	e2 57       	subi	r30, 0x72	; 114
     d1e:	fc 4f       	sbci	r31, 0xFC	; 252
     d20:	80 83       	st	Z, r24
     d22:	80 91 8b 03 	lds	r24, 0x038B	; 0x80038b <USART_1_rx_elements>
     d26:	8f 5f       	subi	r24, 0xFF	; 255
     d28:	80 93 8b 03 	sts	0x038B, r24	; 0x80038b <USART_1_rx_elements>
     d2c:	ff 91       	pop	r31
     d2e:	ef 91       	pop	r30
     d30:	9f 91       	pop	r25
     d32:	8f 91       	pop	r24
     d34:	0f 90       	pop	r0
     d36:	0b be       	out	0x3b, r0	; 59
     d38:	0f 90       	pop	r0
     d3a:	0f be       	out	0x3f, r0	; 63
     d3c:	0f 90       	pop	r0
     d3e:	1f 90       	pop	r1
     d40:	18 95       	reti

00000d42 <__vector_37>:
     d42:	1f 92       	push	r1
     d44:	0f 92       	push	r0
     d46:	0f b6       	in	r0, 0x3f	; 63
     d48:	0f 92       	push	r0
     d4a:	11 24       	eor	r1, r1
     d4c:	0b b6       	in	r0, 0x3b	; 59
     d4e:	0f 92       	push	r0
     d50:	8f 93       	push	r24
     d52:	ef 93       	push	r30
     d54:	ff 93       	push	r31
     d56:	80 91 80 03 	lds	r24, 0x0380	; 0x800380 <USART_1_tx_elements>
     d5a:	88 23       	and	r24, r24
     d5c:	89 f0       	breq	.+34     	; 0xd80 <__vector_37+0x3e>
     d5e:	e0 91 81 03 	lds	r30, 0x0381	; 0x800381 <USART_1_tx_tail>
     d62:	ef 5f       	subi	r30, 0xFF	; 255
     d64:	e7 70       	andi	r30, 0x07	; 7
     d66:	e0 93 81 03 	sts	0x0381, r30	; 0x800381 <USART_1_tx_tail>
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	ed 57       	subi	r30, 0x7D	; 125
     d6e:	fc 4f       	sbci	r31, 0xFC	; 252
     d70:	80 81       	ld	r24, Z
     d72:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
     d76:	80 91 80 03 	lds	r24, 0x0380	; 0x800380 <USART_1_tx_elements>
     d7a:	81 50       	subi	r24, 0x01	; 1
     d7c:	80 93 80 03 	sts	0x0380, r24	; 0x800380 <USART_1_tx_elements>
     d80:	80 91 80 03 	lds	r24, 0x0380	; 0x800380 <USART_1_tx_elements>
     d84:	81 11       	cpse	r24, r1
     d86:	05 c0       	rjmp	.+10     	; 0xd92 <__vector_37+0x50>
     d88:	e9 ec       	ldi	r30, 0xC9	; 201
     d8a:	f0 e0       	ldi	r31, 0x00	; 0
     d8c:	80 81       	ld	r24, Z
     d8e:	8f 7d       	andi	r24, 0xDF	; 223
     d90:	80 83       	st	Z, r24
     d92:	ff 91       	pop	r31
     d94:	ef 91       	pop	r30
     d96:	8f 91       	pop	r24
     d98:	0f 90       	pop	r0
     d9a:	0b be       	out	0x3b, r0	; 59
     d9c:	0f 90       	pop	r0
     d9e:	0f be       	out	0x3f, r0	; 63
     da0:	0f 90       	pop	r0
     da2:	1f 90       	pop	r1
     da4:	18 95       	reti

00000da6 <USART_1_init>:
     da6:	e5 e6       	ldi	r30, 0x65	; 101
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	80 81       	ld	r24, Z
     dac:	8e 7f       	andi	r24, 0xFE	; 254
     dae:	80 83       	st	Z, r24
     db0:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
     db4:	87 e6       	ldi	r24, 0x67	; 103
     db6:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
     dba:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
     dbe:	88 e9       	ldi	r24, 0x98	; 152
     dc0:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
     dc4:	10 92 8c 03 	sts	0x038C, r1	; 0x80038c <USART_1_rx_tail>
     dc8:	10 92 8d 03 	sts	0x038D, r1	; 0x80038d <USART_1_rx_head>
     dcc:	10 92 8b 03 	sts	0x038B, r1	; 0x80038b <USART_1_rx_elements>
     dd0:	10 92 81 03 	sts	0x0381, r1	; 0x800381 <USART_1_tx_tail>
     dd4:	10 92 82 03 	sts	0x0382, r1	; 0x800382 <USART_1_tx_head>
     dd8:	10 92 80 03 	sts	0x0380, r1	; 0x800380 <USART_1_tx_elements>
     ddc:	80 e0       	ldi	r24, 0x00	; 0
     dde:	08 95       	ret

00000de0 <__vector_51>:
     de0:	1f 92       	push	r1
     de2:	0f 92       	push	r0
     de4:	0f b6       	in	r0, 0x3f	; 63
     de6:	0f 92       	push	r0
     de8:	11 24       	eor	r1, r1
     dea:	0b b6       	in	r0, 0x3b	; 59
     dec:	0f 92       	push	r0
     dee:	8f 93       	push	r24
     df0:	9f 93       	push	r25
     df2:	ef 93       	push	r30
     df4:	ff 93       	push	r31
     df6:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
     dfa:	e0 91 3f 03 	lds	r30, 0x033F	; 0x80033f <USART_2_rx_head>
     dfe:	ef 5f       	subi	r30, 0xFF	; 255
     e00:	ef 73       	andi	r30, 0x3F	; 63
     e02:	e0 93 3f 03 	sts	0x033F, r30	; 0x80033f <USART_2_rx_head>
     e06:	90 91 3e 03 	lds	r25, 0x033E	; 0x80033e <USART_2_rx_tail>
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	e0 5c       	subi	r30, 0xC0	; 192
     e0e:	fc 4f       	sbci	r31, 0xFC	; 252
     e10:	80 83       	st	Z, r24
     e12:	80 91 3d 03 	lds	r24, 0x033D	; 0x80033d <USART_2_rx_elements>
     e16:	8f 5f       	subi	r24, 0xFF	; 255
     e18:	80 93 3d 03 	sts	0x033D, r24	; 0x80033d <USART_2_rx_elements>
     e1c:	ff 91       	pop	r31
     e1e:	ef 91       	pop	r30
     e20:	9f 91       	pop	r25
     e22:	8f 91       	pop	r24
     e24:	0f 90       	pop	r0
     e26:	0b be       	out	0x3b, r0	; 59
     e28:	0f 90       	pop	r0
     e2a:	0f be       	out	0x3f, r0	; 63
     e2c:	0f 90       	pop	r0
     e2e:	1f 90       	pop	r1
     e30:	18 95       	reti

00000e32 <__vector_52>:
     e32:	1f 92       	push	r1
     e34:	0f 92       	push	r0
     e36:	0f b6       	in	r0, 0x3f	; 63
     e38:	0f 92       	push	r0
     e3a:	11 24       	eor	r1, r1
     e3c:	0b b6       	in	r0, 0x3b	; 59
     e3e:	0f 92       	push	r0
     e40:	8f 93       	push	r24
     e42:	ef 93       	push	r30
     e44:	ff 93       	push	r31
     e46:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <USART_2_tx_elements>
     e4a:	88 23       	and	r24, r24
     e4c:	89 f0       	breq	.+34     	; 0xe70 <__vector_52+0x3e>
     e4e:	e0 91 33 03 	lds	r30, 0x0333	; 0x800333 <USART_2_tx_tail>
     e52:	ef 5f       	subi	r30, 0xFF	; 255
     e54:	e7 70       	andi	r30, 0x07	; 7
     e56:	e0 93 33 03 	sts	0x0333, r30	; 0x800333 <USART_2_tx_tail>
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	eb 5c       	subi	r30, 0xCB	; 203
     e5e:	fc 4f       	sbci	r31, 0xFC	; 252
     e60:	80 81       	ld	r24, Z
     e62:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
     e66:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <USART_2_tx_elements>
     e6a:	81 50       	subi	r24, 0x01	; 1
     e6c:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <USART_2_tx_elements>
     e70:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <USART_2_tx_elements>
     e74:	81 11       	cpse	r24, r1
     e76:	05 c0       	rjmp	.+10     	; 0xe82 <__vector_52+0x50>
     e78:	e1 ed       	ldi	r30, 0xD1	; 209
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	80 81       	ld	r24, Z
     e7e:	8f 7d       	andi	r24, 0xDF	; 223
     e80:	80 83       	st	Z, r24
     e82:	ff 91       	pop	r31
     e84:	ef 91       	pop	r30
     e86:	8f 91       	pop	r24
     e88:	0f 90       	pop	r0
     e8a:	0b be       	out	0x3b, r0	; 59
     e8c:	0f 90       	pop	r0
     e8e:	0f be       	out	0x3f, r0	; 63
     e90:	0f 90       	pop	r0
     e92:	1f 90       	pop	r1
     e94:	18 95       	reti

00000e96 <USART_2_is_rx_ready>:
     e96:	90 91 3d 03 	lds	r25, 0x033D	; 0x80033d <USART_2_rx_elements>
     e9a:	81 e0       	ldi	r24, 0x01	; 1
     e9c:	91 11       	cpse	r25, r1
     e9e:	01 c0       	rjmp	.+2      	; 0xea2 <USART_2_is_rx_ready+0xc>
     ea0:	80 e0       	ldi	r24, 0x00	; 0
     ea2:	08 95       	ret

00000ea4 <USART_2_read>:
     ea4:	80 91 3d 03 	lds	r24, 0x033D	; 0x80033d <USART_2_rx_elements>
     ea8:	88 23       	and	r24, r24
     eaa:	e1 f3       	breq	.-8      	; 0xea4 <USART_2_read>
     eac:	e0 91 3e 03 	lds	r30, 0x033E	; 0x80033e <USART_2_rx_tail>
     eb0:	ef 5f       	subi	r30, 0xFF	; 255
     eb2:	ef 73       	andi	r30, 0x3F	; 63
     eb4:	e0 93 3e 03 	sts	0x033E, r30	; 0x80033e <USART_2_rx_tail>
     eb8:	0f b6       	in	r0, 0x3f	; 63
     eba:	f8 94       	cli
     ebc:	0f 92       	push	r0
     ebe:	80 91 3d 03 	lds	r24, 0x033D	; 0x80033d <USART_2_rx_elements>
     ec2:	81 50       	subi	r24, 0x01	; 1
     ec4:	80 93 3d 03 	sts	0x033D, r24	; 0x80033d <USART_2_rx_elements>
     ec8:	0f 90       	pop	r0
     eca:	0f be       	out	0x3f, r0	; 63
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	e0 5c       	subi	r30, 0xC0	; 192
     ed0:	fc 4f       	sbci	r31, 0xFC	; 252
     ed2:	80 81       	ld	r24, Z
     ed4:	08 95       	ret

00000ed6 <USART_2_write>:
     ed6:	20 91 34 03 	lds	r18, 0x0334	; 0x800334 <USART_2_tx_head>
     eda:	2f 5f       	subi	r18, 0xFF	; 255
     edc:	27 70       	andi	r18, 0x07	; 7
     ede:	90 91 32 03 	lds	r25, 0x0332	; 0x800332 <USART_2_tx_elements>
     ee2:	98 30       	cpi	r25, 0x08	; 8
     ee4:	e1 f3       	breq	.-8      	; 0xede <USART_2_write+0x8>
     ee6:	e2 2f       	mov	r30, r18
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	eb 5c       	subi	r30, 0xCB	; 203
     eec:	fc 4f       	sbci	r31, 0xFC	; 252
     eee:	80 83       	st	Z, r24
     ef0:	20 93 34 03 	sts	0x0334, r18	; 0x800334 <USART_2_tx_head>
     ef4:	0f b6       	in	r0, 0x3f	; 63
     ef6:	f8 94       	cli
     ef8:	0f 92       	push	r0
     efa:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <USART_2_tx_elements>
     efe:	8f 5f       	subi	r24, 0xFF	; 255
     f00:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <USART_2_tx_elements>
     f04:	0f 90       	pop	r0
     f06:	0f be       	out	0x3f, r0	; 63
     f08:	e1 ed       	ldi	r30, 0xD1	; 209
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	80 81       	ld	r24, Z
     f0e:	80 62       	ori	r24, 0x20	; 32
     f10:	80 83       	st	Z, r24
     f12:	08 95       	ret

00000f14 <USART_2_init>:
     f14:	e5 e6       	ldi	r30, 0x65	; 101
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 81       	ld	r24, Z
     f1a:	8d 7f       	andi	r24, 0xFD	; 253
     f1c:	80 83       	st	Z, r24
     f1e:	10 92 d5 00 	sts	0x00D5, r1	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
     f22:	87 e6       	ldi	r24, 0x67	; 103
     f24:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
     f28:	10 92 d0 00 	sts	0x00D0, r1	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
     f2c:	88 e9       	ldi	r24, 0x98	; 152
     f2e:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>
     f32:	10 92 3e 03 	sts	0x033E, r1	; 0x80033e <USART_2_rx_tail>
     f36:	10 92 3f 03 	sts	0x033F, r1	; 0x80033f <USART_2_rx_head>
     f3a:	10 92 3d 03 	sts	0x033D, r1	; 0x80033d <USART_2_rx_elements>
     f3e:	10 92 33 03 	sts	0x0333, r1	; 0x800333 <USART_2_tx_tail>
     f42:	10 92 34 03 	sts	0x0334, r1	; 0x800334 <USART_2_tx_head>
     f46:	10 92 32 03 	sts	0x0332, r1	; 0x800332 <USART_2_tx_elements>
     f4a:	80 e0       	ldi	r24, 0x00	; 0
     f4c:	08 95       	ret

00000f4e <__vector_54>:
     f4e:	1f 92       	push	r1
     f50:	0f 92       	push	r0
     f52:	0f b6       	in	r0, 0x3f	; 63
     f54:	0f 92       	push	r0
     f56:	11 24       	eor	r1, r1
     f58:	0b b6       	in	r0, 0x3b	; 59
     f5a:	0f 92       	push	r0
     f5c:	8f 93       	push	r24
     f5e:	9f 93       	push	r25
     f60:	ef 93       	push	r30
     f62:	ff 93       	push	r31
     f64:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
     f68:	e0 91 29 03 	lds	r30, 0x0329	; 0x800329 <USART_3_rx_head>
     f6c:	ef 5f       	subi	r30, 0xFF	; 255
     f6e:	e7 70       	andi	r30, 0x07	; 7
     f70:	e0 93 29 03 	sts	0x0329, r30	; 0x800329 <USART_3_rx_head>
     f74:	90 91 28 03 	lds	r25, 0x0328	; 0x800328 <USART_3_rx_tail>
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	e6 5d       	subi	r30, 0xD6	; 214
     f7c:	fc 4f       	sbci	r31, 0xFC	; 252
     f7e:	80 83       	st	Z, r24
     f80:	80 91 27 03 	lds	r24, 0x0327	; 0x800327 <USART_3_rx_elements>
     f84:	8f 5f       	subi	r24, 0xFF	; 255
     f86:	80 93 27 03 	sts	0x0327, r24	; 0x800327 <USART_3_rx_elements>
     f8a:	ff 91       	pop	r31
     f8c:	ef 91       	pop	r30
     f8e:	9f 91       	pop	r25
     f90:	8f 91       	pop	r24
     f92:	0f 90       	pop	r0
     f94:	0b be       	out	0x3b, r0	; 59
     f96:	0f 90       	pop	r0
     f98:	0f be       	out	0x3f, r0	; 63
     f9a:	0f 90       	pop	r0
     f9c:	1f 90       	pop	r1
     f9e:	18 95       	reti

00000fa0 <__vector_55>:
     fa0:	1f 92       	push	r1
     fa2:	0f 92       	push	r0
     fa4:	0f b6       	in	r0, 0x3f	; 63
     fa6:	0f 92       	push	r0
     fa8:	11 24       	eor	r1, r1
     faa:	0b b6       	in	r0, 0x3b	; 59
     fac:	0f 92       	push	r0
     fae:	8f 93       	push	r24
     fb0:	ef 93       	push	r30
     fb2:	ff 93       	push	r31
     fb4:	80 91 1c 03 	lds	r24, 0x031C	; 0x80031c <USART_3_tx_elements>
     fb8:	88 23       	and	r24, r24
     fba:	89 f0       	breq	.+34     	; 0xfde <__vector_55+0x3e>
     fbc:	e0 91 1d 03 	lds	r30, 0x031D	; 0x80031d <USART_3_tx_tail>
     fc0:	ef 5f       	subi	r30, 0xFF	; 255
     fc2:	e7 70       	andi	r30, 0x07	; 7
     fc4:	e0 93 1d 03 	sts	0x031D, r30	; 0x80031d <USART_3_tx_tail>
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	e1 5e       	subi	r30, 0xE1	; 225
     fcc:	fc 4f       	sbci	r31, 0xFC	; 252
     fce:	80 81       	ld	r24, Z
     fd0:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
     fd4:	80 91 1c 03 	lds	r24, 0x031C	; 0x80031c <USART_3_tx_elements>
     fd8:	81 50       	subi	r24, 0x01	; 1
     fda:	80 93 1c 03 	sts	0x031C, r24	; 0x80031c <USART_3_tx_elements>
     fde:	80 91 1c 03 	lds	r24, 0x031C	; 0x80031c <USART_3_tx_elements>
     fe2:	81 11       	cpse	r24, r1
     fe4:	05 c0       	rjmp	.+10     	; 0xff0 <__vector_55+0x50>
     fe6:	e1 e3       	ldi	r30, 0x31	; 49
     fe8:	f1 e0       	ldi	r31, 0x01	; 1
     fea:	80 81       	ld	r24, Z
     fec:	8f 7d       	andi	r24, 0xDF	; 223
     fee:	80 83       	st	Z, r24
     ff0:	ff 91       	pop	r31
     ff2:	ef 91       	pop	r30
     ff4:	8f 91       	pop	r24
     ff6:	0f 90       	pop	r0
     ff8:	0b be       	out	0x3b, r0	; 59
     ffa:	0f 90       	pop	r0
     ffc:	0f be       	out	0x3f, r0	; 63
     ffe:	0f 90       	pop	r0
    1000:	1f 90       	pop	r1
    1002:	18 95       	reti

00001004 <USART_3_write>:
void USART_3_write(const uint8_t data)
{
	uint8_t tmphead;

	/* Calculate buffer index */
	tmphead = (USART_3_tx_head + 1) & USART_3_TX_BUFFER_MASK;
    1004:	20 91 1e 03 	lds	r18, 0x031E	; 0x80031e <USART_3_tx_head>
    1008:	2f 5f       	subi	r18, 0xFF	; 255
    100a:	27 70       	andi	r18, 0x07	; 7
	/* Wait for free space in buffer */
	while (USART_3_tx_elements == USART_3_TX_BUFFER_SIZE)
    100c:	90 91 1c 03 	lds	r25, 0x031C	; 0x80031c <USART_3_tx_elements>
    1010:	98 30       	cpi	r25, 0x08	; 8
    1012:	e1 f3       	breq	.-8      	; 0x100c <USART_3_write+0x8>
		;
	/* Store data in buffer */
	USART_3_txbuf[tmphead] = data;
    1014:	e2 2f       	mov	r30, r18
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	e1 5e       	subi	r30, 0xE1	; 225
    101a:	fc 4f       	sbci	r31, 0xFC	; 252
    101c:	80 83       	st	Z, r24
	/* Store new index */
	USART_3_tx_head = tmphead;
    101e:	20 93 1e 03 	sts	0x031E, r18	; 0x80031e <USART_3_tx_head>
	ENTER_CRITICAL(W);
    1022:	0f b6       	in	r0, 0x3f	; 63
    1024:	f8 94       	cli
    1026:	0f 92       	push	r0
	USART_3_tx_elements++;
    1028:	80 91 1c 03 	lds	r24, 0x031C	; 0x80031c <USART_3_tx_elements>
    102c:	8f 5f       	subi	r24, 0xFF	; 255
    102e:	80 93 1c 03 	sts	0x031C, r24	; 0x80031c <USART_3_tx_elements>
	EXIT_CRITICAL(W);
    1032:	0f 90       	pop	r0
    1034:	0f be       	out	0x3f, r0	; 63
	/* Enable UDRE interrupt */
	UCSR3B |= (1 << UDRIE3);
    1036:	e1 e3       	ldi	r30, 0x31	; 49
    1038:	f1 e0       	ldi	r31, 0x01	; 1
    103a:	80 81       	ld	r24, Z
    103c:	80 62       	ori	r24, 0x20	; 32
    103e:	80 83       	st	Z, r24
    1040:	08 95       	ret

00001042 <USART_3_printCHAR>:
    1042:	e0 df       	rcall	.-64     	; 0x1004 <USART_3_write>
    1044:	80 e0       	ldi	r24, 0x00	; 0
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	08 95       	ret

0000104a <USART_3_init>:
    104a:	e5 e6       	ldi	r30, 0x65	; 101
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	80 81       	ld	r24, Z
    1050:	8b 7f       	andi	r24, 0xFB	; 251
    1052:	80 83       	st	Z, r24
    1054:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <__TEXT_REGION_LENGTH__+0x700135>
    1058:	87 e6       	ldi	r24, 0x67	; 103
    105a:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__TEXT_REGION_LENGTH__+0x700134>
    105e:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
    1062:	88 e9       	ldi	r24, 0x98	; 152
    1064:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <__TEXT_REGION_LENGTH__+0x700131>
    1068:	10 92 28 03 	sts	0x0328, r1	; 0x800328 <USART_3_rx_tail>
    106c:	10 92 29 03 	sts	0x0329, r1	; 0x800329 <USART_3_rx_head>
    1070:	10 92 27 03 	sts	0x0327, r1	; 0x800327 <USART_3_rx_elements>
    1074:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <USART_3_tx_tail>
    1078:	10 92 1e 03 	sts	0x031E, r1	; 0x80031e <USART_3_tx_head>
    107c:	10 92 1c 03 	sts	0x031C, r1	; 0x80031c <USART_3_tx_elements>
    1080:	80 e0       	ldi	r24, 0x00	; 0
    1082:	92 e0       	ldi	r25, 0x02	; 2
    1084:	90 93 2f 04 	sts	0x042F, r25	; 0x80042f <__iob+0x3>
    1088:	80 93 2e 04 	sts	0x042E, r24	; 0x80042e <__iob+0x2>
    108c:	80 e0       	ldi	r24, 0x00	; 0
    108e:	08 95       	ret

00001090 <__adddi3>:
    1090:	2a 0d       	add	r18, r10
    1092:	3b 1d       	adc	r19, r11
    1094:	4c 1d       	adc	r20, r12
    1096:	5d 1d       	adc	r21, r13
    1098:	6e 1d       	adc	r22, r14
    109a:	7f 1d       	adc	r23, r15
    109c:	80 1f       	adc	r24, r16
    109e:	91 1f       	adc	r25, r17
    10a0:	08 95       	ret

000010a2 <__adddi3_s8>:
    10a2:	00 24       	eor	r0, r0
    10a4:	a7 fd       	sbrc	r26, 7
    10a6:	00 94       	com	r0
    10a8:	2a 0f       	add	r18, r26
    10aa:	30 1d       	adc	r19, r0
    10ac:	40 1d       	adc	r20, r0
    10ae:	50 1d       	adc	r21, r0
    10b0:	60 1d       	adc	r22, r0
    10b2:	70 1d       	adc	r23, r0
    10b4:	80 1d       	adc	r24, r0
    10b6:	90 1d       	adc	r25, r0
    10b8:	08 95       	ret

000010ba <__cmpdi2>:
    10ba:	2a 15       	cp	r18, r10
    10bc:	3b 05       	cpc	r19, r11
    10be:	4c 05       	cpc	r20, r12
    10c0:	5d 05       	cpc	r21, r13
    10c2:	6e 05       	cpc	r22, r14
    10c4:	7f 05       	cpc	r23, r15
    10c6:	80 07       	cpc	r24, r16
    10c8:	91 07       	cpc	r25, r17
    10ca:	08 95       	ret

000010cc <strncmp>:
    10cc:	fb 01       	movw	r30, r22
    10ce:	dc 01       	movw	r26, r24
    10d0:	41 50       	subi	r20, 0x01	; 1
    10d2:	50 40       	sbci	r21, 0x00	; 0
    10d4:	30 f0       	brcs	.+12     	; 0x10e2 <strncmp+0x16>
    10d6:	8d 91       	ld	r24, X+
    10d8:	01 90       	ld	r0, Z+
    10da:	80 19       	sub	r24, r0
    10dc:	19 f4       	brne	.+6      	; 0x10e4 <strncmp+0x18>
    10de:	00 20       	and	r0, r0
    10e0:	b9 f7       	brne	.-18     	; 0x10d0 <strncmp+0x4>
    10e2:	88 1b       	sub	r24, r24
    10e4:	99 0b       	sbc	r25, r25
    10e6:	08 95       	ret

000010e8 <printf>:
    10e8:	cf 93       	push	r28
    10ea:	df 93       	push	r29
    10ec:	cd b7       	in	r28, 0x3d	; 61
    10ee:	de b7       	in	r29, 0x3e	; 62
    10f0:	ae 01       	movw	r20, r28
    10f2:	4a 5f       	subi	r20, 0xFA	; 250
    10f4:	5f 4f       	sbci	r21, 0xFF	; 255
    10f6:	fa 01       	movw	r30, r20
    10f8:	61 91       	ld	r22, Z+
    10fa:	71 91       	ld	r23, Z+
    10fc:	af 01       	movw	r20, r30
    10fe:	80 91 2e 04 	lds	r24, 0x042E	; 0x80042e <__iob+0x2>
    1102:	90 91 2f 04 	lds	r25, 0x042F	; 0x80042f <__iob+0x3>
    1106:	24 d0       	rcall	.+72     	; 0x1150 <vfprintf>
    1108:	df 91       	pop	r29
    110a:	cf 91       	pop	r28
    110c:	08 95       	ret

0000110e <sscanf>:
    110e:	cf 93       	push	r28
    1110:	df 93       	push	r29
    1112:	cd b7       	in	r28, 0x3d	; 61
    1114:	de b7       	in	r29, 0x3e	; 62
    1116:	2e 97       	sbiw	r28, 0x0e	; 14
    1118:	0f b6       	in	r0, 0x3f	; 63
    111a:	f8 94       	cli
    111c:	de bf       	out	0x3e, r29	; 62
    111e:	0f be       	out	0x3f, r0	; 63
    1120:	cd bf       	out	0x3d, r28	; 61
    1122:	85 e0       	ldi	r24, 0x05	; 5
    1124:	8c 83       	std	Y+4, r24	; 0x04
    1126:	8c 89       	ldd	r24, Y+20	; 0x14
    1128:	9d 89       	ldd	r25, Y+21	; 0x15
    112a:	9a 83       	std	Y+2, r25	; 0x02
    112c:	89 83       	std	Y+1, r24	; 0x01
    112e:	ae 01       	movw	r20, r28
    1130:	48 5e       	subi	r20, 0xE8	; 232
    1132:	5f 4f       	sbci	r21, 0xFF	; 255
    1134:	6e 89       	ldd	r22, Y+22	; 0x16
    1136:	7f 89       	ldd	r23, Y+23	; 0x17
    1138:	ce 01       	movw	r24, r28
    113a:	01 96       	adiw	r24, 0x01	; 1
    113c:	b8 d3       	rcall	.+1904   	; 0x18ae <vfscanf>
    113e:	2e 96       	adiw	r28, 0x0e	; 14
    1140:	0f b6       	in	r0, 0x3f	; 63
    1142:	f8 94       	cli
    1144:	de bf       	out	0x3e, r29	; 62
    1146:	0f be       	out	0x3f, r0	; 63
    1148:	cd bf       	out	0x3d, r28	; 61
    114a:	df 91       	pop	r29
    114c:	cf 91       	pop	r28
    114e:	08 95       	ret

00001150 <vfprintf>:
    1150:	2f 92       	push	r2
    1152:	3f 92       	push	r3
    1154:	4f 92       	push	r4
    1156:	5f 92       	push	r5
    1158:	6f 92       	push	r6
    115a:	7f 92       	push	r7
    115c:	8f 92       	push	r8
    115e:	9f 92       	push	r9
    1160:	af 92       	push	r10
    1162:	bf 92       	push	r11
    1164:	cf 92       	push	r12
    1166:	df 92       	push	r13
    1168:	ef 92       	push	r14
    116a:	ff 92       	push	r15
    116c:	0f 93       	push	r16
    116e:	1f 93       	push	r17
    1170:	cf 93       	push	r28
    1172:	df 93       	push	r29
    1174:	cd b7       	in	r28, 0x3d	; 61
    1176:	de b7       	in	r29, 0x3e	; 62
    1178:	2b 97       	sbiw	r28, 0x0b	; 11
    117a:	0f b6       	in	r0, 0x3f	; 63
    117c:	f8 94       	cli
    117e:	de bf       	out	0x3e, r29	; 62
    1180:	0f be       	out	0x3f, r0	; 63
    1182:	cd bf       	out	0x3d, r28	; 61
    1184:	6c 01       	movw	r12, r24
    1186:	7b 01       	movw	r14, r22
    1188:	8a 01       	movw	r16, r20
    118a:	fc 01       	movw	r30, r24
    118c:	17 82       	std	Z+7, r1	; 0x07
    118e:	16 82       	std	Z+6, r1	; 0x06
    1190:	83 81       	ldd	r24, Z+3	; 0x03
    1192:	81 ff       	sbrs	r24, 1
    1194:	bf c1       	rjmp	.+894    	; 0x1514 <vfprintf+0x3c4>
    1196:	ce 01       	movw	r24, r28
    1198:	01 96       	adiw	r24, 0x01	; 1
    119a:	3c 01       	movw	r6, r24
    119c:	f6 01       	movw	r30, r12
    119e:	93 81       	ldd	r25, Z+3	; 0x03
    11a0:	f7 01       	movw	r30, r14
    11a2:	93 fd       	sbrc	r25, 3
    11a4:	85 91       	lpm	r24, Z+
    11a6:	93 ff       	sbrs	r25, 3
    11a8:	81 91       	ld	r24, Z+
    11aa:	7f 01       	movw	r14, r30
    11ac:	88 23       	and	r24, r24
    11ae:	09 f4       	brne	.+2      	; 0x11b2 <vfprintf+0x62>
    11b0:	ad c1       	rjmp	.+858    	; 0x150c <vfprintf+0x3bc>
    11b2:	85 32       	cpi	r24, 0x25	; 37
    11b4:	39 f4       	brne	.+14     	; 0x11c4 <vfprintf+0x74>
    11b6:	93 fd       	sbrc	r25, 3
    11b8:	85 91       	lpm	r24, Z+
    11ba:	93 ff       	sbrs	r25, 3
    11bc:	81 91       	ld	r24, Z+
    11be:	7f 01       	movw	r14, r30
    11c0:	85 32       	cpi	r24, 0x25	; 37
    11c2:	21 f4       	brne	.+8      	; 0x11cc <vfprintf+0x7c>
    11c4:	b6 01       	movw	r22, r12
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	f0 d4       	rcall	.+2528   	; 0x1baa <fputc>
    11ca:	e8 cf       	rjmp	.-48     	; 0x119c <vfprintf+0x4c>
    11cc:	91 2c       	mov	r9, r1
    11ce:	21 2c       	mov	r2, r1
    11d0:	31 2c       	mov	r3, r1
    11d2:	ff e1       	ldi	r31, 0x1F	; 31
    11d4:	f3 15       	cp	r31, r3
    11d6:	d8 f0       	brcs	.+54     	; 0x120e <vfprintf+0xbe>
    11d8:	8b 32       	cpi	r24, 0x2B	; 43
    11da:	79 f0       	breq	.+30     	; 0x11fa <vfprintf+0xaa>
    11dc:	38 f4       	brcc	.+14     	; 0x11ec <vfprintf+0x9c>
    11de:	80 32       	cpi	r24, 0x20	; 32
    11e0:	79 f0       	breq	.+30     	; 0x1200 <vfprintf+0xb0>
    11e2:	83 32       	cpi	r24, 0x23	; 35
    11e4:	a1 f4       	brne	.+40     	; 0x120e <vfprintf+0xbe>
    11e6:	23 2d       	mov	r18, r3
    11e8:	20 61       	ori	r18, 0x10	; 16
    11ea:	1d c0       	rjmp	.+58     	; 0x1226 <vfprintf+0xd6>
    11ec:	8d 32       	cpi	r24, 0x2D	; 45
    11ee:	61 f0       	breq	.+24     	; 0x1208 <vfprintf+0xb8>
    11f0:	80 33       	cpi	r24, 0x30	; 48
    11f2:	69 f4       	brne	.+26     	; 0x120e <vfprintf+0xbe>
    11f4:	23 2d       	mov	r18, r3
    11f6:	21 60       	ori	r18, 0x01	; 1
    11f8:	16 c0       	rjmp	.+44     	; 0x1226 <vfprintf+0xd6>
    11fa:	83 2d       	mov	r24, r3
    11fc:	82 60       	ori	r24, 0x02	; 2
    11fe:	38 2e       	mov	r3, r24
    1200:	e3 2d       	mov	r30, r3
    1202:	e4 60       	ori	r30, 0x04	; 4
    1204:	3e 2e       	mov	r3, r30
    1206:	2a c0       	rjmp	.+84     	; 0x125c <vfprintf+0x10c>
    1208:	f3 2d       	mov	r31, r3
    120a:	f8 60       	ori	r31, 0x08	; 8
    120c:	1d c0       	rjmp	.+58     	; 0x1248 <vfprintf+0xf8>
    120e:	37 fc       	sbrc	r3, 7
    1210:	2d c0       	rjmp	.+90     	; 0x126c <vfprintf+0x11c>
    1212:	20 ed       	ldi	r18, 0xD0	; 208
    1214:	28 0f       	add	r18, r24
    1216:	2a 30       	cpi	r18, 0x0A	; 10
    1218:	40 f0       	brcs	.+16     	; 0x122a <vfprintf+0xda>
    121a:	8e 32       	cpi	r24, 0x2E	; 46
    121c:	b9 f4       	brne	.+46     	; 0x124c <vfprintf+0xfc>
    121e:	36 fc       	sbrc	r3, 6
    1220:	75 c1       	rjmp	.+746    	; 0x150c <vfprintf+0x3bc>
    1222:	23 2d       	mov	r18, r3
    1224:	20 64       	ori	r18, 0x40	; 64
    1226:	32 2e       	mov	r3, r18
    1228:	19 c0       	rjmp	.+50     	; 0x125c <vfprintf+0x10c>
    122a:	36 fe       	sbrs	r3, 6
    122c:	06 c0       	rjmp	.+12     	; 0x123a <vfprintf+0xea>
    122e:	8a e0       	ldi	r24, 0x0A	; 10
    1230:	98 9e       	mul	r9, r24
    1232:	20 0d       	add	r18, r0
    1234:	11 24       	eor	r1, r1
    1236:	92 2e       	mov	r9, r18
    1238:	11 c0       	rjmp	.+34     	; 0x125c <vfprintf+0x10c>
    123a:	ea e0       	ldi	r30, 0x0A	; 10
    123c:	2e 9e       	mul	r2, r30
    123e:	20 0d       	add	r18, r0
    1240:	11 24       	eor	r1, r1
    1242:	22 2e       	mov	r2, r18
    1244:	f3 2d       	mov	r31, r3
    1246:	f0 62       	ori	r31, 0x20	; 32
    1248:	3f 2e       	mov	r3, r31
    124a:	08 c0       	rjmp	.+16     	; 0x125c <vfprintf+0x10c>
    124c:	8c 36       	cpi	r24, 0x6C	; 108
    124e:	21 f4       	brne	.+8      	; 0x1258 <vfprintf+0x108>
    1250:	83 2d       	mov	r24, r3
    1252:	80 68       	ori	r24, 0x80	; 128
    1254:	38 2e       	mov	r3, r24
    1256:	02 c0       	rjmp	.+4      	; 0x125c <vfprintf+0x10c>
    1258:	88 36       	cpi	r24, 0x68	; 104
    125a:	41 f4       	brne	.+16     	; 0x126c <vfprintf+0x11c>
    125c:	f7 01       	movw	r30, r14
    125e:	93 fd       	sbrc	r25, 3
    1260:	85 91       	lpm	r24, Z+
    1262:	93 ff       	sbrs	r25, 3
    1264:	81 91       	ld	r24, Z+
    1266:	7f 01       	movw	r14, r30
    1268:	81 11       	cpse	r24, r1
    126a:	b3 cf       	rjmp	.-154    	; 0x11d2 <vfprintf+0x82>
    126c:	98 2f       	mov	r25, r24
    126e:	9f 7d       	andi	r25, 0xDF	; 223
    1270:	95 54       	subi	r25, 0x45	; 69
    1272:	93 30       	cpi	r25, 0x03	; 3
    1274:	28 f4       	brcc	.+10     	; 0x1280 <vfprintf+0x130>
    1276:	0c 5f       	subi	r16, 0xFC	; 252
    1278:	1f 4f       	sbci	r17, 0xFF	; 255
    127a:	9f e3       	ldi	r25, 0x3F	; 63
    127c:	99 83       	std	Y+1, r25	; 0x01
    127e:	0d c0       	rjmp	.+26     	; 0x129a <vfprintf+0x14a>
    1280:	83 36       	cpi	r24, 0x63	; 99
    1282:	31 f0       	breq	.+12     	; 0x1290 <vfprintf+0x140>
    1284:	83 37       	cpi	r24, 0x73	; 115
    1286:	71 f0       	breq	.+28     	; 0x12a4 <vfprintf+0x154>
    1288:	83 35       	cpi	r24, 0x53	; 83
    128a:	09 f0       	breq	.+2      	; 0x128e <vfprintf+0x13e>
    128c:	55 c0       	rjmp	.+170    	; 0x1338 <vfprintf+0x1e8>
    128e:	20 c0       	rjmp	.+64     	; 0x12d0 <vfprintf+0x180>
    1290:	f8 01       	movw	r30, r16
    1292:	80 81       	ld	r24, Z
    1294:	89 83       	std	Y+1, r24	; 0x01
    1296:	0e 5f       	subi	r16, 0xFE	; 254
    1298:	1f 4f       	sbci	r17, 0xFF	; 255
    129a:	88 24       	eor	r8, r8
    129c:	83 94       	inc	r8
    129e:	91 2c       	mov	r9, r1
    12a0:	53 01       	movw	r10, r6
    12a2:	12 c0       	rjmp	.+36     	; 0x12c8 <vfprintf+0x178>
    12a4:	28 01       	movw	r4, r16
    12a6:	f2 e0       	ldi	r31, 0x02	; 2
    12a8:	4f 0e       	add	r4, r31
    12aa:	51 1c       	adc	r5, r1
    12ac:	f8 01       	movw	r30, r16
    12ae:	a0 80       	ld	r10, Z
    12b0:	b1 80       	ldd	r11, Z+1	; 0x01
    12b2:	36 fe       	sbrs	r3, 6
    12b4:	03 c0       	rjmp	.+6      	; 0x12bc <vfprintf+0x16c>
    12b6:	69 2d       	mov	r22, r9
    12b8:	70 e0       	ldi	r23, 0x00	; 0
    12ba:	02 c0       	rjmp	.+4      	; 0x12c0 <vfprintf+0x170>
    12bc:	6f ef       	ldi	r22, 0xFF	; 255
    12be:	7f ef       	ldi	r23, 0xFF	; 255
    12c0:	c5 01       	movw	r24, r10
    12c2:	2a d4       	rcall	.+2132   	; 0x1b18 <strnlen>
    12c4:	4c 01       	movw	r8, r24
    12c6:	82 01       	movw	r16, r4
    12c8:	f3 2d       	mov	r31, r3
    12ca:	ff 77       	andi	r31, 0x7F	; 127
    12cc:	3f 2e       	mov	r3, r31
    12ce:	15 c0       	rjmp	.+42     	; 0x12fa <vfprintf+0x1aa>
    12d0:	28 01       	movw	r4, r16
    12d2:	22 e0       	ldi	r18, 0x02	; 2
    12d4:	42 0e       	add	r4, r18
    12d6:	51 1c       	adc	r5, r1
    12d8:	f8 01       	movw	r30, r16
    12da:	a0 80       	ld	r10, Z
    12dc:	b1 80       	ldd	r11, Z+1	; 0x01
    12de:	36 fe       	sbrs	r3, 6
    12e0:	03 c0       	rjmp	.+6      	; 0x12e8 <vfprintf+0x198>
    12e2:	69 2d       	mov	r22, r9
    12e4:	70 e0       	ldi	r23, 0x00	; 0
    12e6:	02 c0       	rjmp	.+4      	; 0x12ec <vfprintf+0x19c>
    12e8:	6f ef       	ldi	r22, 0xFF	; 255
    12ea:	7f ef       	ldi	r23, 0xFF	; 255
    12ec:	c5 01       	movw	r24, r10
    12ee:	09 d4       	rcall	.+2066   	; 0x1b02 <strnlen_P>
    12f0:	4c 01       	movw	r8, r24
    12f2:	f3 2d       	mov	r31, r3
    12f4:	f0 68       	ori	r31, 0x80	; 128
    12f6:	3f 2e       	mov	r3, r31
    12f8:	82 01       	movw	r16, r4
    12fa:	33 fc       	sbrc	r3, 3
    12fc:	19 c0       	rjmp	.+50     	; 0x1330 <vfprintf+0x1e0>
    12fe:	82 2d       	mov	r24, r2
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	88 16       	cp	r8, r24
    1304:	99 06       	cpc	r9, r25
    1306:	a0 f4       	brcc	.+40     	; 0x1330 <vfprintf+0x1e0>
    1308:	b6 01       	movw	r22, r12
    130a:	80 e2       	ldi	r24, 0x20	; 32
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	4d d4       	rcall	.+2202   	; 0x1baa <fputc>
    1310:	2a 94       	dec	r2
    1312:	f5 cf       	rjmp	.-22     	; 0x12fe <vfprintf+0x1ae>
    1314:	f5 01       	movw	r30, r10
    1316:	37 fc       	sbrc	r3, 7
    1318:	85 91       	lpm	r24, Z+
    131a:	37 fe       	sbrs	r3, 7
    131c:	81 91       	ld	r24, Z+
    131e:	5f 01       	movw	r10, r30
    1320:	b6 01       	movw	r22, r12
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	42 d4       	rcall	.+2180   	; 0x1baa <fputc>
    1326:	21 10       	cpse	r2, r1
    1328:	2a 94       	dec	r2
    132a:	21 e0       	ldi	r18, 0x01	; 1
    132c:	82 1a       	sub	r8, r18
    132e:	91 08       	sbc	r9, r1
    1330:	81 14       	cp	r8, r1
    1332:	91 04       	cpc	r9, r1
    1334:	79 f7       	brne	.-34     	; 0x1314 <vfprintf+0x1c4>
    1336:	e1 c0       	rjmp	.+450    	; 0x14fa <vfprintf+0x3aa>
    1338:	84 36       	cpi	r24, 0x64	; 100
    133a:	11 f0       	breq	.+4      	; 0x1340 <vfprintf+0x1f0>
    133c:	89 36       	cpi	r24, 0x69	; 105
    133e:	39 f5       	brne	.+78     	; 0x138e <vfprintf+0x23e>
    1340:	f8 01       	movw	r30, r16
    1342:	37 fe       	sbrs	r3, 7
    1344:	07 c0       	rjmp	.+14     	; 0x1354 <vfprintf+0x204>
    1346:	60 81       	ld	r22, Z
    1348:	71 81       	ldd	r23, Z+1	; 0x01
    134a:	82 81       	ldd	r24, Z+2	; 0x02
    134c:	93 81       	ldd	r25, Z+3	; 0x03
    134e:	0c 5f       	subi	r16, 0xFC	; 252
    1350:	1f 4f       	sbci	r17, 0xFF	; 255
    1352:	08 c0       	rjmp	.+16     	; 0x1364 <vfprintf+0x214>
    1354:	60 81       	ld	r22, Z
    1356:	71 81       	ldd	r23, Z+1	; 0x01
    1358:	07 2e       	mov	r0, r23
    135a:	00 0c       	add	r0, r0
    135c:	88 0b       	sbc	r24, r24
    135e:	99 0b       	sbc	r25, r25
    1360:	0e 5f       	subi	r16, 0xFE	; 254
    1362:	1f 4f       	sbci	r17, 0xFF	; 255
    1364:	f3 2d       	mov	r31, r3
    1366:	ff 76       	andi	r31, 0x6F	; 111
    1368:	3f 2e       	mov	r3, r31
    136a:	97 ff       	sbrs	r25, 7
    136c:	09 c0       	rjmp	.+18     	; 0x1380 <vfprintf+0x230>
    136e:	90 95       	com	r25
    1370:	80 95       	com	r24
    1372:	70 95       	com	r23
    1374:	61 95       	neg	r22
    1376:	7f 4f       	sbci	r23, 0xFF	; 255
    1378:	8f 4f       	sbci	r24, 0xFF	; 255
    137a:	9f 4f       	sbci	r25, 0xFF	; 255
    137c:	f0 68       	ori	r31, 0x80	; 128
    137e:	3f 2e       	mov	r3, r31
    1380:	2a e0       	ldi	r18, 0x0A	; 10
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	a3 01       	movw	r20, r6
    1386:	66 d4       	rcall	.+2252   	; 0x1c54 <__ultoa_invert>
    1388:	88 2e       	mov	r8, r24
    138a:	86 18       	sub	r8, r6
    138c:	44 c0       	rjmp	.+136    	; 0x1416 <vfprintf+0x2c6>
    138e:	85 37       	cpi	r24, 0x75	; 117
    1390:	31 f4       	brne	.+12     	; 0x139e <vfprintf+0x24e>
    1392:	23 2d       	mov	r18, r3
    1394:	2f 7e       	andi	r18, 0xEF	; 239
    1396:	b2 2e       	mov	r11, r18
    1398:	2a e0       	ldi	r18, 0x0A	; 10
    139a:	30 e0       	ldi	r19, 0x00	; 0
    139c:	25 c0       	rjmp	.+74     	; 0x13e8 <vfprintf+0x298>
    139e:	93 2d       	mov	r25, r3
    13a0:	99 7f       	andi	r25, 0xF9	; 249
    13a2:	b9 2e       	mov	r11, r25
    13a4:	8f 36       	cpi	r24, 0x6F	; 111
    13a6:	c1 f0       	breq	.+48     	; 0x13d8 <vfprintf+0x288>
    13a8:	18 f4       	brcc	.+6      	; 0x13b0 <vfprintf+0x260>
    13aa:	88 35       	cpi	r24, 0x58	; 88
    13ac:	79 f0       	breq	.+30     	; 0x13cc <vfprintf+0x27c>
    13ae:	ae c0       	rjmp	.+348    	; 0x150c <vfprintf+0x3bc>
    13b0:	80 37       	cpi	r24, 0x70	; 112
    13b2:	19 f0       	breq	.+6      	; 0x13ba <vfprintf+0x26a>
    13b4:	88 37       	cpi	r24, 0x78	; 120
    13b6:	21 f0       	breq	.+8      	; 0x13c0 <vfprintf+0x270>
    13b8:	a9 c0       	rjmp	.+338    	; 0x150c <vfprintf+0x3bc>
    13ba:	e9 2f       	mov	r30, r25
    13bc:	e0 61       	ori	r30, 0x10	; 16
    13be:	be 2e       	mov	r11, r30
    13c0:	b4 fe       	sbrs	r11, 4
    13c2:	0d c0       	rjmp	.+26     	; 0x13de <vfprintf+0x28e>
    13c4:	fb 2d       	mov	r31, r11
    13c6:	f4 60       	ori	r31, 0x04	; 4
    13c8:	bf 2e       	mov	r11, r31
    13ca:	09 c0       	rjmp	.+18     	; 0x13de <vfprintf+0x28e>
    13cc:	34 fe       	sbrs	r3, 4
    13ce:	0a c0       	rjmp	.+20     	; 0x13e4 <vfprintf+0x294>
    13d0:	29 2f       	mov	r18, r25
    13d2:	26 60       	ori	r18, 0x06	; 6
    13d4:	b2 2e       	mov	r11, r18
    13d6:	06 c0       	rjmp	.+12     	; 0x13e4 <vfprintf+0x294>
    13d8:	28 e0       	ldi	r18, 0x08	; 8
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	05 c0       	rjmp	.+10     	; 0x13e8 <vfprintf+0x298>
    13de:	20 e1       	ldi	r18, 0x10	; 16
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	02 c0       	rjmp	.+4      	; 0x13e8 <vfprintf+0x298>
    13e4:	20 e1       	ldi	r18, 0x10	; 16
    13e6:	32 e0       	ldi	r19, 0x02	; 2
    13e8:	f8 01       	movw	r30, r16
    13ea:	b7 fe       	sbrs	r11, 7
    13ec:	07 c0       	rjmp	.+14     	; 0x13fc <vfprintf+0x2ac>
    13ee:	60 81       	ld	r22, Z
    13f0:	71 81       	ldd	r23, Z+1	; 0x01
    13f2:	82 81       	ldd	r24, Z+2	; 0x02
    13f4:	93 81       	ldd	r25, Z+3	; 0x03
    13f6:	0c 5f       	subi	r16, 0xFC	; 252
    13f8:	1f 4f       	sbci	r17, 0xFF	; 255
    13fa:	06 c0       	rjmp	.+12     	; 0x1408 <vfprintf+0x2b8>
    13fc:	60 81       	ld	r22, Z
    13fe:	71 81       	ldd	r23, Z+1	; 0x01
    1400:	80 e0       	ldi	r24, 0x00	; 0
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	0e 5f       	subi	r16, 0xFE	; 254
    1406:	1f 4f       	sbci	r17, 0xFF	; 255
    1408:	a3 01       	movw	r20, r6
    140a:	24 d4       	rcall	.+2120   	; 0x1c54 <__ultoa_invert>
    140c:	88 2e       	mov	r8, r24
    140e:	86 18       	sub	r8, r6
    1410:	fb 2d       	mov	r31, r11
    1412:	ff 77       	andi	r31, 0x7F	; 127
    1414:	3f 2e       	mov	r3, r31
    1416:	36 fe       	sbrs	r3, 6
    1418:	0d c0       	rjmp	.+26     	; 0x1434 <vfprintf+0x2e4>
    141a:	23 2d       	mov	r18, r3
    141c:	2e 7f       	andi	r18, 0xFE	; 254
    141e:	a2 2e       	mov	r10, r18
    1420:	89 14       	cp	r8, r9
    1422:	58 f4       	brcc	.+22     	; 0x143a <vfprintf+0x2ea>
    1424:	34 fe       	sbrs	r3, 4
    1426:	0b c0       	rjmp	.+22     	; 0x143e <vfprintf+0x2ee>
    1428:	32 fc       	sbrc	r3, 2
    142a:	09 c0       	rjmp	.+18     	; 0x143e <vfprintf+0x2ee>
    142c:	83 2d       	mov	r24, r3
    142e:	8e 7e       	andi	r24, 0xEE	; 238
    1430:	a8 2e       	mov	r10, r24
    1432:	05 c0       	rjmp	.+10     	; 0x143e <vfprintf+0x2ee>
    1434:	b8 2c       	mov	r11, r8
    1436:	a3 2c       	mov	r10, r3
    1438:	03 c0       	rjmp	.+6      	; 0x1440 <vfprintf+0x2f0>
    143a:	b8 2c       	mov	r11, r8
    143c:	01 c0       	rjmp	.+2      	; 0x1440 <vfprintf+0x2f0>
    143e:	b9 2c       	mov	r11, r9
    1440:	a4 fe       	sbrs	r10, 4
    1442:	0f c0       	rjmp	.+30     	; 0x1462 <vfprintf+0x312>
    1444:	fe 01       	movw	r30, r28
    1446:	e8 0d       	add	r30, r8
    1448:	f1 1d       	adc	r31, r1
    144a:	80 81       	ld	r24, Z
    144c:	80 33       	cpi	r24, 0x30	; 48
    144e:	21 f4       	brne	.+8      	; 0x1458 <vfprintf+0x308>
    1450:	9a 2d       	mov	r25, r10
    1452:	99 7e       	andi	r25, 0xE9	; 233
    1454:	a9 2e       	mov	r10, r25
    1456:	09 c0       	rjmp	.+18     	; 0x146a <vfprintf+0x31a>
    1458:	a2 fe       	sbrs	r10, 2
    145a:	06 c0       	rjmp	.+12     	; 0x1468 <vfprintf+0x318>
    145c:	b3 94       	inc	r11
    145e:	b3 94       	inc	r11
    1460:	04 c0       	rjmp	.+8      	; 0x146a <vfprintf+0x31a>
    1462:	8a 2d       	mov	r24, r10
    1464:	86 78       	andi	r24, 0x86	; 134
    1466:	09 f0       	breq	.+2      	; 0x146a <vfprintf+0x31a>
    1468:	b3 94       	inc	r11
    146a:	a3 fc       	sbrc	r10, 3
    146c:	10 c0       	rjmp	.+32     	; 0x148e <vfprintf+0x33e>
    146e:	a0 fe       	sbrs	r10, 0
    1470:	06 c0       	rjmp	.+12     	; 0x147e <vfprintf+0x32e>
    1472:	b2 14       	cp	r11, r2
    1474:	80 f4       	brcc	.+32     	; 0x1496 <vfprintf+0x346>
    1476:	28 0c       	add	r2, r8
    1478:	92 2c       	mov	r9, r2
    147a:	9b 18       	sub	r9, r11
    147c:	0d c0       	rjmp	.+26     	; 0x1498 <vfprintf+0x348>
    147e:	b2 14       	cp	r11, r2
    1480:	58 f4       	brcc	.+22     	; 0x1498 <vfprintf+0x348>
    1482:	b6 01       	movw	r22, r12
    1484:	80 e2       	ldi	r24, 0x20	; 32
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	90 d3       	rcall	.+1824   	; 0x1baa <fputc>
    148a:	b3 94       	inc	r11
    148c:	f8 cf       	rjmp	.-16     	; 0x147e <vfprintf+0x32e>
    148e:	b2 14       	cp	r11, r2
    1490:	18 f4       	brcc	.+6      	; 0x1498 <vfprintf+0x348>
    1492:	2b 18       	sub	r2, r11
    1494:	02 c0       	rjmp	.+4      	; 0x149a <vfprintf+0x34a>
    1496:	98 2c       	mov	r9, r8
    1498:	21 2c       	mov	r2, r1
    149a:	a4 fe       	sbrs	r10, 4
    149c:	0f c0       	rjmp	.+30     	; 0x14bc <vfprintf+0x36c>
    149e:	b6 01       	movw	r22, r12
    14a0:	80 e3       	ldi	r24, 0x30	; 48
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	82 d3       	rcall	.+1796   	; 0x1baa <fputc>
    14a6:	a2 fe       	sbrs	r10, 2
    14a8:	16 c0       	rjmp	.+44     	; 0x14d6 <vfprintf+0x386>
    14aa:	a1 fc       	sbrc	r10, 1
    14ac:	03 c0       	rjmp	.+6      	; 0x14b4 <vfprintf+0x364>
    14ae:	88 e7       	ldi	r24, 0x78	; 120
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	02 c0       	rjmp	.+4      	; 0x14b8 <vfprintf+0x368>
    14b4:	88 e5       	ldi	r24, 0x58	; 88
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	b6 01       	movw	r22, r12
    14ba:	0c c0       	rjmp	.+24     	; 0x14d4 <vfprintf+0x384>
    14bc:	8a 2d       	mov	r24, r10
    14be:	86 78       	andi	r24, 0x86	; 134
    14c0:	51 f0       	breq	.+20     	; 0x14d6 <vfprintf+0x386>
    14c2:	a1 fe       	sbrs	r10, 1
    14c4:	02 c0       	rjmp	.+4      	; 0x14ca <vfprintf+0x37a>
    14c6:	8b e2       	ldi	r24, 0x2B	; 43
    14c8:	01 c0       	rjmp	.+2      	; 0x14cc <vfprintf+0x37c>
    14ca:	80 e2       	ldi	r24, 0x20	; 32
    14cc:	a7 fc       	sbrc	r10, 7
    14ce:	8d e2       	ldi	r24, 0x2D	; 45
    14d0:	b6 01       	movw	r22, r12
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	6a d3       	rcall	.+1748   	; 0x1baa <fputc>
    14d6:	89 14       	cp	r8, r9
    14d8:	30 f4       	brcc	.+12     	; 0x14e6 <vfprintf+0x396>
    14da:	b6 01       	movw	r22, r12
    14dc:	80 e3       	ldi	r24, 0x30	; 48
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	64 d3       	rcall	.+1736   	; 0x1baa <fputc>
    14e2:	9a 94       	dec	r9
    14e4:	f8 cf       	rjmp	.-16     	; 0x14d6 <vfprintf+0x386>
    14e6:	8a 94       	dec	r8
    14e8:	f3 01       	movw	r30, r6
    14ea:	e8 0d       	add	r30, r8
    14ec:	f1 1d       	adc	r31, r1
    14ee:	80 81       	ld	r24, Z
    14f0:	b6 01       	movw	r22, r12
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	5a d3       	rcall	.+1716   	; 0x1baa <fputc>
    14f6:	81 10       	cpse	r8, r1
    14f8:	f6 cf       	rjmp	.-20     	; 0x14e6 <vfprintf+0x396>
    14fa:	22 20       	and	r2, r2
    14fc:	09 f4       	brne	.+2      	; 0x1500 <vfprintf+0x3b0>
    14fe:	4e ce       	rjmp	.-868    	; 0x119c <vfprintf+0x4c>
    1500:	b6 01       	movw	r22, r12
    1502:	80 e2       	ldi	r24, 0x20	; 32
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	51 d3       	rcall	.+1698   	; 0x1baa <fputc>
    1508:	2a 94       	dec	r2
    150a:	f7 cf       	rjmp	.-18     	; 0x14fa <vfprintf+0x3aa>
    150c:	f6 01       	movw	r30, r12
    150e:	86 81       	ldd	r24, Z+6	; 0x06
    1510:	97 81       	ldd	r25, Z+7	; 0x07
    1512:	02 c0       	rjmp	.+4      	; 0x1518 <vfprintf+0x3c8>
    1514:	8f ef       	ldi	r24, 0xFF	; 255
    1516:	9f ef       	ldi	r25, 0xFF	; 255
    1518:	2b 96       	adiw	r28, 0x0b	; 11
    151a:	0f b6       	in	r0, 0x3f	; 63
    151c:	f8 94       	cli
    151e:	de bf       	out	0x3e, r29	; 62
    1520:	0f be       	out	0x3f, r0	; 63
    1522:	cd bf       	out	0x3d, r28	; 61
    1524:	df 91       	pop	r29
    1526:	cf 91       	pop	r28
    1528:	1f 91       	pop	r17
    152a:	0f 91       	pop	r16
    152c:	ff 90       	pop	r15
    152e:	ef 90       	pop	r14
    1530:	df 90       	pop	r13
    1532:	cf 90       	pop	r12
    1534:	bf 90       	pop	r11
    1536:	af 90       	pop	r10
    1538:	9f 90       	pop	r9
    153a:	8f 90       	pop	r8
    153c:	7f 90       	pop	r7
    153e:	6f 90       	pop	r6
    1540:	5f 90       	pop	r5
    1542:	4f 90       	pop	r4
    1544:	3f 90       	pop	r3
    1546:	2f 90       	pop	r2
    1548:	08 95       	ret

0000154a <putval>:
    154a:	20 fd       	sbrc	r18, 0
    154c:	09 c0       	rjmp	.+18     	; 0x1560 <putval+0x16>
    154e:	fc 01       	movw	r30, r24
    1550:	23 fd       	sbrc	r18, 3
    1552:	05 c0       	rjmp	.+10     	; 0x155e <putval+0x14>
    1554:	22 ff       	sbrs	r18, 2
    1556:	02 c0       	rjmp	.+4      	; 0x155c <putval+0x12>
    1558:	73 83       	std	Z+3, r23	; 0x03
    155a:	62 83       	std	Z+2, r22	; 0x02
    155c:	51 83       	std	Z+1, r21	; 0x01
    155e:	40 83       	st	Z, r20
    1560:	08 95       	ret

00001562 <mulacc>:
    1562:	44 fd       	sbrc	r20, 4
    1564:	17 c0       	rjmp	.+46     	; 0x1594 <mulacc+0x32>
    1566:	46 fd       	sbrc	r20, 6
    1568:	17 c0       	rjmp	.+46     	; 0x1598 <mulacc+0x36>
    156a:	ab 01       	movw	r20, r22
    156c:	bc 01       	movw	r22, r24
    156e:	da 01       	movw	r26, r20
    1570:	fb 01       	movw	r30, r22
    1572:	aa 0f       	add	r26, r26
    1574:	bb 1f       	adc	r27, r27
    1576:	ee 1f       	adc	r30, r30
    1578:	ff 1f       	adc	r31, r31
    157a:	10 94       	com	r1
    157c:	d1 f7       	brne	.-12     	; 0x1572 <mulacc+0x10>
    157e:	4a 0f       	add	r20, r26
    1580:	5b 1f       	adc	r21, r27
    1582:	6e 1f       	adc	r22, r30
    1584:	7f 1f       	adc	r23, r31
    1586:	cb 01       	movw	r24, r22
    1588:	ba 01       	movw	r22, r20
    158a:	66 0f       	add	r22, r22
    158c:	77 1f       	adc	r23, r23
    158e:	88 1f       	adc	r24, r24
    1590:	99 1f       	adc	r25, r25
    1592:	09 c0       	rjmp	.+18     	; 0x15a6 <mulacc+0x44>
    1594:	33 e0       	ldi	r19, 0x03	; 3
    1596:	01 c0       	rjmp	.+2      	; 0x159a <mulacc+0x38>
    1598:	34 e0       	ldi	r19, 0x04	; 4
    159a:	66 0f       	add	r22, r22
    159c:	77 1f       	adc	r23, r23
    159e:	88 1f       	adc	r24, r24
    15a0:	99 1f       	adc	r25, r25
    15a2:	31 50       	subi	r19, 0x01	; 1
    15a4:	d1 f7       	brne	.-12     	; 0x159a <mulacc+0x38>
    15a6:	62 0f       	add	r22, r18
    15a8:	71 1d       	adc	r23, r1
    15aa:	81 1d       	adc	r24, r1
    15ac:	91 1d       	adc	r25, r1
    15ae:	08 95       	ret

000015b0 <skip_spaces>:
    15b0:	0f 93       	push	r16
    15b2:	1f 93       	push	r17
    15b4:	cf 93       	push	r28
    15b6:	df 93       	push	r29
    15b8:	8c 01       	movw	r16, r24
    15ba:	c8 01       	movw	r24, r16
    15bc:	b8 d2       	rcall	.+1392   	; 0x1b2e <fgetc>
    15be:	ec 01       	movw	r28, r24
    15c0:	97 fd       	sbrc	r25, 7
    15c2:	06 c0       	rjmp	.+12     	; 0x15d0 <skip_spaces+0x20>
    15c4:	8b d2       	rcall	.+1302   	; 0x1adc <isspace>
    15c6:	89 2b       	or	r24, r25
    15c8:	c1 f7       	brne	.-16     	; 0x15ba <skip_spaces+0xa>
    15ca:	b8 01       	movw	r22, r16
    15cc:	ce 01       	movw	r24, r28
    15ce:	29 d3       	rcall	.+1618   	; 0x1c22 <ungetc>
    15d0:	ce 01       	movw	r24, r28
    15d2:	df 91       	pop	r29
    15d4:	cf 91       	pop	r28
    15d6:	1f 91       	pop	r17
    15d8:	0f 91       	pop	r16
    15da:	08 95       	ret

000015dc <conv_int>:
    15dc:	8f 92       	push	r8
    15de:	9f 92       	push	r9
    15e0:	af 92       	push	r10
    15e2:	bf 92       	push	r11
    15e4:	ef 92       	push	r14
    15e6:	ff 92       	push	r15
    15e8:	0f 93       	push	r16
    15ea:	1f 93       	push	r17
    15ec:	cf 93       	push	r28
    15ee:	df 93       	push	r29
    15f0:	8c 01       	movw	r16, r24
    15f2:	d6 2f       	mov	r29, r22
    15f4:	7a 01       	movw	r14, r20
    15f6:	b2 2e       	mov	r11, r18
    15f8:	9a d2       	rcall	.+1332   	; 0x1b2e <fgetc>
    15fa:	9c 01       	movw	r18, r24
    15fc:	33 27       	eor	r19, r19
    15fe:	2b 32       	cpi	r18, 0x2B	; 43
    1600:	31 05       	cpc	r19, r1
    1602:	31 f0       	breq	.+12     	; 0x1610 <conv_int+0x34>
    1604:	2d 32       	cpi	r18, 0x2D	; 45
    1606:	31 05       	cpc	r19, r1
    1608:	59 f4       	brne	.+22     	; 0x1620 <conv_int+0x44>
    160a:	8b 2d       	mov	r24, r11
    160c:	80 68       	ori	r24, 0x80	; 128
    160e:	b8 2e       	mov	r11, r24
    1610:	d1 50       	subi	r29, 0x01	; 1
    1612:	11 f4       	brne	.+4      	; 0x1618 <conv_int+0x3c>
    1614:	80 e0       	ldi	r24, 0x00	; 0
    1616:	61 c0       	rjmp	.+194    	; 0x16da <conv_int+0xfe>
    1618:	c8 01       	movw	r24, r16
    161a:	89 d2       	rcall	.+1298   	; 0x1b2e <fgetc>
    161c:	97 fd       	sbrc	r25, 7
    161e:	fa cf       	rjmp	.-12     	; 0x1614 <conv_int+0x38>
    1620:	cb 2d       	mov	r28, r11
    1622:	cd 7f       	andi	r28, 0xFD	; 253
    1624:	2b 2d       	mov	r18, r11
    1626:	20 73       	andi	r18, 0x30	; 48
    1628:	f9 f4       	brne	.+62     	; 0x1668 <conv_int+0x8c>
    162a:	80 33       	cpi	r24, 0x30	; 48
    162c:	e9 f4       	brne	.+58     	; 0x1668 <conv_int+0x8c>
    162e:	aa 24       	eor	r10, r10
    1630:	aa 94       	dec	r10
    1632:	ad 0e       	add	r10, r29
    1634:	09 f4       	brne	.+2      	; 0x1638 <conv_int+0x5c>
    1636:	3e c0       	rjmp	.+124    	; 0x16b4 <conv_int+0xd8>
    1638:	c8 01       	movw	r24, r16
    163a:	79 d2       	rcall	.+1266   	; 0x1b2e <fgetc>
    163c:	97 fd       	sbrc	r25, 7
    163e:	3a c0       	rjmp	.+116    	; 0x16b4 <conv_int+0xd8>
    1640:	9c 01       	movw	r18, r24
    1642:	2f 7d       	andi	r18, 0xDF	; 223
    1644:	33 27       	eor	r19, r19
    1646:	28 35       	cpi	r18, 0x58	; 88
    1648:	31 05       	cpc	r19, r1
    164a:	41 f4       	brne	.+16     	; 0x165c <conv_int+0x80>
    164c:	c2 64       	ori	r28, 0x42	; 66
    164e:	d2 50       	subi	r29, 0x02	; 2
    1650:	89 f1       	breq	.+98     	; 0x16b4 <conv_int+0xd8>
    1652:	c8 01       	movw	r24, r16
    1654:	6c d2       	rcall	.+1240   	; 0x1b2e <fgetc>
    1656:	97 ff       	sbrs	r25, 7
    1658:	07 c0       	rjmp	.+14     	; 0x1668 <conv_int+0x8c>
    165a:	2c c0       	rjmp	.+88     	; 0x16b4 <conv_int+0xd8>
    165c:	b6 fe       	sbrs	r11, 6
    165e:	02 c0       	rjmp	.+4      	; 0x1664 <conv_int+0x88>
    1660:	c2 60       	ori	r28, 0x02	; 2
    1662:	01 c0       	rjmp	.+2      	; 0x1666 <conv_int+0x8a>
    1664:	c2 61       	ori	r28, 0x12	; 18
    1666:	da 2d       	mov	r29, r10
    1668:	81 2c       	mov	r8, r1
    166a:	91 2c       	mov	r9, r1
    166c:	54 01       	movw	r10, r8
    166e:	20 ed       	ldi	r18, 0xD0	; 208
    1670:	28 0f       	add	r18, r24
    1672:	28 30       	cpi	r18, 0x08	; 8
    1674:	78 f0       	brcs	.+30     	; 0x1694 <conv_int+0xb8>
    1676:	c4 ff       	sbrs	r28, 4
    1678:	03 c0       	rjmp	.+6      	; 0x1680 <conv_int+0xa4>
    167a:	b8 01       	movw	r22, r16
    167c:	d2 d2       	rcall	.+1444   	; 0x1c22 <ungetc>
    167e:	17 c0       	rjmp	.+46     	; 0x16ae <conv_int+0xd2>
    1680:	2a 30       	cpi	r18, 0x0A	; 10
    1682:	40 f0       	brcs	.+16     	; 0x1694 <conv_int+0xb8>
    1684:	c6 ff       	sbrs	r28, 6
    1686:	f9 cf       	rjmp	.-14     	; 0x167a <conv_int+0x9e>
    1688:	2f 7d       	andi	r18, 0xDF	; 223
    168a:	3f ee       	ldi	r19, 0xEF	; 239
    168c:	32 0f       	add	r19, r18
    168e:	36 30       	cpi	r19, 0x06	; 6
    1690:	a0 f7       	brcc	.-24     	; 0x167a <conv_int+0x9e>
    1692:	27 50       	subi	r18, 0x07	; 7
    1694:	4c 2f       	mov	r20, r28
    1696:	c5 01       	movw	r24, r10
    1698:	b4 01       	movw	r22, r8
    169a:	63 df       	rcall	.-314    	; 0x1562 <mulacc>
    169c:	4b 01       	movw	r8, r22
    169e:	5c 01       	movw	r10, r24
    16a0:	c2 60       	ori	r28, 0x02	; 2
    16a2:	d1 50       	subi	r29, 0x01	; 1
    16a4:	51 f0       	breq	.+20     	; 0x16ba <conv_int+0xde>
    16a6:	c8 01       	movw	r24, r16
    16a8:	42 d2       	rcall	.+1156   	; 0x1b2e <fgetc>
    16aa:	97 ff       	sbrs	r25, 7
    16ac:	e0 cf       	rjmp	.-64     	; 0x166e <conv_int+0x92>
    16ae:	c1 fd       	sbrc	r28, 1
    16b0:	04 c0       	rjmp	.+8      	; 0x16ba <conv_int+0xde>
    16b2:	b0 cf       	rjmp	.-160    	; 0x1614 <conv_int+0x38>
    16b4:	81 2c       	mov	r8, r1
    16b6:	91 2c       	mov	r9, r1
    16b8:	54 01       	movw	r10, r8
    16ba:	c7 ff       	sbrs	r28, 7
    16bc:	08 c0       	rjmp	.+16     	; 0x16ce <conv_int+0xf2>
    16be:	b0 94       	com	r11
    16c0:	a0 94       	com	r10
    16c2:	90 94       	com	r9
    16c4:	80 94       	com	r8
    16c6:	81 1c       	adc	r8, r1
    16c8:	91 1c       	adc	r9, r1
    16ca:	a1 1c       	adc	r10, r1
    16cc:	b1 1c       	adc	r11, r1
    16ce:	2c 2f       	mov	r18, r28
    16d0:	b5 01       	movw	r22, r10
    16d2:	a4 01       	movw	r20, r8
    16d4:	c7 01       	movw	r24, r14
    16d6:	39 df       	rcall	.-398    	; 0x154a <putval>
    16d8:	81 e0       	ldi	r24, 0x01	; 1
    16da:	df 91       	pop	r29
    16dc:	cf 91       	pop	r28
    16de:	1f 91       	pop	r17
    16e0:	0f 91       	pop	r16
    16e2:	ff 90       	pop	r15
    16e4:	ef 90       	pop	r14
    16e6:	bf 90       	pop	r11
    16e8:	af 90       	pop	r10
    16ea:	9f 90       	pop	r9
    16ec:	8f 90       	pop	r8
    16ee:	08 95       	ret

000016f0 <conv_brk>:
    16f0:	5f 92       	push	r5
    16f2:	6f 92       	push	r6
    16f4:	7f 92       	push	r7
    16f6:	8f 92       	push	r8
    16f8:	9f 92       	push	r9
    16fa:	af 92       	push	r10
    16fc:	bf 92       	push	r11
    16fe:	cf 92       	push	r12
    1700:	df 92       	push	r13
    1702:	ef 92       	push	r14
    1704:	ff 92       	push	r15
    1706:	0f 93       	push	r16
    1708:	1f 93       	push	r17
    170a:	cf 93       	push	r28
    170c:	df 93       	push	r29
    170e:	cd b7       	in	r28, 0x3d	; 61
    1710:	de b7       	in	r29, 0x3e	; 62
    1712:	a0 97       	sbiw	r28, 0x20	; 32
    1714:	0f b6       	in	r0, 0x3f	; 63
    1716:	f8 94       	cli
    1718:	de bf       	out	0x3e, r29	; 62
    171a:	0f be       	out	0x3f, r0	; 63
    171c:	cd bf       	out	0x3d, r28	; 61
    171e:	5c 01       	movw	r10, r24
    1720:	96 2e       	mov	r9, r22
    1722:	7a 01       	movw	r14, r20
    1724:	f9 01       	movw	r30, r18
    1726:	8e 01       	movw	r16, r28
    1728:	0f 5f       	subi	r16, 0xFF	; 255
    172a:	1f 4f       	sbci	r17, 0xFF	; 255
    172c:	68 01       	movw	r12, r16
    172e:	80 e2       	ldi	r24, 0x20	; 32
    1730:	d8 01       	movw	r26, r16
    1732:	1d 92       	st	X+, r1
    1734:	8a 95       	dec	r24
    1736:	e9 f7       	brne	.-6      	; 0x1732 <conv_brk+0x42>
    1738:	d5 01       	movw	r26, r10
    173a:	13 96       	adiw	r26, 0x03	; 3
    173c:	8c 90       	ld	r8, X
    173e:	80 e0       	ldi	r24, 0x00	; 0
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	61 2c       	mov	r6, r1
    1744:	71 2c       	mov	r7, r1
    1746:	30 e0       	ldi	r19, 0x00	; 0
    1748:	61 e0       	ldi	r22, 0x01	; 1
    174a:	70 e0       	ldi	r23, 0x00	; 0
    174c:	83 fc       	sbrc	r8, 3
    174e:	25 91       	lpm	r18, Z+
    1750:	83 fe       	sbrs	r8, 3
    1752:	21 91       	ld	r18, Z+
    1754:	8f 01       	movw	r16, r30
    1756:	52 2e       	mov	r5, r18
    1758:	21 11       	cpse	r18, r1
    175a:	03 c0       	rjmp	.+6      	; 0x1762 <conv_brk+0x72>
    175c:	80 e0       	ldi	r24, 0x00	; 0
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	90 c0       	rjmp	.+288    	; 0x1882 <conv_brk+0x192>
    1762:	2e 35       	cpi	r18, 0x5E	; 94
    1764:	11 f4       	brne	.+4      	; 0x176a <conv_brk+0x7a>
    1766:	00 97       	sbiw	r24, 0x00	; 0
    1768:	51 f1       	breq	.+84     	; 0x17be <conv_brk+0xce>
    176a:	43 2f       	mov	r20, r19
    176c:	50 e0       	ldi	r21, 0x00	; 0
    176e:	48 17       	cp	r20, r24
    1770:	59 07       	cpc	r21, r25
    1772:	3c f4       	brge	.+14     	; 0x1782 <conv_brk+0x92>
    1774:	2d 35       	cpi	r18, 0x5D	; 93
    1776:	59 f1       	breq	.+86     	; 0x17ce <conv_brk+0xde>
    1778:	2d 32       	cpi	r18, 0x2D	; 45
    177a:	19 f4       	brne	.+6      	; 0x1782 <conv_brk+0x92>
    177c:	77 20       	and	r7, r7
    177e:	09 f1       	breq	.+66     	; 0x17c2 <conv_brk+0xd2>
    1780:	03 c0       	rjmp	.+6      	; 0x1788 <conv_brk+0x98>
    1782:	77 20       	and	r7, r7
    1784:	09 f4       	brne	.+2      	; 0x1788 <conv_brk+0x98>
    1786:	68 c0       	rjmp	.+208    	; 0x1858 <conv_brk+0x168>
    1788:	45 2d       	mov	r20, r5
    178a:	46 95       	lsr	r20
    178c:	46 95       	lsr	r20
    178e:	46 95       	lsr	r20
    1790:	d6 01       	movw	r26, r12
    1792:	a4 0f       	add	r26, r20
    1794:	b1 1d       	adc	r27, r1
    1796:	45 2d       	mov	r20, r5
    1798:	47 70       	andi	r20, 0x07	; 7
    179a:	8b 01       	movw	r16, r22
    179c:	02 c0       	rjmp	.+4      	; 0x17a2 <conv_brk+0xb2>
    179e:	00 0f       	add	r16, r16
    17a0:	11 1f       	adc	r17, r17
    17a2:	4a 95       	dec	r20
    17a4:	e2 f7       	brpl	.-8      	; 0x179e <conv_brk+0xae>
    17a6:	a8 01       	movw	r20, r16
    17a8:	5c 91       	ld	r21, X
    17aa:	45 2b       	or	r20, r21
    17ac:	4c 93       	st	X, r20
    17ae:	65 14       	cp	r6, r5
    17b0:	59 f0       	breq	.+22     	; 0x17c8 <conv_brk+0xd8>
    17b2:	56 14       	cp	r5, r6
    17b4:	10 f4       	brcc	.+4      	; 0x17ba <conv_brk+0xca>
    17b6:	53 94       	inc	r5
    17b8:	e7 cf       	rjmp	.-50     	; 0x1788 <conv_brk+0x98>
    17ba:	5a 94       	dec	r5
    17bc:	e5 cf       	rjmp	.-54     	; 0x1788 <conv_brk+0x98>
    17be:	31 e0       	ldi	r19, 0x01	; 1
    17c0:	04 c0       	rjmp	.+8      	; 0x17ca <conv_brk+0xda>
    17c2:	77 24       	eor	r7, r7
    17c4:	73 94       	inc	r7
    17c6:	01 c0       	rjmp	.+2      	; 0x17ca <conv_brk+0xda>
    17c8:	71 2c       	mov	r7, r1
    17ca:	01 96       	adiw	r24, 0x01	; 1
    17cc:	bf cf       	rjmp	.-130    	; 0x174c <conv_brk+0x5c>
    17ce:	77 20       	and	r7, r7
    17d0:	19 f0       	breq	.+6      	; 0x17d8 <conv_brk+0xe8>
    17d2:	8e 81       	ldd	r24, Y+6	; 0x06
    17d4:	80 62       	ori	r24, 0x20	; 32
    17d6:	8e 83       	std	Y+6, r24	; 0x06
    17d8:	31 11       	cpse	r19, r1
    17da:	03 c0       	rjmp	.+6      	; 0x17e2 <conv_brk+0xf2>
    17dc:	88 24       	eor	r8, r8
    17de:	83 94       	inc	r8
    17e0:	17 c0       	rjmp	.+46     	; 0x1810 <conv_brk+0x120>
    17e2:	f6 01       	movw	r30, r12
    17e4:	9e 01       	movw	r18, r28
    17e6:	2f 5d       	subi	r18, 0xDF	; 223
    17e8:	3f 4f       	sbci	r19, 0xFF	; 255
    17ea:	80 81       	ld	r24, Z
    17ec:	80 95       	com	r24
    17ee:	81 93       	st	Z+, r24
    17f0:	2e 17       	cp	r18, r30
    17f2:	3f 07       	cpc	r19, r31
    17f4:	d1 f7       	brne	.-12     	; 0x17ea <conv_brk+0xfa>
    17f6:	f2 cf       	rjmp	.-28     	; 0x17dc <conv_brk+0xec>
    17f8:	e1 14       	cp	r14, r1
    17fa:	f1 04       	cpc	r15, r1
    17fc:	29 f0       	breq	.+10     	; 0x1808 <conv_brk+0x118>
    17fe:	d7 01       	movw	r26, r14
    1800:	8c 93       	st	X, r24
    1802:	f7 01       	movw	r30, r14
    1804:	31 96       	adiw	r30, 0x01	; 1
    1806:	7f 01       	movw	r14, r30
    1808:	9a 94       	dec	r9
    180a:	81 2c       	mov	r8, r1
    180c:	99 20       	and	r9, r9
    180e:	e9 f0       	breq	.+58     	; 0x184a <conv_brk+0x15a>
    1810:	c5 01       	movw	r24, r10
    1812:	8d d1       	rcall	.+794    	; 0x1b2e <fgetc>
    1814:	97 fd       	sbrc	r25, 7
    1816:	17 c0       	rjmp	.+46     	; 0x1846 <conv_brk+0x156>
    1818:	fc 01       	movw	r30, r24
    181a:	ff 27       	eor	r31, r31
    181c:	23 e0       	ldi	r18, 0x03	; 3
    181e:	f5 95       	asr	r31
    1820:	e7 95       	ror	r30
    1822:	2a 95       	dec	r18
    1824:	e1 f7       	brne	.-8      	; 0x181e <conv_brk+0x12e>
    1826:	ec 0d       	add	r30, r12
    1828:	fd 1d       	adc	r31, r13
    182a:	20 81       	ld	r18, Z
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	ac 01       	movw	r20, r24
    1830:	47 70       	andi	r20, 0x07	; 7
    1832:	55 27       	eor	r21, r21
    1834:	02 c0       	rjmp	.+4      	; 0x183a <conv_brk+0x14a>
    1836:	35 95       	asr	r19
    1838:	27 95       	ror	r18
    183a:	4a 95       	dec	r20
    183c:	e2 f7       	brpl	.-8      	; 0x1836 <conv_brk+0x146>
    183e:	20 fd       	sbrc	r18, 0
    1840:	db cf       	rjmp	.-74     	; 0x17f8 <conv_brk+0x108>
    1842:	b5 01       	movw	r22, r10
    1844:	ee d1       	rcall	.+988    	; 0x1c22 <ungetc>
    1846:	81 10       	cpse	r8, r1
    1848:	89 cf       	rjmp	.-238    	; 0x175c <conv_brk+0x6c>
    184a:	e1 14       	cp	r14, r1
    184c:	f1 04       	cpc	r15, r1
    184e:	11 f0       	breq	.+4      	; 0x1854 <conv_brk+0x164>
    1850:	d7 01       	movw	r26, r14
    1852:	1c 92       	st	X, r1
    1854:	c8 01       	movw	r24, r16
    1856:	15 c0       	rjmp	.+42     	; 0x1882 <conv_brk+0x192>
    1858:	42 2f       	mov	r20, r18
    185a:	46 95       	lsr	r20
    185c:	46 95       	lsr	r20
    185e:	46 95       	lsr	r20
    1860:	d6 01       	movw	r26, r12
    1862:	a4 0f       	add	r26, r20
    1864:	b1 1d       	adc	r27, r1
    1866:	42 2f       	mov	r20, r18
    1868:	47 70       	andi	r20, 0x07	; 7
    186a:	8b 01       	movw	r16, r22
    186c:	02 c0       	rjmp	.+4      	; 0x1872 <conv_brk+0x182>
    186e:	00 0f       	add	r16, r16
    1870:	11 1f       	adc	r17, r17
    1872:	4a 95       	dec	r20
    1874:	e2 f7       	brpl	.-8      	; 0x186e <conv_brk+0x17e>
    1876:	a8 01       	movw	r20, r16
    1878:	5c 91       	ld	r21, X
    187a:	45 2b       	or	r20, r21
    187c:	4c 93       	st	X, r20
    187e:	62 2e       	mov	r6, r18
    1880:	a4 cf       	rjmp	.-184    	; 0x17ca <conv_brk+0xda>
    1882:	a0 96       	adiw	r28, 0x20	; 32
    1884:	0f b6       	in	r0, 0x3f	; 63
    1886:	f8 94       	cli
    1888:	de bf       	out	0x3e, r29	; 62
    188a:	0f be       	out	0x3f, r0	; 63
    188c:	cd bf       	out	0x3d, r28	; 61
    188e:	df 91       	pop	r29
    1890:	cf 91       	pop	r28
    1892:	1f 91       	pop	r17
    1894:	0f 91       	pop	r16
    1896:	ff 90       	pop	r15
    1898:	ef 90       	pop	r14
    189a:	df 90       	pop	r13
    189c:	cf 90       	pop	r12
    189e:	bf 90       	pop	r11
    18a0:	af 90       	pop	r10
    18a2:	9f 90       	pop	r9
    18a4:	8f 90       	pop	r8
    18a6:	7f 90       	pop	r7
    18a8:	6f 90       	pop	r6
    18aa:	5f 90       	pop	r5
    18ac:	08 95       	ret

000018ae <vfscanf>:
    18ae:	5f 92       	push	r5
    18b0:	6f 92       	push	r6
    18b2:	7f 92       	push	r7
    18b4:	8f 92       	push	r8
    18b6:	9f 92       	push	r9
    18b8:	af 92       	push	r10
    18ba:	bf 92       	push	r11
    18bc:	cf 92       	push	r12
    18be:	df 92       	push	r13
    18c0:	ef 92       	push	r14
    18c2:	ff 92       	push	r15
    18c4:	0f 93       	push	r16
    18c6:	1f 93       	push	r17
    18c8:	cf 93       	push	r28
    18ca:	df 93       	push	r29
    18cc:	6c 01       	movw	r12, r24
    18ce:	eb 01       	movw	r28, r22
    18d0:	5a 01       	movw	r10, r20
    18d2:	fc 01       	movw	r30, r24
    18d4:	17 82       	std	Z+7, r1	; 0x07
    18d6:	16 82       	std	Z+6, r1	; 0x06
    18d8:	51 2c       	mov	r5, r1
    18da:	f6 01       	movw	r30, r12
    18dc:	e3 80       	ldd	r14, Z+3	; 0x03
    18de:	fe 01       	movw	r30, r28
    18e0:	e3 fc       	sbrc	r14, 3
    18e2:	85 91       	lpm	r24, Z+
    18e4:	e3 fe       	sbrs	r14, 3
    18e6:	81 91       	ld	r24, Z+
    18e8:	18 2f       	mov	r17, r24
    18ea:	ef 01       	movw	r28, r30
    18ec:	88 23       	and	r24, r24
    18ee:	09 f4       	brne	.+2      	; 0x18f2 <vfscanf+0x44>
    18f0:	e0 c0       	rjmp	.+448    	; 0x1ab2 <vfscanf+0x204>
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	f3 d0       	rcall	.+486    	; 0x1adc <isspace>
    18f6:	89 2b       	or	r24, r25
    18f8:	19 f0       	breq	.+6      	; 0x1900 <vfscanf+0x52>
    18fa:	c6 01       	movw	r24, r12
    18fc:	59 de       	rcall	.-846    	; 0x15b0 <skip_spaces>
    18fe:	ed cf       	rjmp	.-38     	; 0x18da <vfscanf+0x2c>
    1900:	15 32       	cpi	r17, 0x25	; 37
    1902:	41 f4       	brne	.+16     	; 0x1914 <vfscanf+0x66>
    1904:	fe 01       	movw	r30, r28
    1906:	e3 fc       	sbrc	r14, 3
    1908:	15 91       	lpm	r17, Z+
    190a:	e3 fe       	sbrs	r14, 3
    190c:	11 91       	ld	r17, Z+
    190e:	ef 01       	movw	r28, r30
    1910:	15 32       	cpi	r17, 0x25	; 37
    1912:	71 f4       	brne	.+28     	; 0x1930 <vfscanf+0x82>
    1914:	c6 01       	movw	r24, r12
    1916:	0b d1       	rcall	.+534    	; 0x1b2e <fgetc>
    1918:	97 fd       	sbrc	r25, 7
    191a:	c9 c0       	rjmp	.+402    	; 0x1aae <vfscanf+0x200>
    191c:	41 2f       	mov	r20, r17
    191e:	50 e0       	ldi	r21, 0x00	; 0
    1920:	9c 01       	movw	r18, r24
    1922:	33 27       	eor	r19, r19
    1924:	24 17       	cp	r18, r20
    1926:	35 07       	cpc	r19, r21
    1928:	c1 f2       	breq	.-80     	; 0x18da <vfscanf+0x2c>
    192a:	b6 01       	movw	r22, r12
    192c:	7a d1       	rcall	.+756    	; 0x1c22 <ungetc>
    192e:	c1 c0       	rjmp	.+386    	; 0x1ab2 <vfscanf+0x204>
    1930:	1a 32       	cpi	r17, 0x2A	; 42
    1932:	39 f4       	brne	.+14     	; 0x1942 <vfscanf+0x94>
    1934:	e3 fc       	sbrc	r14, 3
    1936:	15 91       	lpm	r17, Z+
    1938:	e3 fe       	sbrs	r14, 3
    193a:	11 91       	ld	r17, Z+
    193c:	ef 01       	movw	r28, r30
    193e:	01 e0       	ldi	r16, 0x01	; 1
    1940:	01 c0       	rjmp	.+2      	; 0x1944 <vfscanf+0x96>
    1942:	00 e0       	ldi	r16, 0x00	; 0
    1944:	f1 2c       	mov	r15, r1
    1946:	20 ed       	ldi	r18, 0xD0	; 208
    1948:	21 0f       	add	r18, r17
    194a:	2a 30       	cpi	r18, 0x0A	; 10
    194c:	78 f4       	brcc	.+30     	; 0x196c <vfscanf+0xbe>
    194e:	02 60       	ori	r16, 0x02	; 2
    1950:	6f 2d       	mov	r22, r15
    1952:	70 e0       	ldi	r23, 0x00	; 0
    1954:	80 e0       	ldi	r24, 0x00	; 0
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	40 e2       	ldi	r20, 0x20	; 32
    195a:	03 de       	rcall	.-1018   	; 0x1562 <mulacc>
    195c:	f6 2e       	mov	r15, r22
    195e:	fe 01       	movw	r30, r28
    1960:	e3 fc       	sbrc	r14, 3
    1962:	15 91       	lpm	r17, Z+
    1964:	e3 fe       	sbrs	r14, 3
    1966:	11 91       	ld	r17, Z+
    1968:	ef 01       	movw	r28, r30
    196a:	ed cf       	rjmp	.-38     	; 0x1946 <vfscanf+0x98>
    196c:	01 ff       	sbrs	r16, 1
    196e:	03 c0       	rjmp	.+6      	; 0x1976 <vfscanf+0xc8>
    1970:	f1 10       	cpse	r15, r1
    1972:	03 c0       	rjmp	.+6      	; 0x197a <vfscanf+0xcc>
    1974:	9e c0       	rjmp	.+316    	; 0x1ab2 <vfscanf+0x204>
    1976:	ff 24       	eor	r15, r15
    1978:	fa 94       	dec	r15
    197a:	18 36       	cpi	r17, 0x68	; 104
    197c:	19 f0       	breq	.+6      	; 0x1984 <vfscanf+0xd6>
    197e:	1c 36       	cpi	r17, 0x6C	; 108
    1980:	51 f0       	breq	.+20     	; 0x1996 <vfscanf+0xe8>
    1982:	10 c0       	rjmp	.+32     	; 0x19a4 <vfscanf+0xf6>
    1984:	fe 01       	movw	r30, r28
    1986:	e3 fc       	sbrc	r14, 3
    1988:	15 91       	lpm	r17, Z+
    198a:	e3 fe       	sbrs	r14, 3
    198c:	11 91       	ld	r17, Z+
    198e:	ef 01       	movw	r28, r30
    1990:	18 36       	cpi	r17, 0x68	; 104
    1992:	41 f4       	brne	.+16     	; 0x19a4 <vfscanf+0xf6>
    1994:	08 60       	ori	r16, 0x08	; 8
    1996:	04 60       	ori	r16, 0x04	; 4
    1998:	fe 01       	movw	r30, r28
    199a:	e3 fc       	sbrc	r14, 3
    199c:	15 91       	lpm	r17, Z+
    199e:	e3 fe       	sbrs	r14, 3
    19a0:	11 91       	ld	r17, Z+
    19a2:	ef 01       	movw	r28, r30
    19a4:	11 23       	and	r17, r17
    19a6:	09 f4       	brne	.+2      	; 0x19aa <vfscanf+0xfc>
    19a8:	84 c0       	rjmp	.+264    	; 0x1ab2 <vfscanf+0x204>
    19aa:	61 2f       	mov	r22, r17
    19ac:	70 e0       	ldi	r23, 0x00	; 0
    19ae:	84 ee       	ldi	r24, 0xE4	; 228
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	9c d0       	rcall	.+312    	; 0x1aec <strchr_P>
    19b4:	89 2b       	or	r24, r25
    19b6:	09 f4       	brne	.+2      	; 0x19ba <vfscanf+0x10c>
    19b8:	7c c0       	rjmp	.+248    	; 0x1ab2 <vfscanf+0x204>
    19ba:	00 fd       	sbrc	r16, 0
    19bc:	07 c0       	rjmp	.+14     	; 0x19cc <vfscanf+0x11e>
    19be:	f5 01       	movw	r30, r10
    19c0:	80 80       	ld	r8, Z
    19c2:	91 80       	ldd	r9, Z+1	; 0x01
    19c4:	c5 01       	movw	r24, r10
    19c6:	02 96       	adiw	r24, 0x02	; 2
    19c8:	5c 01       	movw	r10, r24
    19ca:	02 c0       	rjmp	.+4      	; 0x19d0 <vfscanf+0x122>
    19cc:	81 2c       	mov	r8, r1
    19ce:	91 2c       	mov	r9, r1
    19d0:	1e 36       	cpi	r17, 0x6E	; 110
    19d2:	49 f4       	brne	.+18     	; 0x19e6 <vfscanf+0x138>
    19d4:	f6 01       	movw	r30, r12
    19d6:	46 81       	ldd	r20, Z+6	; 0x06
    19d8:	57 81       	ldd	r21, Z+7	; 0x07
    19da:	60 e0       	ldi	r22, 0x00	; 0
    19dc:	70 e0       	ldi	r23, 0x00	; 0
    19de:	20 2f       	mov	r18, r16
    19e0:	c4 01       	movw	r24, r8
    19e2:	b3 dd       	rcall	.-1178   	; 0x154a <putval>
    19e4:	7a cf       	rjmp	.-268    	; 0x18da <vfscanf+0x2c>
    19e6:	13 36       	cpi	r17, 0x63	; 99
    19e8:	a1 f4       	brne	.+40     	; 0x1a12 <vfscanf+0x164>
    19ea:	01 fd       	sbrc	r16, 1
    19ec:	02 c0       	rjmp	.+4      	; 0x19f2 <vfscanf+0x144>
    19ee:	ff 24       	eor	r15, r15
    19f0:	f3 94       	inc	r15
    19f2:	c6 01       	movw	r24, r12
    19f4:	9c d0       	rcall	.+312    	; 0x1b2e <fgetc>
    19f6:	97 fd       	sbrc	r25, 7
    19f8:	5a c0       	rjmp	.+180    	; 0x1aae <vfscanf+0x200>
    19fa:	81 14       	cp	r8, r1
    19fc:	91 04       	cpc	r9, r1
    19fe:	29 f0       	breq	.+10     	; 0x1a0a <vfscanf+0x15c>
    1a00:	f4 01       	movw	r30, r8
    1a02:	80 83       	st	Z, r24
    1a04:	c4 01       	movw	r24, r8
    1a06:	01 96       	adiw	r24, 0x01	; 1
    1a08:	4c 01       	movw	r8, r24
    1a0a:	fa 94       	dec	r15
    1a0c:	f1 10       	cpse	r15, r1
    1a0e:	f1 cf       	rjmp	.-30     	; 0x19f2 <vfscanf+0x144>
    1a10:	4a c0       	rjmp	.+148    	; 0x1aa6 <vfscanf+0x1f8>
    1a12:	1b 35       	cpi	r17, 0x5B	; 91
    1a14:	51 f4       	brne	.+20     	; 0x1a2a <vfscanf+0x17c>
    1a16:	9e 01       	movw	r18, r28
    1a18:	a4 01       	movw	r20, r8
    1a1a:	6f 2d       	mov	r22, r15
    1a1c:	c6 01       	movw	r24, r12
    1a1e:	68 de       	rcall	.-816    	; 0x16f0 <conv_brk>
    1a20:	ec 01       	movw	r28, r24
    1a22:	89 2b       	or	r24, r25
    1a24:	09 f0       	breq	.+2      	; 0x1a28 <vfscanf+0x17a>
    1a26:	3f c0       	rjmp	.+126    	; 0x1aa6 <vfscanf+0x1f8>
    1a28:	39 c0       	rjmp	.+114    	; 0x1a9c <vfscanf+0x1ee>
    1a2a:	c6 01       	movw	r24, r12
    1a2c:	c1 dd       	rcall	.-1150   	; 0x15b0 <skip_spaces>
    1a2e:	97 fd       	sbrc	r25, 7
    1a30:	3e c0       	rjmp	.+124    	; 0x1aae <vfscanf+0x200>
    1a32:	1f 36       	cpi	r17, 0x6F	; 111
    1a34:	49 f1       	breq	.+82     	; 0x1a88 <vfscanf+0x1da>
    1a36:	28 f4       	brcc	.+10     	; 0x1a42 <vfscanf+0x194>
    1a38:	14 36       	cpi	r17, 0x64	; 100
    1a3a:	21 f1       	breq	.+72     	; 0x1a84 <vfscanf+0x1d6>
    1a3c:	19 36       	cpi	r17, 0x69	; 105
    1a3e:	39 f1       	breq	.+78     	; 0x1a8e <vfscanf+0x1e0>
    1a40:	25 c0       	rjmp	.+74     	; 0x1a8c <vfscanf+0x1de>
    1a42:	13 37       	cpi	r17, 0x73	; 115
    1a44:	71 f0       	breq	.+28     	; 0x1a62 <vfscanf+0x1b4>
    1a46:	15 37       	cpi	r17, 0x75	; 117
    1a48:	e9 f0       	breq	.+58     	; 0x1a84 <vfscanf+0x1d6>
    1a4a:	20 c0       	rjmp	.+64     	; 0x1a8c <vfscanf+0x1de>
    1a4c:	81 14       	cp	r8, r1
    1a4e:	91 04       	cpc	r9, r1
    1a50:	29 f0       	breq	.+10     	; 0x1a5c <vfscanf+0x1ae>
    1a52:	f4 01       	movw	r30, r8
    1a54:	60 82       	st	Z, r6
    1a56:	c4 01       	movw	r24, r8
    1a58:	01 96       	adiw	r24, 0x01	; 1
    1a5a:	4c 01       	movw	r8, r24
    1a5c:	fa 94       	dec	r15
    1a5e:	ff 20       	and	r15, r15
    1a60:	59 f0       	breq	.+22     	; 0x1a78 <vfscanf+0x1ca>
    1a62:	c6 01       	movw	r24, r12
    1a64:	64 d0       	rcall	.+200    	; 0x1b2e <fgetc>
    1a66:	3c 01       	movw	r6, r24
    1a68:	97 fd       	sbrc	r25, 7
    1a6a:	06 c0       	rjmp	.+12     	; 0x1a78 <vfscanf+0x1ca>
    1a6c:	37 d0       	rcall	.+110    	; 0x1adc <isspace>
    1a6e:	89 2b       	or	r24, r25
    1a70:	69 f3       	breq	.-38     	; 0x1a4c <vfscanf+0x19e>
    1a72:	b6 01       	movw	r22, r12
    1a74:	c3 01       	movw	r24, r6
    1a76:	d5 d0       	rcall	.+426    	; 0x1c22 <ungetc>
    1a78:	81 14       	cp	r8, r1
    1a7a:	91 04       	cpc	r9, r1
    1a7c:	a1 f0       	breq	.+40     	; 0x1aa6 <vfscanf+0x1f8>
    1a7e:	f4 01       	movw	r30, r8
    1a80:	10 82       	st	Z, r1
    1a82:	11 c0       	rjmp	.+34     	; 0x1aa6 <vfscanf+0x1f8>
    1a84:	00 62       	ori	r16, 0x20	; 32
    1a86:	03 c0       	rjmp	.+6      	; 0x1a8e <vfscanf+0x1e0>
    1a88:	00 61       	ori	r16, 0x10	; 16
    1a8a:	01 c0       	rjmp	.+2      	; 0x1a8e <vfscanf+0x1e0>
    1a8c:	00 64       	ori	r16, 0x40	; 64
    1a8e:	20 2f       	mov	r18, r16
    1a90:	a4 01       	movw	r20, r8
    1a92:	6f 2d       	mov	r22, r15
    1a94:	c6 01       	movw	r24, r12
    1a96:	a2 dd       	rcall	.-1212   	; 0x15dc <conv_int>
    1a98:	81 11       	cpse	r24, r1
    1a9a:	05 c0       	rjmp	.+10     	; 0x1aa6 <vfscanf+0x1f8>
    1a9c:	f6 01       	movw	r30, r12
    1a9e:	83 81       	ldd	r24, Z+3	; 0x03
    1aa0:	80 73       	andi	r24, 0x30	; 48
    1aa2:	29 f4       	brne	.+10     	; 0x1aae <vfscanf+0x200>
    1aa4:	06 c0       	rjmp	.+12     	; 0x1ab2 <vfscanf+0x204>
    1aa6:	00 fd       	sbrc	r16, 0
    1aa8:	18 cf       	rjmp	.-464    	; 0x18da <vfscanf+0x2c>
    1aaa:	53 94       	inc	r5
    1aac:	16 cf       	rjmp	.-468    	; 0x18da <vfscanf+0x2c>
    1aae:	55 20       	and	r5, r5
    1ab0:	19 f0       	breq	.+6      	; 0x1ab8 <vfscanf+0x20a>
    1ab2:	85 2d       	mov	r24, r5
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	02 c0       	rjmp	.+4      	; 0x1abc <vfscanf+0x20e>
    1ab8:	8f ef       	ldi	r24, 0xFF	; 255
    1aba:	9f ef       	ldi	r25, 0xFF	; 255
    1abc:	df 91       	pop	r29
    1abe:	cf 91       	pop	r28
    1ac0:	1f 91       	pop	r17
    1ac2:	0f 91       	pop	r16
    1ac4:	ff 90       	pop	r15
    1ac6:	ef 90       	pop	r14
    1ac8:	df 90       	pop	r13
    1aca:	cf 90       	pop	r12
    1acc:	bf 90       	pop	r11
    1ace:	af 90       	pop	r10
    1ad0:	9f 90       	pop	r9
    1ad2:	8f 90       	pop	r8
    1ad4:	7f 90       	pop	r7
    1ad6:	6f 90       	pop	r6
    1ad8:	5f 90       	pop	r5
    1ada:	08 95       	ret

00001adc <isspace>:
    1adc:	91 11       	cpse	r25, r1
    1ade:	18 c1       	rjmp	.+560    	; 0x1d10 <__ctype_isfalse>
    1ae0:	80 32       	cpi	r24, 0x20	; 32
    1ae2:	19 f0       	breq	.+6      	; 0x1aea <isspace+0xe>
    1ae4:	89 50       	subi	r24, 0x09	; 9
    1ae6:	85 50       	subi	r24, 0x05	; 5
    1ae8:	d0 f7       	brcc	.-12     	; 0x1ade <isspace+0x2>
    1aea:	08 95       	ret

00001aec <strchr_P>:
    1aec:	fc 01       	movw	r30, r24
    1aee:	05 90       	lpm	r0, Z+
    1af0:	06 16       	cp	r0, r22
    1af2:	21 f0       	breq	.+8      	; 0x1afc <strchr_P+0x10>
    1af4:	00 20       	and	r0, r0
    1af6:	d9 f7       	brne	.-10     	; 0x1aee <strchr_P+0x2>
    1af8:	c0 01       	movw	r24, r0
    1afa:	08 95       	ret
    1afc:	31 97       	sbiw	r30, 0x01	; 1
    1afe:	cf 01       	movw	r24, r30
    1b00:	08 95       	ret

00001b02 <strnlen_P>:
    1b02:	fc 01       	movw	r30, r24
    1b04:	05 90       	lpm	r0, Z+
    1b06:	61 50       	subi	r22, 0x01	; 1
    1b08:	70 40       	sbci	r23, 0x00	; 0
    1b0a:	01 10       	cpse	r0, r1
    1b0c:	d8 f7       	brcc	.-10     	; 0x1b04 <strnlen_P+0x2>
    1b0e:	80 95       	com	r24
    1b10:	90 95       	com	r25
    1b12:	8e 0f       	add	r24, r30
    1b14:	9f 1f       	adc	r25, r31
    1b16:	08 95       	ret

00001b18 <strnlen>:
    1b18:	fc 01       	movw	r30, r24
    1b1a:	61 50       	subi	r22, 0x01	; 1
    1b1c:	70 40       	sbci	r23, 0x00	; 0
    1b1e:	01 90       	ld	r0, Z+
    1b20:	01 10       	cpse	r0, r1
    1b22:	d8 f7       	brcc	.-10     	; 0x1b1a <strnlen+0x2>
    1b24:	80 95       	com	r24
    1b26:	90 95       	com	r25
    1b28:	8e 0f       	add	r24, r30
    1b2a:	9f 1f       	adc	r25, r31
    1b2c:	08 95       	ret

00001b2e <fgetc>:
    1b2e:	cf 93       	push	r28
    1b30:	df 93       	push	r29
    1b32:	ec 01       	movw	r28, r24
    1b34:	2b 81       	ldd	r18, Y+3	; 0x03
    1b36:	20 ff       	sbrs	r18, 0
    1b38:	33 c0       	rjmp	.+102    	; 0x1ba0 <fgetc+0x72>
    1b3a:	26 ff       	sbrs	r18, 6
    1b3c:	0a c0       	rjmp	.+20     	; 0x1b52 <fgetc+0x24>
    1b3e:	2f 7b       	andi	r18, 0xBF	; 191
    1b40:	2b 83       	std	Y+3, r18	; 0x03
    1b42:	8e 81       	ldd	r24, Y+6	; 0x06
    1b44:	9f 81       	ldd	r25, Y+7	; 0x07
    1b46:	01 96       	adiw	r24, 0x01	; 1
    1b48:	9f 83       	std	Y+7, r25	; 0x07
    1b4a:	8e 83       	std	Y+6, r24	; 0x06
    1b4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	29 c0       	rjmp	.+82     	; 0x1ba4 <fgetc+0x76>
    1b52:	22 ff       	sbrs	r18, 2
    1b54:	0f c0       	rjmp	.+30     	; 0x1b74 <fgetc+0x46>
    1b56:	e8 81       	ld	r30, Y
    1b58:	f9 81       	ldd	r31, Y+1	; 0x01
    1b5a:	80 81       	ld	r24, Z
    1b5c:	08 2e       	mov	r0, r24
    1b5e:	00 0c       	add	r0, r0
    1b60:	99 0b       	sbc	r25, r25
    1b62:	00 97       	sbiw	r24, 0x00	; 0
    1b64:	19 f4       	brne	.+6      	; 0x1b6c <fgetc+0x3e>
    1b66:	20 62       	ori	r18, 0x20	; 32
    1b68:	2b 83       	std	Y+3, r18	; 0x03
    1b6a:	1a c0       	rjmp	.+52     	; 0x1ba0 <fgetc+0x72>
    1b6c:	31 96       	adiw	r30, 0x01	; 1
    1b6e:	f9 83       	std	Y+1, r31	; 0x01
    1b70:	e8 83       	st	Y, r30
    1b72:	0e c0       	rjmp	.+28     	; 0x1b90 <fgetc+0x62>
    1b74:	ea 85       	ldd	r30, Y+10	; 0x0a
    1b76:	fb 85       	ldd	r31, Y+11	; 0x0b
    1b78:	19 95       	eicall
    1b7a:	97 ff       	sbrs	r25, 7
    1b7c:	09 c0       	rjmp	.+18     	; 0x1b90 <fgetc+0x62>
    1b7e:	2b 81       	ldd	r18, Y+3	; 0x03
    1b80:	01 96       	adiw	r24, 0x01	; 1
    1b82:	11 f0       	breq	.+4      	; 0x1b88 <fgetc+0x5a>
    1b84:	80 e2       	ldi	r24, 0x20	; 32
    1b86:	01 c0       	rjmp	.+2      	; 0x1b8a <fgetc+0x5c>
    1b88:	80 e1       	ldi	r24, 0x10	; 16
    1b8a:	82 2b       	or	r24, r18
    1b8c:	8b 83       	std	Y+3, r24	; 0x03
    1b8e:	08 c0       	rjmp	.+16     	; 0x1ba0 <fgetc+0x72>
    1b90:	2e 81       	ldd	r18, Y+6	; 0x06
    1b92:	3f 81       	ldd	r19, Y+7	; 0x07
    1b94:	2f 5f       	subi	r18, 0xFF	; 255
    1b96:	3f 4f       	sbci	r19, 0xFF	; 255
    1b98:	3f 83       	std	Y+7, r19	; 0x07
    1b9a:	2e 83       	std	Y+6, r18	; 0x06
    1b9c:	99 27       	eor	r25, r25
    1b9e:	02 c0       	rjmp	.+4      	; 0x1ba4 <fgetc+0x76>
    1ba0:	8f ef       	ldi	r24, 0xFF	; 255
    1ba2:	9f ef       	ldi	r25, 0xFF	; 255
    1ba4:	df 91       	pop	r29
    1ba6:	cf 91       	pop	r28
    1ba8:	08 95       	ret

00001baa <fputc>:
    1baa:	0f 93       	push	r16
    1bac:	1f 93       	push	r17
    1bae:	cf 93       	push	r28
    1bb0:	df 93       	push	r29
    1bb2:	fb 01       	movw	r30, r22
    1bb4:	23 81       	ldd	r18, Z+3	; 0x03
    1bb6:	21 fd       	sbrc	r18, 1
    1bb8:	03 c0       	rjmp	.+6      	; 0x1bc0 <fputc+0x16>
    1bba:	8f ef       	ldi	r24, 0xFF	; 255
    1bbc:	9f ef       	ldi	r25, 0xFF	; 255
    1bbe:	2c c0       	rjmp	.+88     	; 0x1c18 <fputc+0x6e>
    1bc0:	22 ff       	sbrs	r18, 2
    1bc2:	16 c0       	rjmp	.+44     	; 0x1bf0 <fputc+0x46>
    1bc4:	46 81       	ldd	r20, Z+6	; 0x06
    1bc6:	57 81       	ldd	r21, Z+7	; 0x07
    1bc8:	24 81       	ldd	r18, Z+4	; 0x04
    1bca:	35 81       	ldd	r19, Z+5	; 0x05
    1bcc:	42 17       	cp	r20, r18
    1bce:	53 07       	cpc	r21, r19
    1bd0:	44 f4       	brge	.+16     	; 0x1be2 <fputc+0x38>
    1bd2:	a0 81       	ld	r26, Z
    1bd4:	b1 81       	ldd	r27, Z+1	; 0x01
    1bd6:	9d 01       	movw	r18, r26
    1bd8:	2f 5f       	subi	r18, 0xFF	; 255
    1bda:	3f 4f       	sbci	r19, 0xFF	; 255
    1bdc:	31 83       	std	Z+1, r19	; 0x01
    1bde:	20 83       	st	Z, r18
    1be0:	8c 93       	st	X, r24
    1be2:	26 81       	ldd	r18, Z+6	; 0x06
    1be4:	37 81       	ldd	r19, Z+7	; 0x07
    1be6:	2f 5f       	subi	r18, 0xFF	; 255
    1be8:	3f 4f       	sbci	r19, 0xFF	; 255
    1bea:	37 83       	std	Z+7, r19	; 0x07
    1bec:	26 83       	std	Z+6, r18	; 0x06
    1bee:	14 c0       	rjmp	.+40     	; 0x1c18 <fputc+0x6e>
    1bf0:	8b 01       	movw	r16, r22
    1bf2:	ec 01       	movw	r28, r24
    1bf4:	fb 01       	movw	r30, r22
    1bf6:	00 84       	ldd	r0, Z+8	; 0x08
    1bf8:	f1 85       	ldd	r31, Z+9	; 0x09
    1bfa:	e0 2d       	mov	r30, r0
    1bfc:	19 95       	eicall
    1bfe:	89 2b       	or	r24, r25
    1c00:	e1 f6       	brne	.-72     	; 0x1bba <fputc+0x10>
    1c02:	d8 01       	movw	r26, r16
    1c04:	16 96       	adiw	r26, 0x06	; 6
    1c06:	8d 91       	ld	r24, X+
    1c08:	9c 91       	ld	r25, X
    1c0a:	17 97       	sbiw	r26, 0x07	; 7
    1c0c:	01 96       	adiw	r24, 0x01	; 1
    1c0e:	17 96       	adiw	r26, 0x07	; 7
    1c10:	9c 93       	st	X, r25
    1c12:	8e 93       	st	-X, r24
    1c14:	16 97       	sbiw	r26, 0x06	; 6
    1c16:	ce 01       	movw	r24, r28
    1c18:	df 91       	pop	r29
    1c1a:	cf 91       	pop	r28
    1c1c:	1f 91       	pop	r17
    1c1e:	0f 91       	pop	r16
    1c20:	08 95       	ret

00001c22 <ungetc>:
    1c22:	fb 01       	movw	r30, r22
    1c24:	23 81       	ldd	r18, Z+3	; 0x03
    1c26:	20 ff       	sbrs	r18, 0
    1c28:	12 c0       	rjmp	.+36     	; 0x1c4e <ungetc+0x2c>
    1c2a:	26 fd       	sbrc	r18, 6
    1c2c:	10 c0       	rjmp	.+32     	; 0x1c4e <ungetc+0x2c>
    1c2e:	8f 3f       	cpi	r24, 0xFF	; 255
    1c30:	3f ef       	ldi	r19, 0xFF	; 255
    1c32:	93 07       	cpc	r25, r19
    1c34:	61 f0       	breq	.+24     	; 0x1c4e <ungetc+0x2c>
    1c36:	82 83       	std	Z+2, r24	; 0x02
    1c38:	2f 7d       	andi	r18, 0xDF	; 223
    1c3a:	20 64       	ori	r18, 0x40	; 64
    1c3c:	23 83       	std	Z+3, r18	; 0x03
    1c3e:	26 81       	ldd	r18, Z+6	; 0x06
    1c40:	37 81       	ldd	r19, Z+7	; 0x07
    1c42:	21 50       	subi	r18, 0x01	; 1
    1c44:	31 09       	sbc	r19, r1
    1c46:	37 83       	std	Z+7, r19	; 0x07
    1c48:	26 83       	std	Z+6, r18	; 0x06
    1c4a:	99 27       	eor	r25, r25
    1c4c:	08 95       	ret
    1c4e:	8f ef       	ldi	r24, 0xFF	; 255
    1c50:	9f ef       	ldi	r25, 0xFF	; 255
    1c52:	08 95       	ret

00001c54 <__ultoa_invert>:
    1c54:	fa 01       	movw	r30, r20
    1c56:	aa 27       	eor	r26, r26
    1c58:	28 30       	cpi	r18, 0x08	; 8
    1c5a:	51 f1       	breq	.+84     	; 0x1cb0 <__ultoa_invert+0x5c>
    1c5c:	20 31       	cpi	r18, 0x10	; 16
    1c5e:	81 f1       	breq	.+96     	; 0x1cc0 <__ultoa_invert+0x6c>
    1c60:	e8 94       	clt
    1c62:	6f 93       	push	r22
    1c64:	6e 7f       	andi	r22, 0xFE	; 254
    1c66:	6e 5f       	subi	r22, 0xFE	; 254
    1c68:	7f 4f       	sbci	r23, 0xFF	; 255
    1c6a:	8f 4f       	sbci	r24, 0xFF	; 255
    1c6c:	9f 4f       	sbci	r25, 0xFF	; 255
    1c6e:	af 4f       	sbci	r26, 0xFF	; 255
    1c70:	b1 e0       	ldi	r27, 0x01	; 1
    1c72:	3e d0       	rcall	.+124    	; 0x1cf0 <__ultoa_invert+0x9c>
    1c74:	b4 e0       	ldi	r27, 0x04	; 4
    1c76:	3c d0       	rcall	.+120    	; 0x1cf0 <__ultoa_invert+0x9c>
    1c78:	67 0f       	add	r22, r23
    1c7a:	78 1f       	adc	r23, r24
    1c7c:	89 1f       	adc	r24, r25
    1c7e:	9a 1f       	adc	r25, r26
    1c80:	a1 1d       	adc	r26, r1
    1c82:	68 0f       	add	r22, r24
    1c84:	79 1f       	adc	r23, r25
    1c86:	8a 1f       	adc	r24, r26
    1c88:	91 1d       	adc	r25, r1
    1c8a:	a1 1d       	adc	r26, r1
    1c8c:	6a 0f       	add	r22, r26
    1c8e:	71 1d       	adc	r23, r1
    1c90:	81 1d       	adc	r24, r1
    1c92:	91 1d       	adc	r25, r1
    1c94:	a1 1d       	adc	r26, r1
    1c96:	20 d0       	rcall	.+64     	; 0x1cd8 <__ultoa_invert+0x84>
    1c98:	09 f4       	brne	.+2      	; 0x1c9c <__ultoa_invert+0x48>
    1c9a:	68 94       	set
    1c9c:	3f 91       	pop	r19
    1c9e:	2a e0       	ldi	r18, 0x0A	; 10
    1ca0:	26 9f       	mul	r18, r22
    1ca2:	11 24       	eor	r1, r1
    1ca4:	30 19       	sub	r19, r0
    1ca6:	30 5d       	subi	r19, 0xD0	; 208
    1ca8:	31 93       	st	Z+, r19
    1caa:	de f6       	brtc	.-74     	; 0x1c62 <__ultoa_invert+0xe>
    1cac:	cf 01       	movw	r24, r30
    1cae:	08 95       	ret
    1cb0:	46 2f       	mov	r20, r22
    1cb2:	47 70       	andi	r20, 0x07	; 7
    1cb4:	40 5d       	subi	r20, 0xD0	; 208
    1cb6:	41 93       	st	Z+, r20
    1cb8:	b3 e0       	ldi	r27, 0x03	; 3
    1cba:	0f d0       	rcall	.+30     	; 0x1cda <__ultoa_invert+0x86>
    1cbc:	c9 f7       	brne	.-14     	; 0x1cb0 <__ultoa_invert+0x5c>
    1cbe:	f6 cf       	rjmp	.-20     	; 0x1cac <__ultoa_invert+0x58>
    1cc0:	46 2f       	mov	r20, r22
    1cc2:	4f 70       	andi	r20, 0x0F	; 15
    1cc4:	40 5d       	subi	r20, 0xD0	; 208
    1cc6:	4a 33       	cpi	r20, 0x3A	; 58
    1cc8:	18 f0       	brcs	.+6      	; 0x1cd0 <__ultoa_invert+0x7c>
    1cca:	49 5d       	subi	r20, 0xD9	; 217
    1ccc:	31 fd       	sbrc	r19, 1
    1cce:	40 52       	subi	r20, 0x20	; 32
    1cd0:	41 93       	st	Z+, r20
    1cd2:	02 d0       	rcall	.+4      	; 0x1cd8 <__ultoa_invert+0x84>
    1cd4:	a9 f7       	brne	.-22     	; 0x1cc0 <__ultoa_invert+0x6c>
    1cd6:	ea cf       	rjmp	.-44     	; 0x1cac <__ultoa_invert+0x58>
    1cd8:	b4 e0       	ldi	r27, 0x04	; 4
    1cda:	a6 95       	lsr	r26
    1cdc:	97 95       	ror	r25
    1cde:	87 95       	ror	r24
    1ce0:	77 95       	ror	r23
    1ce2:	67 95       	ror	r22
    1ce4:	ba 95       	dec	r27
    1ce6:	c9 f7       	brne	.-14     	; 0x1cda <__ultoa_invert+0x86>
    1ce8:	00 97       	sbiw	r24, 0x00	; 0
    1cea:	61 05       	cpc	r22, r1
    1cec:	71 05       	cpc	r23, r1
    1cee:	08 95       	ret
    1cf0:	9b 01       	movw	r18, r22
    1cf2:	ac 01       	movw	r20, r24
    1cf4:	0a 2e       	mov	r0, r26
    1cf6:	06 94       	lsr	r0
    1cf8:	57 95       	ror	r21
    1cfa:	47 95       	ror	r20
    1cfc:	37 95       	ror	r19
    1cfe:	27 95       	ror	r18
    1d00:	ba 95       	dec	r27
    1d02:	c9 f7       	brne	.-14     	; 0x1cf6 <__ultoa_invert+0xa2>
    1d04:	62 0f       	add	r22, r18
    1d06:	73 1f       	adc	r23, r19
    1d08:	84 1f       	adc	r24, r20
    1d0a:	95 1f       	adc	r25, r21
    1d0c:	a0 1d       	adc	r26, r0
    1d0e:	08 95       	ret

00001d10 <__ctype_isfalse>:
    1d10:	99 27       	eor	r25, r25
    1d12:	88 27       	eor	r24, r24

00001d14 <__ctype_istrue>:
    1d14:	08 95       	ret

00001d16 <_exit>:
    1d16:	f8 94       	cli

00001d18 <__stop_program>:
    1d18:	ff cf       	rjmp	.-2      	; 0x1d18 <__stop_program>
