
async serial transfer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000100  00800200  0000172a  000017be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000172a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000170  00800300  00800300  000018be  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000018be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000191c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002e0  00000000  00000000  00001960  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003050  00000000  00000000  00001c40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000131b  00000000  00000000  00004c90  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000016c0  00000000  00000000  00005fab  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000780  00000000  00000000  0000766c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000010a6  00000000  00000000  00007dec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001614  00000000  00000000  00008e92  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000260  00000000  00000000  0000a4a6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	8f c0       	rjmp	.+286    	; 0x124 <__bad_interrupt>
       6:	00 00       	nop
       8:	8d c0       	rjmp	.+282    	; 0x124 <__bad_interrupt>
       a:	00 00       	nop
       c:	8b c0       	rjmp	.+278    	; 0x124 <__bad_interrupt>
       e:	00 00       	nop
      10:	89 c0       	rjmp	.+274    	; 0x124 <__bad_interrupt>
      12:	00 00       	nop
      14:	87 c0       	rjmp	.+270    	; 0x124 <__bad_interrupt>
      16:	00 00       	nop
      18:	85 c0       	rjmp	.+266    	; 0x124 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	83 c0       	rjmp	.+262    	; 0x124 <__bad_interrupt>
      1e:	00 00       	nop
      20:	81 c0       	rjmp	.+258    	; 0x124 <__bad_interrupt>
      22:	00 00       	nop
      24:	7f c0       	rjmp	.+254    	; 0x124 <__bad_interrupt>
      26:	00 00       	nop
      28:	7d c0       	rjmp	.+250    	; 0x124 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7b c0       	rjmp	.+246    	; 0x124 <__bad_interrupt>
      2e:	00 00       	nop
      30:	79 c0       	rjmp	.+242    	; 0x124 <__bad_interrupt>
      32:	00 00       	nop
      34:	77 c0       	rjmp	.+238    	; 0x124 <__bad_interrupt>
      36:	00 00       	nop
      38:	75 c0       	rjmp	.+234    	; 0x124 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	73 c0       	rjmp	.+230    	; 0x124 <__bad_interrupt>
      3e:	00 00       	nop
      40:	71 c0       	rjmp	.+226    	; 0x124 <__bad_interrupt>
      42:	00 00       	nop
      44:	72 c0       	rjmp	.+228    	; 0x12a <__vector_17>
      46:	00 00       	nop
      48:	6d c0       	rjmp	.+218    	; 0x124 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6b c0       	rjmp	.+214    	; 0x124 <__bad_interrupt>
      4e:	00 00       	nop
      50:	69 c0       	rjmp	.+210    	; 0x124 <__bad_interrupt>
      52:	00 00       	nop
      54:	67 c0       	rjmp	.+206    	; 0x124 <__bad_interrupt>
      56:	00 00       	nop
      58:	65 c0       	rjmp	.+202    	; 0x124 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	63 c0       	rjmp	.+198    	; 0x124 <__bad_interrupt>
      5e:	00 00       	nop
      60:	61 c0       	rjmp	.+194    	; 0x124 <__bad_interrupt>
      62:	00 00       	nop
      64:	ed c5       	rjmp	.+3034   	; 0xc40 <__vector_25>
      66:	00 00       	nop
      68:	14 c6       	rjmp	.+3112   	; 0xc92 <__vector_26>
      6a:	00 00       	nop
      6c:	5b c0       	rjmp	.+182    	; 0x124 <__bad_interrupt>
      6e:	00 00       	nop
      70:	59 c0       	rjmp	.+178    	; 0x124 <__bad_interrupt>
      72:	00 00       	nop
      74:	57 c0       	rjmp	.+174    	; 0x124 <__bad_interrupt>
      76:	00 00       	nop
      78:	55 c0       	rjmp	.+170    	; 0x124 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	53 c0       	rjmp	.+166    	; 0x124 <__bad_interrupt>
      7e:	00 00       	nop
      80:	a2 c0       	rjmp	.+324    	; 0x1c6 <__vector_32>
      82:	00 00       	nop
      84:	4f c0       	rjmp	.+158    	; 0x124 <__bad_interrupt>
      86:	00 00       	nop
      88:	4d c0       	rjmp	.+154    	; 0x124 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4b c0       	rjmp	.+150    	; 0x124 <__bad_interrupt>
      8e:	00 00       	nop
      90:	8e c6       	rjmp	.+3356   	; 0xdae <__vector_36>
      92:	00 00       	nop
      94:	b5 c6       	rjmp	.+3434   	; 0xe00 <__vector_37>
      96:	00 00       	nop
      98:	45 c0       	rjmp	.+138    	; 0x124 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	43 c0       	rjmp	.+134    	; 0x124 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	41 c0       	rjmp	.+130    	; 0x124 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3f c0       	rjmp	.+126    	; 0x124 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3d c0       	rjmp	.+122    	; 0x124 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3b c0       	rjmp	.+118    	; 0x124 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	39 c0       	rjmp	.+114    	; 0x124 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	37 c0       	rjmp	.+110    	; 0x124 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	35 c0       	rjmp	.+106    	; 0x124 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	33 c0       	rjmp	.+102    	; 0x124 <__bad_interrupt>
      be:	00 00       	nop
      c0:	31 c0       	rjmp	.+98     	; 0x124 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2f c0       	rjmp	.+94     	; 0x124 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2d c0       	rjmp	.+90     	; 0x124 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	e8 c6       	rjmp	.+3536   	; 0xe9e <__vector_51>
      ce:	00 00       	nop
      d0:	0f c7       	rjmp	.+3614   	; 0xef0 <__vector_52>
      d2:	00 00       	nop
      d4:	27 c0       	rjmp	.+78     	; 0x124 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	99 c7       	rjmp	.+3890   	; 0x100c <__vector_54>
      da:	00 00       	nop
      dc:	c0 c7       	rjmp	.+3968   	; 0x105e <__vector_55>
      de:	00 00       	nop
      e0:	21 c0       	rjmp	.+66     	; 0x124 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	13 e0       	ldi	r17, 0x03	; 3
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ea e2       	ldi	r30, 0x2A	; 42
      fc:	f7 e1       	ldi	r31, 0x17	; 23
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a0 30       	cpi	r26, 0x00	; 0
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	24 e0       	ldi	r18, 0x04	; 4
     110:	a0 e0       	ldi	r26, 0x00	; 0
     112:	b3 e0       	ldi	r27, 0x03	; 3
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a0 37       	cpi	r26, 0x70	; 112
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	64 d4       	rcall	.+2248   	; 0x9e8 <main>
     120:	0c 94 93 0b 	jmp	0x1726	; 0x1726 <_exit>

00000124 <__bad_interrupt>:
     124:	6d cf       	rjmp	.-294    	; 0x0 <__vectors>

00000126 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
**/
void atmel_start_init(void)
{
     126:	05 c5       	rjmp	.+2570   	; 0xb32 <system_init>
     128:	08 95       	ret

0000012a <__vector_17>:
#include <utils.h>

volatile uint64_t msectimer0 = 0;

ISR(TIMER1_COMPA_vect)
{
     12a:	1f 92       	push	r1
     12c:	0f 92       	push	r0
     12e:	0f b6       	in	r0, 0x3f	; 63
     130:	0f 92       	push	r0
     132:	11 24       	eor	r1, r1
     134:	2f 93       	push	r18
     136:	3f 93       	push	r19
     138:	4f 93       	push	r20
     13a:	5f 93       	push	r21
     13c:	6f 93       	push	r22
     13e:	7f 93       	push	r23
     140:	8f 93       	push	r24
     142:	9f 93       	push	r25
     144:	af 93       	push	r26
	static uint16_t nextcmp = 0;

	nextcmp = nextcmp + 16000;
     146:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <__data_end>
     14a:	90 91 01 03 	lds	r25, 0x0301	; 0x800301 <__data_end+0x1>
     14e:	80 58       	subi	r24, 0x80	; 128
     150:	91 4c       	sbci	r25, 0xC1	; 193
     152:	90 93 01 03 	sts	0x0301, r25	; 0x800301 <__data_end+0x1>
     156:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <__data_end>
	OCR1AH = nextcmp >> 8 ;
     15a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
	OCR1AL = nextcmp & 0xff;
     15e:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <__data_end>
     162:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
	msectimer0++;
     166:	20 91 02 03 	lds	r18, 0x0302	; 0x800302 <msectimer0>
     16a:	30 91 03 03 	lds	r19, 0x0303	; 0x800303 <msectimer0+0x1>
     16e:	40 91 04 03 	lds	r20, 0x0304	; 0x800304 <msectimer0+0x2>
     172:	50 91 05 03 	lds	r21, 0x0305	; 0x800305 <msectimer0+0x3>
     176:	60 91 06 03 	lds	r22, 0x0306	; 0x800306 <msectimer0+0x4>
     17a:	70 91 07 03 	lds	r23, 0x0307	; 0x800307 <msectimer0+0x5>
     17e:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <msectimer0+0x6>
     182:	90 91 09 03 	lds	r25, 0x0309	; 0x800309 <msectimer0+0x7>
     186:	a1 e0       	ldi	r26, 0x01	; 1
     188:	eb d7       	rcall	.+4054   	; 0x1160 <__adddi3_s8>
     18a:	20 93 02 03 	sts	0x0302, r18	; 0x800302 <msectimer0>
     18e:	30 93 03 03 	sts	0x0303, r19	; 0x800303 <msectimer0+0x1>
     192:	40 93 04 03 	sts	0x0304, r20	; 0x800304 <msectimer0+0x2>
     196:	50 93 05 03 	sts	0x0305, r21	; 0x800305 <msectimer0+0x3>
     19a:	60 93 06 03 	sts	0x0306, r22	; 0x800306 <msectimer0+0x4>
     19e:	70 93 07 03 	sts	0x0307, r23	; 0x800307 <msectimer0+0x5>
     1a2:	80 93 08 03 	sts	0x0308, r24	; 0x800308 <msectimer0+0x6>
     1a6:	90 93 09 03 	sts	0x0309, r25	; 0x800309 <msectimer0+0x7>
	/* Insert your TIMER_0 compare channel A interrupt handling code here */
}
     1aa:	af 91       	pop	r26
     1ac:	9f 91       	pop	r25
     1ae:	8f 91       	pop	r24
     1b0:	7f 91       	pop	r23
     1b2:	6f 91       	pop	r22
     1b4:	5f 91       	pop	r21
     1b6:	4f 91       	pop	r20
     1b8:	3f 91       	pop	r19
     1ba:	2f 91       	pop	r18
     1bc:	0f 90       	pop	r0
     1be:	0f be       	out	0x3f, r0	; 63
     1c0:	0f 90       	pop	r0
     1c2:	1f 90       	pop	r1
     1c4:	18 95       	reti

000001c6 <__vector_32>:

ISR(TIMER3_COMPA_vect)
{
     1c6:	1f 92       	push	r1
     1c8:	0f 92       	push	r0
     1ca:	0f b6       	in	r0, 0x3f	; 63
     1cc:	0f 92       	push	r0
     1ce:	11 24       	eor	r1, r1

	/* Insert your TIMER_1 compare channel A interrupt handling code here */
}
     1d0:	0f 90       	pop	r0
     1d2:	0f be       	out	0x3f, r0	; 63
     1d4:	0f 90       	pop	r0
     1d6:	1f 90       	pop	r1
     1d8:	18 95       	reti

000001da <delay_ms>:
		_delay_ms(1);
	}
}
#else
void delay_ms(uint16_t count)
{
     1da:	6f 92       	push	r6
     1dc:	7f 92       	push	r7
     1de:	8f 92       	push	r8
     1e0:	9f 92       	push	r9
     1e2:	af 92       	push	r10
     1e4:	bf 92       	push	r11
     1e6:	cf 92       	push	r12
     1e8:	df 92       	push	r13
     1ea:	ef 92       	push	r14
     1ec:	ff 92       	push	r15
     1ee:	0f 93       	push	r16
     1f0:	1f 93       	push	r17
     1f2:	cf 93       	push	r28
     1f4:	df 93       	push	r29
     1f6:	cd b7       	in	r28, 0x3d	; 61
     1f8:	de b7       	in	r29, 0x3e	; 62
     1fa:	60 97       	sbiw	r28, 0x10	; 16
     1fc:	0f b6       	in	r0, 0x3f	; 63
     1fe:	f8 94       	cli
     200:	de bf       	out	0x3e, r29	; 62
     202:	0f be       	out	0x3f, r0	; 63
     204:	cd bf       	out	0x3d, r28	; 61
	volatile uint64_t k,j;
	while(1) {
		cli();
     206:	f8 94       	cli
		j = msectimer0;
     208:	f0 91 02 03 	lds	r31, 0x0302	; 0x800302 <msectimer0>
     20c:	e0 91 03 03 	lds	r30, 0x0303	; 0x800303 <msectimer0+0x1>
     210:	70 91 04 03 	lds	r23, 0x0304	; 0x800304 <msectimer0+0x2>
     214:	60 91 05 03 	lds	r22, 0x0305	; 0x800305 <msectimer0+0x3>
     218:	50 91 06 03 	lds	r21, 0x0306	; 0x800306 <msectimer0+0x4>
     21c:	40 91 07 03 	lds	r20, 0x0307	; 0x800307 <msectimer0+0x5>
     220:	30 91 08 03 	lds	r19, 0x0308	; 0x800308 <msectimer0+0x6>
     224:	20 91 09 03 	lds	r18, 0x0309	; 0x800309 <msectimer0+0x7>
     228:	f9 87       	std	Y+9, r31	; 0x09
     22a:	ea 87       	std	Y+10, r30	; 0x0a
     22c:	7b 87       	std	Y+11, r23	; 0x0b
     22e:	6c 87       	std	Y+12, r22	; 0x0c
     230:	5d 87       	std	Y+13, r21	; 0x0d
     232:	4e 87       	std	Y+14, r20	; 0x0e
     234:	3f 87       	std	Y+15, r19	; 0x0f
     236:	28 8b       	std	Y+16, r18	; 0x10
		sei();
     238:	78 94       	sei
		k = j + (uint64_t)count;
     23a:	69 84       	ldd	r6, Y+9	; 0x09
     23c:	7a 84       	ldd	r7, Y+10	; 0x0a
     23e:	bb 85       	ldd	r27, Y+11	; 0x0b
     240:	ac 85       	ldd	r26, Y+12	; 0x0c
     242:	fd 85       	ldd	r31, Y+13	; 0x0d
     244:	ee 85       	ldd	r30, Y+14	; 0x0e
     246:	0f 85       	ldd	r16, Y+15	; 0x0f
     248:	18 89       	ldd	r17, Y+16	; 0x10
     24a:	4c 01       	movw	r8, r24
     24c:	28 2f       	mov	r18, r24
     24e:	39 2d       	mov	r19, r9
     250:	40 e0       	ldi	r20, 0x00	; 0
     252:	50 e0       	ldi	r21, 0x00	; 0
     254:	60 e0       	ldi	r22, 0x00	; 0
     256:	70 e0       	ldi	r23, 0x00	; 0
     258:	80 e0       	ldi	r24, 0x00	; 0
     25a:	90 e0       	ldi	r25, 0x00	; 0
     25c:	a6 2c       	mov	r10, r6
     25e:	b7 2c       	mov	r11, r7
     260:	cb 2e       	mov	r12, r27
     262:	da 2e       	mov	r13, r26
     264:	ef 2e       	mov	r14, r31
     266:	fe 2e       	mov	r15, r30
     268:	72 d7       	rcall	.+3812   	; 0x114e <__adddi3>
     26a:	29 83       	std	Y+1, r18	; 0x01
     26c:	3a 83       	std	Y+2, r19	; 0x02
     26e:	4b 83       	std	Y+3, r20	; 0x03
     270:	5c 83       	std	Y+4, r21	; 0x04
     272:	6d 83       	std	Y+5, r22	; 0x05
     274:	7e 83       	std	Y+6, r23	; 0x06
     276:	8f 83       	std	Y+7, r24	; 0x07
     278:	98 87       	std	Y+8, r25	; 0x08
		while(1) {
			cli();
     27a:	f8 94       	cli
			j = msectimer0;
     27c:	70 91 02 03 	lds	r23, 0x0302	; 0x800302 <msectimer0>
     280:	60 91 03 03 	lds	r22, 0x0303	; 0x800303 <msectimer0+0x1>
     284:	50 91 04 03 	lds	r21, 0x0304	; 0x800304 <msectimer0+0x2>
     288:	40 91 05 03 	lds	r20, 0x0305	; 0x800305 <msectimer0+0x3>
     28c:	30 91 06 03 	lds	r19, 0x0306	; 0x800306 <msectimer0+0x4>
     290:	20 91 07 03 	lds	r18, 0x0307	; 0x800307 <msectimer0+0x5>
     294:	90 91 08 03 	lds	r25, 0x0308	; 0x800308 <msectimer0+0x6>
     298:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <msectimer0+0x7>
     29c:	79 87       	std	Y+9, r23	; 0x09
     29e:	6a 87       	std	Y+10, r22	; 0x0a
     2a0:	5b 87       	std	Y+11, r21	; 0x0b
     2a2:	4c 87       	std	Y+12, r20	; 0x0c
     2a4:	3d 87       	std	Y+13, r19	; 0x0d
     2a6:	2e 87       	std	Y+14, r18	; 0x0e
     2a8:	9f 87       	std	Y+15, r25	; 0x0f
     2aa:	88 8b       	std	Y+16, r24	; 0x10
			sei();
     2ac:	78 94       	sei
			if (j >= k)
     2ae:	29 85       	ldd	r18, Y+9	; 0x09
     2b0:	3a 85       	ldd	r19, Y+10	; 0x0a
     2b2:	4b 85       	ldd	r20, Y+11	; 0x0b
     2b4:	5c 85       	ldd	r21, Y+12	; 0x0c
     2b6:	6d 85       	ldd	r22, Y+13	; 0x0d
     2b8:	7e 85       	ldd	r23, Y+14	; 0x0e
     2ba:	8f 85       	ldd	r24, Y+15	; 0x0f
     2bc:	98 89       	ldd	r25, Y+16	; 0x10
     2be:	a9 80       	ldd	r10, Y+1	; 0x01
     2c0:	ba 80       	ldd	r11, Y+2	; 0x02
     2c2:	cb 80       	ldd	r12, Y+3	; 0x03
     2c4:	dc 80       	ldd	r13, Y+4	; 0x04
     2c6:	ed 80       	ldd	r14, Y+5	; 0x05
     2c8:	fe 80       	ldd	r15, Y+6	; 0x06
     2ca:	0f 81       	ldd	r16, Y+7	; 0x07
     2cc:	18 85       	ldd	r17, Y+8	; 0x08
     2ce:	54 d7       	rcall	.+3752   	; 0x1178 <__cmpdi2>
     2d0:	a0 f2       	brcs	.-88     	; 0x27a <delay_ms+0xa0>
			{
				return;
			}
		}
	}
}
     2d2:	60 96       	adiw	r28, 0x10	; 16
     2d4:	0f b6       	in	r0, 0x3f	; 63
     2d6:	f8 94       	cli
     2d8:	de bf       	out	0x3e, r29	; 62
     2da:	0f be       	out	0x3f, r0	; 63
     2dc:	cd bf       	out	0x3d, r28	; 61
     2de:	df 91       	pop	r29
     2e0:	cf 91       	pop	r28
     2e2:	1f 91       	pop	r17
     2e4:	0f 91       	pop	r16
     2e6:	ff 90       	pop	r15
     2e8:	ef 90       	pop	r14
     2ea:	df 90       	pop	r13
     2ec:	cf 90       	pop	r12
     2ee:	bf 90       	pop	r11
     2f0:	af 90       	pop	r10
     2f2:	9f 90       	pop	r9
     2f4:	8f 90       	pop	r8
     2f6:	7f 90       	pop	r7
     2f8:	6f 90       	pop	r6
     2fa:	08 95       	ret

000002fc <set0baud>:
#endif

// set the baud on the fly for usart 0; this makes sure uart is idle
void set0baud(int baudindex) {
     2fc:	9c 01       	movw	r18, r24

	//Check UART tx Data has been completed
	while (!(UCSR0A & (1 <<UDRE0)))			// 	while (!(UCSR0A & (1 <<TXC0)))
     2fe:	e0 ec       	ldi	r30, 0xC0	; 192
     300:	f0 e0       	ldi	r31, 0x00	; 0
     302:	90 81       	ld	r25, Z
     304:	95 ff       	sbrs	r25, 5
     306:	fd cf       	rjmp	.-6      	; 0x302 <set0baud+0x6>
	;
	ENTER_CRITICAL(W);
     308:	0f b6       	in	r0, 0x3f	; 63
     30a:	f8 94       	cli
     30c:	0f 92       	push	r0
	while (!(UCSR0A & (1 <<UDRE0)))		// make sure no sneaky isr got in
     30e:	e0 ec       	ldi	r30, 0xC0	; 192
     310:	f0 e0       	ldi	r31, 0x00	; 0
     312:	90 81       	ld	r25, Z
     314:	95 ff       	sbrs	r25, 5
     316:	fd cf       	rjmp	.-6      	; 0x312 <set0baud+0x16>
	;
	// deactivate USART
	UCSR0B = 0 << RXCIE0    /* RX Complete Interrupt Enable: enabled */
     318:	a1 ec       	ldi	r26, 0xC1	; 193
     31a:	b0 e0       	ldi	r27, 0x00	; 0
     31c:	1c 92       	st	X, r1
	| 0 << RXEN0   /* Receiver Enable: enabled */
	| 0 << TXEN0   /* Transmitter Enable: enabled */
	| 0 << UCSZ02; /*  */
	
	//Reconfigure baud rate
	UBRR0H = (btable[baudindex][BMULT] >> 8);
     31e:	f9 01       	movw	r30, r18
     320:	ee 0f       	add	r30, r30
     322:	ff 1f       	adc	r31, r31
     324:	ee 0f       	add	r30, r30
     326:	ff 1f       	adc	r31, r31
     328:	ec 51       	subi	r30, 0x1C	; 28
     32a:	fd 4f       	sbci	r31, 0xFD	; 253
     32c:	81 81       	ldd	r24, Z+1	; 0x01
     32e:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
	UBRR0L = (btable[baudindex][BMULT] & 0xff);
     332:	80 81       	ld	r24, Z
     334:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>

	// activate USART
	UCSR0B = 1 << RXCIE0    /* RX Complete Interrupt Enable: enabled */
     338:	88 e9       	ldi	r24, 0x98	; 152
     33a:	8c 93       	st	X, r24
	| 0 << UDRIE0  /* USART Data Register Empty Interupt Enable: disabled */
	| 1 << RXEN0   /* Receiver Enable: enabled */
	| 1 << TXEN0   /* Transmitter Enable: enabled */
	| 0 << UCSZ02; /*  */

	EXIT_CRITICAL(W);
     33c:	0f 90       	pop	r0
     33e:	0f be       	out	0x3f, r0	; 63
     340:	08 95       	ret

00000342 <set2baud>:
}

// set the baud on the fly for usart 2; this makes sure uart is idle
void set2baud(int baudindex) {
     342:	9c 01       	movw	r18, r24

	//Check UART tx Data has been completed
	while (!(UCSR2A & (1 <<UDRE2)))			// 	while (!(UCSR2A & (1 <<TXC2)))	
     344:	e0 ed       	ldi	r30, 0xD0	; 208
     346:	f0 e0       	ldi	r31, 0x00	; 0
     348:	90 81       	ld	r25, Z
     34a:	95 ff       	sbrs	r25, 5
     34c:	fd cf       	rjmp	.-6      	; 0x348 <set2baud+0x6>
		;
	ENTER_CRITICAL(W);
     34e:	0f b6       	in	r0, 0x3f	; 63
     350:	f8 94       	cli
     352:	0f 92       	push	r0
	while (!(UCSR2A & (1 <<UDRE2)))		// make sure no sneaky isr got in
     354:	e0 ed       	ldi	r30, 0xD0	; 208
     356:	f0 e0       	ldi	r31, 0x00	; 0
     358:	90 81       	ld	r25, Z
     35a:	95 ff       	sbrs	r25, 5
     35c:	fd cf       	rjmp	.-6      	; 0x358 <set2baud+0x16>
		;
	// deactivate USART
	UCSR2B = 0 << RXCIE2    /* RX Complete Interrupt Enable: enabled */
     35e:	a1 ed       	ldi	r26, 0xD1	; 209
     360:	b0 e0       	ldi	r27, 0x00	; 0
     362:	1c 92       	st	X, r1
	| 0 << RXEN2   /* Receiver Enable: enabled */
	| 0 << TXEN2   /* Transmitter Enable: enabled */
	| 0 << UCSZ22; /*  */
	
	//Reconfigure baud rate
	UBRR2H = (btable[baudindex][BMULT] >> 8);
     364:	f9 01       	movw	r30, r18
     366:	ee 0f       	add	r30, r30
     368:	ff 1f       	adc	r31, r31
     36a:	ee 0f       	add	r30, r30
     36c:	ff 1f       	adc	r31, r31
     36e:	ec 51       	subi	r30, 0x1C	; 28
     370:	fd 4f       	sbci	r31, 0xFD	; 253
     372:	81 81       	ldd	r24, Z+1	; 0x01
     374:	80 93 d5 00 	sts	0x00D5, r24	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
	UBRR2L = (btable[baudindex][BMULT] & 0xff);
     378:	80 81       	ld	r24, Z
     37a:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>

	// activate USART
	UCSR2B = 1 << RXCIE2    /* RX Complete Interrupt Enable: enabled */
     37e:	88 e9       	ldi	r24, 0x98	; 152
     380:	8c 93       	st	X, r24
	| 0 << UDRIE2  /* USART Data Register Empty Interupt Enable: disabled */
	| 1 << RXEN2   /* Receiver Enable: enabled */
	| 1 << TXEN2   /* Transmitter Enable: enabled */
	| 0 << UCSZ22; /*  */

	EXIT_CRITICAL(W);
     382:	0f 90       	pop	r0
     384:	0f be       	out	0x3f, r0	; 63
     386:	08 95       	ret

00000388 <findlcd>:
}

// Find the LCD and return the current baud rate or -1 if not found
int findlcd(void)
{
     388:	8f 92       	push	r8
     38a:	9f 92       	push	r9
     38c:	af 92       	push	r10
     38e:	bf 92       	push	r11
     390:	cf 92       	push	r12
     392:	df 92       	push	r13
     394:	ef 92       	push	r14
     396:	ff 92       	push	r15
     398:	0f 93       	push	r16
     39a:	1f 93       	push	r17
     39c:	cf 93       	push	r28
     39e:	df 93       	push	r29
     3a0:	cd b7       	in	r28, 0x3d	; 61
     3a2:	de b7       	in	r29, 0x3e	; 62
     3a4:	c6 59       	subi	r28, 0x96	; 150
     3a6:	d1 09       	sbc	r29, r1
     3a8:	0f b6       	in	r0, 0x3f	; 63
     3aa:	f8 94       	cli
     3ac:	de bf       	out	0x3e, r29	; 62
     3ae:	0f be       	out	0x3f, r0	; 63
     3b0:	cd bf       	out	0x3d, r28	; 61
	const char discovermsg[]="\x00\xff\xff\xff""connect\xff\xff\xff";	// discovery message
     3b2:	8f e0       	ldi	r24, 0x0F	; 15
     3b4:	ee e0       	ldi	r30, 0x0E	; 14
     3b6:	f2 e0       	ldi	r31, 0x02	; 2
     3b8:	de 01       	movw	r26, r28
     3ba:	11 96       	adiw	r26, 0x01	; 1
     3bc:	01 90       	ld	r0, Z+
     3be:	0d 92       	st	X+, r0
     3c0:	8a 95       	dec	r24
     3c2:	e1 f7       	brne	.-8      	; 0x3bc <findlcd+0x34>
	const char foundmsg[]="comok ";		// first part of expected LCD response
     3c4:	87 e0       	ldi	r24, 0x07	; 7
     3c6:	e5 e3       	ldi	r30, 0x35	; 53
     3c8:	f2 e0       	ldi	r31, 0x02	; 2
     3ca:	de 01       	movw	r26, r28
     3cc:	50 96       	adiw	r26, 0x10	; 16
     3ce:	01 90       	ld	r0, Z+
     3d0:	0d 92       	st	X+, r0
     3d2:	8a 95       	dec	r24
     3d4:	e1 f7       	brne	.-8      	; 0x3ce <findlcd+0x46>
	int	i, j, rindex, bindex;
	int inindex = 0;
	int wtim = 0;

	// clear arrays
	memset(lcdsig, 0, sizeof lcdsig);
     3d6:	80 e5       	ldi	r24, 0x50	; 80
     3d8:	ea e0       	ldi	r30, 0x0A	; 10
     3da:	f3 e0       	ldi	r31, 0x03	; 3
     3dc:	df 01       	movw	r26, r30
     3de:	1d 92       	st	X+, r1
     3e0:	8a 95       	dec	r24
     3e2:	e9 f7       	brne	.-6      	; 0x3de <findlcd+0x56>
	memset(response, 0, sizeof response);
     3e4:	fe 01       	movw	r30, r28
     3e6:	77 96       	adiw	r30, 0x17	; 23
     3e8:	80 e8       	ldi	r24, 0x80	; 128
     3ea:	df 01       	movw	r26, r30
     3ec:	1d 92       	st	X+, r1
     3ee:	8a 95       	dec	r24
     3f0:	e9 f7       	brne	.-6      	; 0x3ec <findlcd+0x64>
     3f2:	a1 2c       	mov	r10, r1
     3f4:	b1 2c       	mov	r11, r1
     3f6:	4e 01       	movw	r8, r28
     3f8:	bf e0       	ldi	r27, 0x0F	; 15
     3fa:	8b 0e       	add	r8, r27
     3fc:	91 1c       	adc	r9, r1

	for(bindex=0; bindex<sizeof(btable); bindex++)		// try every baud
	{
		inindex = 0;
		set2baud(bindex);			// set the LCD baud rate
     3fe:	c5 01       	movw	r24, r10
     400:	a0 df       	rcall	.-192    	; 0x342 <set2baud>

		delay_ms(2);			// allow baud gen to settle
     402:	82 e0       	ldi	r24, 0x02	; 2
     404:	90 e0       	ldi	r25, 0x00	; 0
     406:	e9 de       	rcall	.-558    	; 0x1da <delay_ms>
     408:	fe 01       	movw	r30, r28
     40a:	31 96       	adiw	r30, 0x01	; 1
     40c:	6f 01       	movw	r12, r30
     40e:	00 e0       	ldi	r16, 0x00	; 0
     410:	10 e0       	ldi	r17, 0x00	; 0

		for(j=0; j<sizeof(discovermsg)-1; j++)		// send discovery command to LCD
		{
			USART_2_write(discovermsg[j]);	// connect
     412:	d6 01       	movw	r26, r12
     414:	8d 91       	ld	r24, X+
     416:	6d 01       	movw	r12, r26
     418:	bd d5       	rcall	.+2938   	; 0xf94 <USART_2_write>
     41a:	0f 2e       	mov	r0, r31
     41c:	f7 e1       	ldi	r31, 0x17	; 23
     41e:	ef 2e       	mov	r14, r31
     420:	f1 2c       	mov	r15, r1
     422:	f0 2d       	mov	r31, r0
     424:	ec 0e       	add	r14, r28
     426:	fd 1e       	adc	r15, r29
     428:	e0 0e       	add	r14, r16
     42a:	f1 1e       	adc	r15, r17
			while(USART_2_is_rx_ready())
     42c:	09 c0       	rjmp	.+18     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
			{
				if(inindex < sizeof(response))
     42e:	00 38       	cpi	r16, 0x80	; 128
     430:	11 05       	cpc	r17, r1
				{
					response[inindex++] = USART_2_read();
     432:	30 f4       	brcc	.+12     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     434:	0f 5f       	subi	r16, 0xFF	; 255
     436:	1f 4f       	sbci	r17, 0xFF	; 255
     438:	94 d5       	rcall	.+2856   	; 0xf62 <USART_2_read>
     43a:	f7 01       	movw	r30, r14
     43c:	81 93       	st	Z+, r24
		delay_ms(2);			// allow baud gen to settle

		for(j=0; j<sizeof(discovermsg)-1; j++)		// send discovery command to LCD
		{
			USART_2_write(discovermsg[j]);	// connect
			while(USART_2_is_rx_ready())
     43e:	7f 01       	movw	r14, r30
     440:	89 d5       	rcall	.+2834   	; 0xf54 <USART_2_is_rx_ready>
     442:	81 11       	cpse	r24, r1
     444:	f4 cf       	rjmp	.-24     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
		inindex = 0;
		set2baud(bindex);			// set the LCD baud rate

		delay_ms(2);			// allow baud gen to settle

		for(j=0; j<sizeof(discovermsg)-1; j++)		// send discovery command to LCD
     446:	c8 14       	cp	r12, r8
     448:	d9 04       	cpc	r13, r9
     44a:	19 f7       	brne	.-58     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     44c:	0f 2e       	mov	r0, r31
     44e:	fa ef       	ldi	r31, 0xFA	; 250
     450:	cf 2e       	mov	r12, r31
     452:	d1 2c       	mov	r13, r1
     454:	f0 2d       	mov	r31, r0

		for (wtim = 0; (wtim < 250); wtim++)		// hang around a bit and try to collect complete response
		{
			while(USART_2_is_rx_ready())
			{
				if(inindex < sizeof(response))
     456:	13 c0       	rjmp	.+38     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
     458:	00 38       	cpi	r16, 0x80	; 128
				{
					response[inindex++] = USART_2_read();
     45a:	11 05       	cpc	r17, r1
     45c:	30 f4       	brcc	.+12     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
     45e:	0f 5f       	subi	r16, 0xFF	; 255
     460:	1f 4f       	sbci	r17, 0xFF	; 255
     462:	7f d5       	rcall	.+2814   	; 0xf62 <USART_2_read>
			}
		}

		for (wtim = 0; (wtim < 250); wtim++)		// hang around a bit and try to collect complete response
		{
			while(USART_2_is_rx_ready())
     464:	d7 01       	movw	r26, r14
     466:	8d 93       	st	X+, r24
     468:	7d 01       	movw	r14, r26
     46a:	74 d5       	rcall	.+2792   	; 0xf54 <USART_2_is_rx_ready>
				if(inindex < sizeof(response))
				{
					response[inindex++] = USART_2_read();
				}
			}
			delay_ms(1);			// allow one char time at 2400 baud, 5ms is 64 chars at 115200
     46c:	81 11       	cpse	r24, r1
     46e:	f4 cf       	rjmp	.-24     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
     470:	81 e0       	ldi	r24, 0x01	; 1
     472:	90 e0       	ldi	r25, 0x00	; 0
     474:	b2 de       	rcall	.-668    	; 0x1da <delay_ms>
     476:	b1 e0       	ldi	r27, 0x01	; 1
     478:	cb 1a       	sub	r12, r27
					response[inindex++] = USART_2_read();
				}
			}
		}

		for (wtim = 0; (wtim < 250); wtim++)		// hang around a bit and try to collect complete response
     47a:	d1 08       	sbc	r13, r1
     47c:	51 f0       	breq	.+20     	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
     47e:	0f 2e       	mov	r0, r31
     480:	f7 e1       	ldi	r31, 0x17	; 23
     482:	ef 2e       	mov	r14, r31
     484:	f1 2c       	mov	r15, r1
     486:	f0 2d       	mov	r31, r0
     488:	ec 0e       	add	r14, r28
     48a:	fd 1e       	adc	r15, r29
     48c:	e0 0e       	add	r14, r16
     48e:	f1 1e       	adc	r15, r17
			delay_ms(1);			// allow one char time at 2400 baud, 5ms is 64 chars at 115200
		}

		if (inindex)		// we *have* received something
		{
			for(rindex=0; rindex<inindex; rindex++)		// the length of the rx'd string
     490:	ec cf       	rjmp	.-40     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
     492:	10 16       	cp	r1, r16
     494:	11 06       	cpc	r1, r17
     496:	0c f0       	brlt	.+2      	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
     498:	60 c0       	rjmp	.+192    	; 0x55a <__LOCK_REGION_LENGTH__+0x15a>
     49a:	6e 01       	movw	r12, r28
     49c:	e7 e1       	ldi	r30, 0x17	; 23
     49e:	ce 0e       	add	r12, r30
			{
				if (strncmp(&response[rindex],foundmsg,sizeof(foundmsg-1)) == 0)		// look for the start
     4a0:	d1 1c       	adc	r13, r1
     4a2:	e1 2c       	mov	r14, r1
     4a4:	f1 2c       	mov	r15, r1
     4a6:	42 e0       	ldi	r20, 0x02	; 2
     4a8:	50 e0       	ldi	r21, 0x00	; 0
     4aa:	be 01       	movw	r22, r28
     4ac:	60 5f       	subi	r22, 0xF0	; 240
     4ae:	7f 4f       	sbci	r23, 0xFF	; 255
     4b0:	c6 01       	movw	r24, r12
     4b2:	6b d6       	rcall	.+3286   	; 0x118a <strncmp>
     4b4:	89 2b       	or	r24, r25
				{
					for(i=rindex; i<inindex; i++)		// found start, now look for terminator bytes
     4b6:	09 f0       	breq	.+2      	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
     4b8:	46 c0       	rjmp	.+140    	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
     4ba:	e0 16       	cp	r14, r16
     4bc:	f1 06       	cpc	r15, r17
     4be:	0c f0       	brlt	.+2      	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
     4c0:	42 c0       	rjmp	.+132    	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
					{
						if ((response[i] == 0xff) && (response[i+1] == 0xff) && (response[i+2] == 0xff))	// found response terminator
     4c2:	f6 01       	movw	r30, r12
     4c4:	c7 01       	movw	r24, r14
     4c6:	21 91       	ld	r18, Z+
     4c8:	2f 3f       	cpi	r18, 0xFF	; 255
     4ca:	c1 f5       	brne	.+112    	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
     4cc:	20 81       	ld	r18, Z
     4ce:	2f 3f       	cpi	r18, 0xFF	; 255
     4d0:	a9 f5       	brne	.+106    	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
     4d2:	9c 01       	movw	r18, r24
     4d4:	2e 5f       	subi	r18, 0xFE	; 254
     4d6:	3f 4f       	sbci	r19, 0xFF	; 255
						{
							if(i+2-rindex > sizeof(lcdsig)-1)		// will fit in the buffer
     4d8:	41 81       	ldd	r20, Z+1	; 0x01
     4da:	4f 3f       	cpi	r20, 0xFF	; 255
     4dc:	79 f5       	brne	.+94     	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
     4de:	2e 19       	sub	r18, r14
							{
								printf("LCD response too long\n\r");
     4e0:	3f 09       	sbc	r19, r15
     4e2:	20 35       	cpi	r18, 0x50	; 80
     4e4:	31 05       	cpc	r19, r1
     4e6:	50 f0       	brcs	.+20     	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
     4e8:	8d e1       	ldi	r24, 0x1D	; 29
     4ea:	92 e0       	ldi	r25, 0x02	; 2
								return(-1);
     4ec:	9f 93       	push	r25
     4ee:	8f 93       	push	r24
     4f0:	5a d6       	rcall	.+3252   	; 0x11a6 <printf>
     4f2:	0f 90       	pop	r0
     4f4:	0f 90       	pop	r0
							}
							else
							{
								int k;
								j = 0;
								k = i + 3 - rindex;
     4f6:	8f ef       	ldi	r24, 0xFF	; 255
     4f8:	9f ef       	ldi	r25, 0xFF	; 255
     4fa:	3c c0       	rjmp	.+120    	; 0x574 <__LOCK_REGION_LENGTH__+0x174>
								//		the expression evals wrong??			while (j < (i+3-rindex))
								while (j < k)
     4fc:	03 96       	adiw	r24, 0x03	; 3
     4fe:	8e 19       	sub	r24, r14
     500:	9f 09       	sbc	r25, r15
     502:	18 16       	cp	r1, r24
     504:	19 06       	cpc	r1, r25
     506:	8c f4       	brge	.+34     	; 0x52a <__LOCK_REGION_LENGTH__+0x12a>
     508:	e7 e1       	ldi	r30, 0x17	; 23
     50a:	f0 e0       	ldi	r31, 0x00	; 0
     50c:	ec 0f       	add	r30, r28
     50e:	fd 1f       	adc	r31, r29
     510:	ee 0d       	add	r30, r14
     512:	ff 1d       	adc	r31, r15
     514:	aa e0       	ldi	r26, 0x0A	; 10
     516:	b3 e0       	ldi	r27, 0x03	; 3
								{
									lcdsig[j++] = response[rindex++];		// copy response string into global
     518:	9c 01       	movw	r18, r24
     51a:	26 5f       	subi	r18, 0xF6	; 246
							{
								int k;
								j = 0;
								k = i + 3 - rindex;
								//		the expression evals wrong??			while (j < (i+3-rindex))
								while (j < k)
     51c:	3c 4f       	sbci	r19, 0xFC	; 252
     51e:	41 91       	ld	r20, Z+
     520:	4d 93       	st	X+, r20
     522:	a2 17       	cp	r26, r18
								return(-1);
							}
							else
							{
								int k;
								j = 0;
     524:	b3 07       	cpc	r27, r19
     526:	d9 f7       	brne	.-10     	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
								//		the expression evals wrong??			while (j < (i+3-rindex))
								while (j < k)
								{
									lcdsig[j++] = response[rindex++];		// copy response string into global
								}
								lcdsig[j] = '\0';		// add our null terminator
     528:	02 c0       	rjmp	.+4      	; 0x52e <__LOCK_REGION_LENGTH__+0x12e>
     52a:	80 e0       	ldi	r24, 0x00	; 0
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	fc 01       	movw	r30, r24
								return(bindex);
     530:	e6 5f       	subi	r30, 0xF6	; 246
     532:	fc 4f       	sbci	r31, 0xFC	; 252
     534:	10 82       	st	Z, r1
		{
			for(rindex=0; rindex<inindex; rindex++)		// the length of the rx'd string
			{
				if (strncmp(&response[rindex],foundmsg,sizeof(foundmsg-1)) == 0)		// look for the start
				{
					for(i=rindex; i<inindex; i++)		// found start, now look for terminator bytes
     536:	8a 2d       	mov	r24, r10
     538:	9b 2d       	mov	r25, r11
     53a:	1c c0       	rjmp	.+56     	; 0x574 <__LOCK_REGION_LENGTH__+0x174>
     53c:	01 96       	adiw	r24, 0x01	; 1
     53e:	80 17       	cp	r24, r16
			delay_ms(1);			// allow one char time at 2400 baud, 5ms is 64 chars at 115200
		}

		if (inindex)		// we *have* received something
		{
			for(rindex=0; rindex<inindex; rindex++)		// the length of the rx'd string
     540:	91 07       	cpc	r25, r17
     542:	0c f4       	brge	.+2      	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
     544:	c0 cf       	rjmp	.-128    	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
     546:	ff ef       	ldi	r31, 0xFF	; 255
     548:	ef 1a       	sub	r14, r31
     54a:	ff 0a       	sbc	r15, r31
     54c:	8f ef       	ldi	r24, 0xFF	; 255
     54e:	c8 1a       	sub	r12, r24
     550:	d8 0a       	sbc	r13, r24
     552:	0e 15       	cp	r16, r14

	// clear arrays
	memset(lcdsig, 0, sizeof lcdsig);
	memset(response, 0, sizeof response);

	for(bindex=0; bindex<sizeof(btable); bindex++)		// try every baud
     554:	1f 05       	cpc	r17, r15
     556:	09 f0       	breq	.+2      	; 0x55a <__LOCK_REGION_LENGTH__+0x15a>
     558:	a6 cf       	rjmp	.-180    	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
     55a:	9f ef       	ldi	r25, 0xFF	; 255
     55c:	a9 1a       	sub	r10, r25
     55e:	b9 0a       	sbc	r11, r25
     560:	ac e1       	ldi	r26, 0x1C	; 28
     562:	aa 16       	cp	r10, r26

			}
		}
	}
	// test
	lcdsig[0]=128;
     564:	b1 04       	cpc	r11, r1
     566:	09 f0       	breq	.+2      	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>
     568:	4a cf       	rjmp	.-364    	; 0x3fe <findlcd+0x76>
	return(-1);
     56a:	80 e8       	ldi	r24, 0x80	; 128
     56c:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <lcdsig>
}
     570:	8f ef       	ldi	r24, 0xFF	; 255
     572:	9f ef       	ldi	r25, 0xFF	; 255
     574:	ca 56       	subi	r28, 0x6A	; 106
     576:	df 4f       	sbci	r29, 0xFF	; 255
     578:	0f b6       	in	r0, 0x3f	; 63
     57a:	f8 94       	cli
     57c:	de bf       	out	0x3e, r29	; 62
     57e:	0f be       	out	0x3f, r0	; 63
     580:	cd bf       	out	0x3d, r28	; 61
     582:	df 91       	pop	r29
     584:	cf 91       	pop	r28
     586:	1f 91       	pop	r17
     588:	0f 91       	pop	r16
     58a:	ff 90       	pop	r15
     58c:	ef 90       	pop	r14
     58e:	df 90       	pop	r13
     590:	cf 90       	pop	r12
     592:	bf 90       	pop	r11
     594:	af 90       	pop	r10
     596:	9f 90       	pop	r9
     598:	8f 90       	pop	r8
     59a:	08 95       	ret

0000059c <getconnect>:


// see if Nextion editor connects
int getconnect(char buf[], int bsize)
{
     59c:	6f 92       	push	r6
     59e:	7f 92       	push	r7
     5a0:	8f 92       	push	r8
     5a2:	9f 92       	push	r9
     5a4:	af 92       	push	r10
     5a6:	bf 92       	push	r11
     5a8:	cf 92       	push	r12
     5aa:	df 92       	push	r13
     5ac:	ef 92       	push	r14
     5ae:	ff 92       	push	r15
     5b0:	0f 93       	push	r16
     5b2:	1f 93       	push	r17
     5b4:	cf 93       	push	r28
     5b6:	df 93       	push	r29
     5b8:	cd b7       	in	r28, 0x3d	; 61
     5ba:	de b7       	in	r29, 0x3e	; 62
     5bc:	2b 97       	sbiw	r28, 0x0b	; 11
     5be:	0f b6       	in	r0, 0x3f	; 63
     5c0:	f8 94       	cli
     5c2:	de bf       	out	0x3e, r29	; 62
     5c4:	0f be       	out	0x3f, r0	; 63
     5c6:	cd bf       	out	0x3d, r28	; 61
     5c8:	5c 01       	movw	r10, r24
     5ca:	6b 01       	movw	r12, r22
	int inindex = 0, mindex = 0;
	int wtim, i;
	char ch;
	const char discovermsg[]="connect\xff\xff\xff";		// expected discovery message
     5cc:	8b e0       	ldi	r24, 0x0B	; 11
     5ce:	ec e3       	ldi	r30, 0x3C	; 60
     5d0:	f2 e0       	ldi	r31, 0x02	; 2
     5d2:	de 01       	movw	r26, r28
     5d4:	11 96       	adiw	r26, 0x01	; 1
     5d6:	01 90       	ld	r0, Z+
     5d8:	0d 92       	st	X+, r0
     5da:	8a 95       	dec	r24
     5dc:	e1 f7       	brne	.-8      	; 0x5d6 <getconnect+0x3a>

	for(i=0; i<bsize; buf[i++]='\0');
     5de:	16 16       	cp	r1, r22
     5e0:	17 06       	cpc	r1, r23
     5e2:	0c f0       	brlt	.+2      	; 0x5e6 <getconnect+0x4a>
     5e4:	48 c0       	rjmp	.+144    	; 0x676 <getconnect+0xda>
     5e6:	f5 01       	movw	r30, r10
     5e8:	c5 01       	movw	r24, r10
     5ea:	86 0f       	add	r24, r22
     5ec:	97 1f       	adc	r25, r23
     5ee:	11 92       	st	Z+, r1
     5f0:	e8 17       	cp	r30, r24
     5f2:	f9 07       	cpc	r31, r25
     5f4:	e1 f7       	brne	.-8      	; 0x5ee <getconnect+0x52>
     5f6:	3f c0       	rjmp	.+126    	; 0x676 <getconnect+0xda>
	for (wtim = 0; (wtim < 7000); wtim++)		// hang around waiting for some input
	{
		while(USART_0_is_rx_ready())
		{
			if(inindex < bsize)
     5f8:	ec 14       	cp	r14, r12
     5fa:	fd 04       	cpc	r15, r13
     5fc:	34 f0       	brlt	.+12     	; 0x60a <getconnect+0x6e>
			}
			else
			{
				// input buffer full
				inindex = 0;
				for(i=0; i<bsize; buf[i++]='\0');
     5fe:	1c 14       	cp	r1, r12
     600:	1d 04       	cpc	r1, r13
     602:	e4 f0       	brlt	.+56     	; 0x63c <getconnect+0xa0>
				}
			}
			else
			{
				// input buffer full
				inindex = 0;
     604:	e1 2c       	mov	r14, r1
     606:	f1 2c       	mov	r15, r1
	{
		while(USART_0_is_rx_ready())
		{
			if(inindex < bsize)
			{
				ch = USART_0_read();
     608:	25 c0       	rjmp	.+74     	; 0x654 <getconnect+0xb8>
				buf[inindex++] = ch;
     60a:	7c d3       	rcall	.+1784   	; 0xd04 <USART_0_read>
     60c:	f5 01       	movw	r30, r10
     60e:	ee 0d       	add	r30, r14
     610:	ff 1d       	adc	r31, r15
				if (discovermsg[mindex] == ch)
     612:	80 83       	st	Z, r24
     614:	e1 e0       	ldi	r30, 0x01	; 1
     616:	f0 e0       	ldi	r31, 0x00	; 0
     618:	ec 0f       	add	r30, r28
     61a:	fd 1f       	adc	r31, r29
     61c:	e8 0d       	add	r30, r8
     61e:	f9 1d       	adc	r31, r9
     620:	90 81       	ld	r25, Z
     622:	89 13       	cpse	r24, r25
				{
					mindex++;
     624:	13 c0       	rjmp	.+38     	; 0x64c <getconnect+0xb0>
     626:	8f ef       	ldi	r24, 0xFF	; 255
     628:	88 1a       	sub	r8, r24
					if (mindex == sizeof(discovermsg)-1)	// all matched
     62a:	98 0a       	sbc	r9, r24
     62c:	8a e0       	ldi	r24, 0x0A	; 10
     62e:	88 16       	cp	r8, r24
     630:	91 04       	cpc	r9, r1
		while(USART_0_is_rx_ready())
		{
			if(inindex < bsize)
			{
				ch = USART_0_read();
				buf[inindex++] = ch;
     632:	d9 f0       	breq	.+54     	; 0x66a <getconnect+0xce>
     634:	8f ef       	ldi	r24, 0xFF	; 255
     636:	e8 1a       	sub	r14, r24
     638:	f8 0a       	sbc	r15, r24
     63a:	0c c0       	rjmp	.+24     	; 0x654 <getconnect+0xb8>
			}
			else
			{
				// input buffer full
				inindex = 0;
				for(i=0; i<bsize; buf[i++]='\0');
     63c:	f5 01       	movw	r30, r10
     63e:	11 92       	st	Z+, r1
     640:	e0 17       	cp	r30, r16
     642:	f1 07       	cpc	r31, r17
				}
			}
			else
			{
				// input buffer full
				inindex = 0;
     644:	e1 f7       	brne	.-8      	; 0x63e <getconnect+0xa2>
     646:	e1 2c       	mov	r14, r1
     648:	f1 2c       	mov	r15, r1
						return(0);
					}
				}
				else
				{
					mindex = 0;		// reset the search
     64a:	04 c0       	rjmp	.+8      	; 0x654 <getconnect+0xb8>
     64c:	81 2c       	mov	r8, r1
					inindex = 0;
     64e:	91 2c       	mov	r9, r1
	const char discovermsg[]="connect\xff\xff\xff";		// expected discovery message

	for(i=0; i<bsize; buf[i++]='\0');
	for (wtim = 0; (wtim < 7000); wtim++)		// hang around waiting for some input
	{
		while(USART_0_is_rx_ready())
     650:	e1 2c       	mov	r14, r1
     652:	f1 2c       	mov	r15, r1
     654:	50 d3       	rcall	.+1696   	; 0xcf6 <USART_0_is_rx_ready>
				// input buffer full
				inindex = 0;
				for(i=0; i<bsize; buf[i++]='\0');
			}
		}
		delay_ms(1);
     656:	81 11       	cpse	r24, r1
     658:	cf cf       	rjmp	.-98     	; 0x5f8 <getconnect+0x5c>
     65a:	81 e0       	ldi	r24, 0x01	; 1
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	bd dd       	rcall	.-1158   	; 0x1da <delay_ms>
     660:	81 e0       	ldi	r24, 0x01	; 1
	int wtim, i;
	char ch;
	const char discovermsg[]="connect\xff\xff\xff";		// expected discovery message

	for(i=0; i<bsize; buf[i++]='\0');
	for (wtim = 0; (wtim < 7000); wtim++)		// hang around waiting for some input
     662:	68 1a       	sub	r6, r24
     664:	71 08       	sbc	r7, r1
				if (discovermsg[mindex] == ch)
				{
					mindex++;
					if (mindex == sizeof(discovermsg)-1)	// all matched
					{
						return(0);
     666:	21 f0       	breq	.+8      	; 0x670 <getconnect+0xd4>
     668:	f5 cf       	rjmp	.-22     	; 0x654 <getconnect+0xb8>
     66a:	80 e0       	ldi	r24, 0x00	; 0
				for(i=0; i<bsize; buf[i++]='\0');
			}
		}
		delay_ms(1);
	}
	return(-1);
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	11 c0       	rjmp	.+34     	; 0x692 <getconnect+0xf6>
     670:	8f ef       	ldi	r24, 0xFF	; 255
				}
			}
			else
			{
				// input buffer full
				inindex = 0;
     672:	9f ef       	ldi	r25, 0xFF	; 255
     674:	0e c0       	rjmp	.+28     	; 0x692 <getconnect+0xf6>
     676:	0f 2e       	mov	r0, r31
     678:	f8 e5       	ldi	r31, 0x58	; 88
     67a:	6f 2e       	mov	r6, r31
     67c:	fb e1       	ldi	r31, 0x1B	; 27
     67e:	7f 2e       	mov	r7, r31
     680:	f0 2d       	mov	r31, r0
     682:	81 2c       	mov	r8, r1
     684:	91 2c       	mov	r9, r1
     686:	e1 2c       	mov	r14, r1
     688:	f1 2c       	mov	r15, r1
     68a:	85 01       	movw	r16, r10
     68c:	0c 0d       	add	r16, r12
			}
		}
		delay_ms(1);
	}
	return(-1);
}
     68e:	1d 1d       	adc	r17, r13
     690:	e1 cf       	rjmp	.-62     	; 0x654 <getconnect+0xb8>
     692:	2b 96       	adiw	r28, 0x0b	; 11
     694:	0f b6       	in	r0, 0x3f	; 63
     696:	f8 94       	cli
     698:	de bf       	out	0x3e, r29	; 62
     69a:	0f be       	out	0x3f, r0	; 63
     69c:	cd bf       	out	0x3d, r28	; 61
     69e:	df 91       	pop	r29
     6a0:	cf 91       	pop	r28
     6a2:	1f 91       	pop	r17
     6a4:	0f 91       	pop	r16
     6a6:	ff 90       	pop	r15
     6a8:	ef 90       	pop	r14
     6aa:	df 90       	pop	r13
     6ac:	cf 90       	pop	r12
     6ae:	bf 90       	pop	r11
     6b0:	af 90       	pop	r10
     6b2:	9f 90       	pop	r9
     6b4:	8f 90       	pop	r8
     6b6:	7f 90       	pop	r7
     6b8:	6f 90       	pop	r6
     6ba:	08 95       	ret

000006bc <conntoed>:

// wait for connect from Nextion Editor and respond
int conntoed()
{
     6bc:	ef 92       	push	r14
     6be:	ff 92       	push	r15
     6c0:	0f 93       	push	r16
     6c2:	1f 93       	push	r17
     6c4:	cf 93       	push	r28
     6c6:	df 93       	push	r29
     6c8:	cd b7       	in	r28, 0x3d	; 61
     6ca:	de b7       	in	r29, 0x3e	; 62
     6cc:	c4 58       	subi	r28, 0x84	; 132
     6ce:	d1 09       	sbc	r29, r1
     6d0:	0f b6       	in	r0, 0x3f	; 63
     6d2:	f8 94       	cli
     6d4:	de bf       	out	0x3e, r29	; 62
     6d6:	0f be       	out	0x3f, r0	; 63
     6d8:	cd bf       	out	0x3d, r28	; 61
	int i;
	char inbuf[128];
	const char nulresp[]={0x1a,0xff,0xff,0xff};
     6da:	8a e1       	ldi	r24, 0x1A	; 26
     6dc:	cf 57       	subi	r28, 0x7F	; 127
     6de:	df 4f       	sbci	r29, 0xFF	; 255
     6e0:	88 83       	st	Y, r24
     6e2:	c1 58       	subi	r28, 0x81	; 129
     6e4:	d0 40       	sbci	r29, 0x00	; 0
     6e6:	8f ef       	ldi	r24, 0xFF	; 255
     6e8:	ce 57       	subi	r28, 0x7E	; 126
     6ea:	df 4f       	sbci	r29, 0xFF	; 255
     6ec:	88 83       	st	Y, r24
     6ee:	c2 58       	subi	r28, 0x82	; 130
     6f0:	d0 40       	sbci	r29, 0x00	; 0
     6f2:	cd 57       	subi	r28, 0x7D	; 125
     6f4:	df 4f       	sbci	r29, 0xFF	; 255
     6f6:	88 83       	st	Y, r24
     6f8:	c3 58       	subi	r28, 0x83	; 131
     6fa:	d0 40       	sbci	r29, 0x00	; 0
     6fc:	cc 57       	subi	r28, 0x7C	; 124
     6fe:	df 4f       	sbci	r29, 0xFF	; 255
     700:	88 83       	st	Y, r24
     702:	c4 58       	subi	r28, 0x84	; 132
     704:	d0 40       	sbci	r29, 0x00	; 0


	i = getconnect(inbuf,sizeof(inbuf));
     706:	60 e8       	ldi	r22, 0x80	; 128
     708:	70 e0       	ldi	r23, 0x00	; 0
     70a:	ce 01       	movw	r24, r28
     70c:	01 96       	adiw	r24, 0x01	; 1
     70e:	46 df       	rcall	.-372    	; 0x59c <getconnect>
	if (i < 0)
     710:	99 23       	and	r25, r25
     712:	ec f0       	brlt	.+58     	; 0x74e <conntoed+0x92>
     714:	8e 01       	movw	r16, r28
     716:	0f 57       	subi	r16, 0x7F	; 127
     718:	1f 4f       	sbci	r17, 0xFF	; 255
     71a:	78 01       	movw	r14, r16
     71c:	84 e0       	ldi	r24, 0x04	; 4
     71e:	e8 0e       	add	r14, r24
     720:	f1 1c       	adc	r15, r1
		return(-1);
	}
	// Pc has connected, now send LCD signature response
	for(i=0; i<4; i++)		// send error response - might not be needed
	{
		USART_0_write(nulresp[i]);
     722:	f8 01       	movw	r30, r16
     724:	81 91       	ld	r24, Z+
     726:	8f 01       	movw	r16, r30
     728:	06 d3       	rcall	.+1548   	; 0xd36 <USART_0_write>
	if (i < 0)
	{
		return(-1);
	}
	// Pc has connected, now send LCD signature response
	for(i=0; i<4; i++)		// send error response - might not be needed
     72a:	e0 16       	cp	r14, r16
     72c:	f1 06       	cpc	r15, r17
     72e:	c9 f7       	brne	.-14     	; 0x722 <conntoed+0x66>
	{
		USART_0_write(nulresp[i]);
	}
	i = 0;
	while(lcdsig[i])
     730:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <lcdsig>
     734:	88 23       	and	r24, r24
     736:	71 f0       	breq	.+28     	; 0x754 <conntoed+0x98>
     738:	0b e0       	ldi	r16, 0x0B	; 11
	{
		USART_0_write(lcdsig[i++]);		// send the saved LCD response to the Editor
     73a:	13 e0       	ldi	r17, 0x03	; 3
     73c:	fc d2       	rcall	.+1528   	; 0xd36 <USART_0_write>
	for(i=0; i<4; i++)		// send error response - might not be needed
	{
		USART_0_write(nulresp[i]);
	}
	i = 0;
	while(lcdsig[i])
     73e:	f8 01       	movw	r30, r16
     740:	81 91       	ld	r24, Z+
     742:	8f 01       	movw	r16, r30
     744:	81 11       	cpse	r24, r1
     746:	fa cf       	rjmp	.-12     	; 0x73c <conntoed+0x80>
	{
		USART_0_write(lcdsig[i++]);		// send the saved LCD response to the Editor
	}
	return(0);
     748:	80 e0       	ldi	r24, 0x00	; 0
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	05 c0       	rjmp	.+10     	; 0x758 <conntoed+0x9c>


	i = getconnect(inbuf,sizeof(inbuf));
	if (i < 0)
	{
		return(-1);
     74e:	8f ef       	ldi	r24, 0xFF	; 255
     750:	9f ef       	ldi	r25, 0xFF	; 255
     752:	02 c0       	rjmp	.+4      	; 0x758 <conntoed+0x9c>
	i = 0;
	while(lcdsig[i])
	{
		USART_0_write(lcdsig[i++]);		// send the saved LCD response to the Editor
	}
	return(0);
     754:	80 e0       	ldi	r24, 0x00	; 0
     756:	90 e0       	ldi	r25, 0x00	; 0
}
     758:	cc 57       	subi	r28, 0x7C	; 124
     75a:	df 4f       	sbci	r29, 0xFF	; 255
     75c:	0f b6       	in	r0, 0x3f	; 63
     75e:	f8 94       	cli
     760:	de bf       	out	0x3e, r29	; 62
     762:	0f be       	out	0x3f, r0	; 63
     764:	cd bf       	out	0x3d, r28	; 61
     766:	df 91       	pop	r29
     768:	cf 91       	pop	r28
     76a:	1f 91       	pop	r17
     76c:	0f 91       	pop	r16
     76e:	ff 90       	pop	r15
     770:	ef 90       	pop	r14
     772:	08 95       	ret

00000774 <getupcmd>:


// wait for and parse the baud rate from the 'upload' command
// return the new baud rate or -1 if not found
long getupcmd(void)
{
     774:	7f 92       	push	r7
     776:	8f 92       	push	r8
     778:	9f 92       	push	r9
     77a:	af 92       	push	r10
     77c:	bf 92       	push	r11
     77e:	cf 92       	push	r12
     780:	df 92       	push	r13
     782:	ef 92       	push	r14
     784:	ff 92       	push	r15
     786:	0f 93       	push	r16
     788:	1f 93       	push	r17
     78a:	cf 93       	push	r28
     78c:	df 93       	push	r29
     78e:	cd b7       	in	r28, 0x3d	; 61
     790:	de b7       	in	r29, 0x3e	; 62
     792:	2e 97       	sbiw	r28, 0x0e	; 14
     794:	0f b6       	in	r0, 0x3f	; 63
     796:	f8 94       	cli
     798:	de bf       	out	0x3e, r29	; 62
     79a:	0f be       	out	0x3f, r0	; 63
     79c:	cd bf       	out	0x3d, r28	; 61
	int mindex = 0;
	int wtim, termcnt = 0, commacnt = 0;
	volatile long newbaud = 0;
     79e:	19 82       	std	Y+1, r1	; 0x01
     7a0:	1a 82       	std	Y+2, r1	; 0x02
     7a2:	1b 82       	std	Y+3, r1	; 0x03
     7a4:	1c 82       	std	Y+4, r1	; 0x04
	char ch;
	bool validcmd = false;

	const char uploadmsg[]="whmi-wri ";		// expected upload command
     7a6:	8a e0       	ldi	r24, 0x0A	; 10
     7a8:	e7 e4       	ldi	r30, 0x47	; 71
     7aa:	f2 e0       	ldi	r31, 0x02	; 2
     7ac:	de 01       	movw	r26, r28
     7ae:	15 96       	adiw	r26, 0x05	; 5
     7b0:	01 90       	ld	r0, Z+
     7b2:	0d 92       	st	X+, r0
     7b4:	8a 95       	dec	r24
     7b6:	e1 f7       	brne	.-8      	; 0x7b0 <getupcmd+0x3c>
     7b8:	0f 2e       	mov	r0, r31
     7ba:	f8 e8       	ldi	r31, 0x88	; 136
     7bc:	8f 2e       	mov	r8, r31
     7be:	f3 e1       	ldi	r31, 0x13	; 19
     7c0:	9f 2e       	mov	r9, r31
     7c2:	f0 2d       	mov	r31, r0
{
	int mindex = 0;
	int wtim, termcnt = 0, commacnt = 0;
	volatile long newbaud = 0;
	char ch;
	bool validcmd = false;
     7c4:	00 e0       	ldi	r16, 0x00	; 0
// wait for and parse the baud rate from the 'upload' command
// return the new baud rate or -1 if not found
long getupcmd(void)
{
	int mindex = 0;
	int wtim, termcnt = 0, commacnt = 0;
     7c6:	c1 2c       	mov	r12, r1
     7c8:	d1 2c       	mov	r13, r1
     7ca:	a1 2c       	mov	r10, r1
     7cc:	b1 2c       	mov	r11, r1

// wait for and parse the baud rate from the 'upload' command
// return the new baud rate or -1 if not found
long getupcmd(void)
{
	int mindex = 0;
     7ce:	e1 2c       	mov	r14, r1
     7d0:	f1 2c       	mov	r15, r1
				{
					//						USART_3_write(ch);
					mindex++;
					if (mindex == sizeof(uploadmsg)-1)	// all matched
					{
						validcmd = true;
     7d2:	77 24       	eor	r7, r7
     7d4:	73 94       	inc	r7

	for (wtim = 0; (wtim < 5000); wtim++)		// hang around waiting for some input
	{
		while(USART_0_is_rx_ready())
		{
			ch = USART_0_read();
     7d6:	67 c0       	rjmp	.+206    	; 0x8a6 <getupcmd+0x132>
			USART_2_write(ch);	// copy to the LCD
     7d8:	95 d2       	rcall	.+1322   	; 0xd04 <USART_0_read>
     7da:	18 2f       	mov	r17, r24
			if (!(validcmd)) {
     7dc:	db d3       	rcall	.+1974   	; 0xf94 <USART_2_write>
     7de:	01 11       	cpse	r16, r1
				if (uploadmsg[mindex] == ch)			// compare this char with upload cmd string
     7e0:	1b c0       	rjmp	.+54     	; 0x818 <getupcmd+0xa4>
     7e2:	e5 e0       	ldi	r30, 0x05	; 5
     7e4:	f0 e0       	ldi	r31, 0x00	; 0
     7e6:	ec 0f       	add	r30, r28
     7e8:	fd 1f       	adc	r31, r29
     7ea:	ee 0d       	add	r30, r14
     7ec:	ff 1d       	adc	r31, r15
     7ee:	80 81       	ld	r24, Z
     7f0:	18 13       	cpse	r17, r24
				{
					//						USART_3_write(ch);
					mindex++;
     7f2:	57 c0       	rjmp	.+174    	; 0x8a2 <getupcmd+0x12e>
     7f4:	8f ef       	ldi	r24, 0xFF	; 255
     7f6:	e8 1a       	sub	r14, r24
					if (mindex == sizeof(uploadmsg)-1)	// all matched
     7f8:	f8 0a       	sbc	r15, r24
     7fa:	89 e0       	ldi	r24, 0x09	; 9
     7fc:	e8 16       	cp	r14, r24
     7fe:	f1 04       	cpc	r15, r1
     800:	09 f0       	breq	.+2      	; 0x804 <getupcmd+0x90>
					{
						validcmd = true;
						commacnt = 0;
						termcnt = 0;
						newbaud = 0;
     802:	51 c0       	rjmp	.+162    	; 0x8a6 <getupcmd+0x132>
     804:	19 82       	std	Y+1, r1	; 0x01
     806:	1a 82       	std	Y+2, r1	; 0x02
     808:	1b 82       	std	Y+3, r1	; 0x03
				{
					//						USART_3_write(ch);
					mindex++;
					if (mindex == sizeof(uploadmsg)-1)	// all matched
					{
						validcmd = true;
     80a:	1c 82       	std	Y+4, r1	; 0x04
						commacnt = 0;
     80c:	07 2d       	mov	r16, r7
     80e:	c1 2c       	mov	r12, r1
						termcnt = 0;
     810:	d1 2c       	mov	r13, r1
     812:	a1 2c       	mov	r10, r1
     814:	b1 2c       	mov	r11, r1
				}
			}
			else
			{
				// valid upload command seen - we need to get the params and find the end
				if (ch == 0xff)
     816:	47 c0       	rjmp	.+142    	; 0x8a6 <getupcmd+0x132>
     818:	1f 3f       	cpi	r17, 0xFF	; 255
				{
					termcnt++;
     81a:	61 f4       	brne	.+24     	; 0x834 <getupcmd+0xc0>
     81c:	8f ef       	ldi	r24, 0xFF	; 255
     81e:	a8 1a       	sub	r10, r24
					if (termcnt == 3)
     820:	b8 0a       	sbc	r11, r24
     822:	83 e0       	ldi	r24, 0x03	; 3
     824:	a8 16       	cp	r10, r24
     826:	b1 04       	cpc	r11, r1
					{
						return(newbaud);
     828:	51 f4       	brne	.+20     	; 0x83e <getupcmd+0xca>
     82a:	69 81       	ldd	r22, Y+1	; 0x01
     82c:	7a 81       	ldd	r23, Y+2	; 0x02
     82e:	8b 81       	ldd	r24, Y+3	; 0x03
     830:	9c 81       	ldd	r25, Y+4	; 0x04
					}
				}
				if (ch == ',')		// comma between parameters
     832:	5a c0       	rjmp	.+180    	; 0x8e8 <getupcmd+0x174>
     834:	1c 32       	cpi	r17, 0x2C	; 44
				{
					commacnt++;
     836:	19 f4       	brne	.+6      	; 0x83e <getupcmd+0xca>
     838:	8f ef       	ldi	r24, 0xFF	; 255
     83a:	c8 1a       	sub	r12, r24
				}
				if (commacnt == 1)
     83c:	d8 0a       	sbc	r13, r24
     83e:	81 e0       	ldi	r24, 0x01	; 1
     840:	c8 16       	cp	r12, r24
     842:	d1 04       	cpc	r13, r1
				{
					if ((ch >= '0') && (ch <= '9'))
     844:	81 f5       	brne	.+96     	; 0x8a6 <getupcmd+0x132>
     846:	80 ed       	ldi	r24, 0xD0	; 208
     848:	81 0f       	add	r24, r17
     84a:	8a 30       	cpi	r24, 0x0A	; 10
					{
						newbaud *= 10;
     84c:	60 f5       	brcc	.+88     	; 0x8a6 <getupcmd+0x132>
     84e:	89 81       	ldd	r24, Y+1	; 0x01
     850:	9a 81       	ldd	r25, Y+2	; 0x02
     852:	ab 81       	ldd	r26, Y+3	; 0x03
     854:	bc 81       	ldd	r27, Y+4	; 0x04
     856:	88 0f       	add	r24, r24
     858:	99 1f       	adc	r25, r25
     85a:	aa 1f       	adc	r26, r26
     85c:	bb 1f       	adc	r27, r27
     85e:	ac 01       	movw	r20, r24
     860:	bd 01       	movw	r22, r26
     862:	44 0f       	add	r20, r20
     864:	55 1f       	adc	r21, r21
     866:	66 1f       	adc	r22, r22
     868:	77 1f       	adc	r23, r23
     86a:	44 0f       	add	r20, r20
     86c:	55 1f       	adc	r21, r21
     86e:	66 1f       	adc	r22, r22
     870:	77 1f       	adc	r23, r23
     872:	84 0f       	add	r24, r20
     874:	95 1f       	adc	r25, r21
     876:	a6 1f       	adc	r26, r22
     878:	b7 1f       	adc	r27, r23
     87a:	89 83       	std	Y+1, r24	; 0x01
     87c:	9a 83       	std	Y+2, r25	; 0x02
     87e:	ab 83       	std	Y+3, r26	; 0x03
						newbaud = newbaud + ch - '0';
     880:	bc 83       	std	Y+4, r27	; 0x04
     882:	89 81       	ldd	r24, Y+1	; 0x01
     884:	9a 81       	ldd	r25, Y+2	; 0x02
     886:	ab 81       	ldd	r26, Y+3	; 0x03
     888:	bc 81       	ldd	r27, Y+4	; 0x04
     88a:	81 0f       	add	r24, r17
     88c:	91 1d       	adc	r25, r1
     88e:	a1 1d       	adc	r26, r1
     890:	b1 1d       	adc	r27, r1
     892:	c0 97       	sbiw	r24, 0x30	; 48
     894:	a1 09       	sbc	r26, r1
     896:	b1 09       	sbc	r27, r1
     898:	89 83       	std	Y+1, r24	; 0x01
     89a:	9a 83       	std	Y+2, r25	; 0x02
     89c:	ab 83       	std	Y+3, r26	; 0x03
					}
				}
				else
				{
					//						inindex = 0;	// no need to keep that input
					mindex = 0;		// reset the search
     89e:	bc 83       	std	Y+4, r27	; 0x04

	const char uploadmsg[]="whmi-wri ";		// expected upload command

	for (wtim = 0; (wtim < 5000); wtim++)		// hang around waiting for some input
	{
		while(USART_0_is_rx_ready())
     8a0:	02 c0       	rjmp	.+4      	; 0x8a6 <getupcmd+0x132>
     8a2:	e1 2c       	mov	r14, r1

			}
		}
		while(USART_2_is_rx_ready())
		{
			ch = USART_2_read();
     8a4:	f1 2c       	mov	r15, r1
     8a6:	27 d2       	rcall	.+1102   	; 0xcf6 <USART_0_is_rx_ready>
			USART_0_write(ch);	// copy to the PC
     8a8:	81 11       	cpse	r24, r1
					}
				}

			}
		}
		while(USART_2_is_rx_ready())
     8aa:	96 cf       	rjmp	.-212    	; 0x7d8 <getupcmd+0x64>
     8ac:	02 c0       	rjmp	.+4      	; 0x8b2 <getupcmd+0x13e>
     8ae:	59 d3       	rcall	.+1714   	; 0xf62 <USART_2_read>
		{
			ch = USART_2_read();
			USART_0_write(ch);	// copy to the PC
		}
		delay_ms(1);
     8b0:	42 d2       	rcall	.+1156   	; 0xd36 <USART_0_write>
     8b2:	50 d3       	rcall	.+1696   	; 0xf54 <USART_2_is_rx_ready>
     8b4:	81 11       	cpse	r24, r1
     8b6:	fb cf       	rjmp	.-10     	; 0x8ae <getupcmd+0x13a>
     8b8:	81 e0       	ldi	r24, 0x01	; 1
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	8e dc       	rcall	.-1764   	; 0x1da <delay_ms>
	char ch;
	bool validcmd = false;

	const char uploadmsg[]="whmi-wri ";		// expected upload command

	for (wtim = 0; (wtim < 5000); wtim++)		// hang around waiting for some input
     8be:	81 e0       	ldi	r24, 0x01	; 1
			ch = USART_2_read();
			USART_0_write(ch);	// copy to the PC
		}
		delay_ms(1);
	}
	return((newbaud > 0) ? newbaud : -1L);
     8c0:	88 1a       	sub	r8, r24
     8c2:	91 08       	sbc	r9, r1
     8c4:	81 f7       	brne	.-32     	; 0x8a6 <getupcmd+0x132>
     8c6:	89 81       	ldd	r24, Y+1	; 0x01
     8c8:	9a 81       	ldd	r25, Y+2	; 0x02
     8ca:	ab 81       	ldd	r26, Y+3	; 0x03
     8cc:	bc 81       	ldd	r27, Y+4	; 0x04
     8ce:	18 16       	cp	r1, r24
     8d0:	19 06       	cpc	r1, r25
     8d2:	1a 06       	cpc	r1, r26
     8d4:	1b 06       	cpc	r1, r27
     8d6:	2c f4       	brge	.+10     	; 0x8e2 <getupcmd+0x16e>
     8d8:	69 81       	ldd	r22, Y+1	; 0x01
     8da:	7a 81       	ldd	r23, Y+2	; 0x02
     8dc:	8b 81       	ldd	r24, Y+3	; 0x03
     8de:	9c 81       	ldd	r25, Y+4	; 0x04
     8e0:	03 c0       	rjmp	.+6      	; 0x8e8 <getupcmd+0x174>
}
     8e2:	6f ef       	ldi	r22, 0xFF	; 255
     8e4:	7f ef       	ldi	r23, 0xFF	; 255
     8e6:	cb 01       	movw	r24, r22
     8e8:	2e 96       	adiw	r28, 0x0e	; 14
     8ea:	0f b6       	in	r0, 0x3f	; 63
     8ec:	f8 94       	cli
     8ee:	de bf       	out	0x3e, r29	; 62
     8f0:	0f be       	out	0x3f, r0	; 63
     8f2:	cd bf       	out	0x3d, r28	; 61
     8f4:	df 91       	pop	r29
     8f6:	cf 91       	pop	r28
     8f8:	1f 91       	pop	r17
     8fa:	0f 91       	pop	r16
     8fc:	ff 90       	pop	r15
     8fe:	ef 90       	pop	r14
     900:	df 90       	pop	r13
     902:	cf 90       	pop	r12
     904:	bf 90       	pop	r11
     906:	af 90       	pop	r10
     908:	9f 90       	pop	r9
     90a:	8f 90       	pop	r8
     90c:	7f 90       	pop	r7
     90e:	08 95       	ret

00000910 <doupload>:
     910:	31 df       	rcall	.-414    	; 0x774 <getupcmd>
     912:	6b 01       	movw	r12, r22
     914:	7c 01       	movw	r14, r24
     916:	ff 92       	push	r15
     918:	ef 92       	push	r14
     91a:	df 92       	push	r13
     91c:	6f 93       	push	r22
     91e:	81 e5       	ldi	r24, 0x51	; 81
     920:	92 e0       	ldi	r25, 0x02	; 2
     922:	9f 93       	push	r25
     924:	8f 93       	push	r24
     926:	3f d4       	rcall	.+2174   	; 0x11a6 <printf>
     928:	0f 90       	pop	r0
     92a:	0f 90       	pop	r0
     92c:	0f 90       	pop	r0
     92e:	0f 90       	pop	r0
     930:	0f 90       	pop	r0
     932:	0f 90       	pop	r0
     934:	80 e6       	ldi	r24, 0x60	; 96
     936:	c8 16       	cp	r12, r24
     938:	89 e0       	ldi	r24, 0x09	; 9
     93a:	d8 06       	cpc	r13, r24
     93c:	e1 04       	cpc	r14, r1
     93e:	f1 04       	cpc	r15, r1
     940:	c9 f1       	breq	.+114    	; 0x9b4 <doupload+0xa4>
     942:	c1 14       	cp	r12, r1
     944:	82 ec       	ldi	r24, 0xC2	; 194
     946:	d8 06       	cpc	r13, r24
     948:	81 e0       	ldi	r24, 0x01	; 1
     94a:	e8 06       	cpc	r14, r24
     94c:	f1 04       	cpc	r15, r1
     94e:	19 f1       	breq	.+70     	; 0x996 <doupload+0x86>
     950:	80 ec       	ldi	r24, 0xC0	; 192
     952:	c8 16       	cp	r12, r24
     954:	82 e1       	ldi	r24, 0x12	; 18
     956:	d8 06       	cpc	r13, r24
     958:	e1 04       	cpc	r14, r1
     95a:	f1 04       	cpc	r15, r1
     95c:	f9 f0       	breq	.+62     	; 0x99c <doupload+0x8c>
     95e:	c1 14       	cp	r12, r1
     960:	81 ee       	ldi	r24, 0xE1	; 225
     962:	d8 06       	cpc	r13, r24
     964:	e1 04       	cpc	r14, r1
     966:	f1 04       	cpc	r15, r1
     968:	e1 f0       	breq	.+56     	; 0x9a2 <doupload+0x92>
     96a:	80 e8       	ldi	r24, 0x80	; 128
     96c:	c8 16       	cp	r12, r24
     96e:	85 e2       	ldi	r24, 0x25	; 37
     970:	d8 06       	cpc	r13, r24
     972:	e1 04       	cpc	r14, r1
     974:	f1 04       	cpc	r15, r1
     976:	c1 f0       	breq	.+48     	; 0x9a8 <doupload+0x98>
     978:	c1 14       	cp	r12, r1
     97a:	86 e9       	ldi	r24, 0x96	; 150
     97c:	d8 06       	cpc	r13, r24
     97e:	e1 04       	cpc	r14, r1
     980:	f1 04       	cpc	r15, r1
     982:	a9 f0       	breq	.+42     	; 0x9ae <doupload+0x9e>
     984:	c1 14       	cp	r12, r1
     986:	8b e4       	ldi	r24, 0x4B	; 75
     988:	d8 06       	cpc	r13, r24
     98a:	e1 04       	cpc	r14, r1
     98c:	f1 04       	cpc	r15, r1
     98e:	a9 f4       	brne	.+42     	; 0x9ba <doupload+0xaa>
     990:	c6 e0       	ldi	r28, 0x06	; 6
     992:	d0 e0       	ldi	r29, 0x00	; 0
     994:	14 c0       	rjmp	.+40     	; 0x9be <doupload+0xae>
     996:	c1 e0       	ldi	r28, 0x01	; 1
     998:	d0 e0       	ldi	r29, 0x00	; 0
     99a:	11 c0       	rjmp	.+34     	; 0x9be <doupload+0xae>
     99c:	c2 e0       	ldi	r28, 0x02	; 2
     99e:	d0 e0       	ldi	r29, 0x00	; 0
     9a0:	0e c0       	rjmp	.+28     	; 0x9be <doupload+0xae>
     9a2:	c3 e0       	ldi	r28, 0x03	; 3
     9a4:	d0 e0       	ldi	r29, 0x00	; 0
     9a6:	0b c0       	rjmp	.+22     	; 0x9be <doupload+0xae>
     9a8:	c4 e0       	ldi	r28, 0x04	; 4
     9aa:	d0 e0       	ldi	r29, 0x00	; 0
     9ac:	08 c0       	rjmp	.+16     	; 0x9be <doupload+0xae>
     9ae:	c5 e0       	ldi	r28, 0x05	; 5
     9b0:	d0 e0       	ldi	r29, 0x00	; 0
     9b2:	05 c0       	rjmp	.+10     	; 0x9be <doupload+0xae>
     9b4:	c0 e0       	ldi	r28, 0x00	; 0
     9b6:	d0 e0       	ldi	r29, 0x00	; 0
     9b8:	02 c0       	rjmp	.+4      	; 0x9be <doupload+0xae>
     9ba:	c7 e0       	ldi	r28, 0x07	; 7
     9bc:	d0 e0       	ldi	r29, 0x00	; 0
     9be:	ce 01       	movw	r24, r28
     9c0:	9d dc       	rcall	.-1734   	; 0x2fc <set0baud>
     9c2:	ce 01       	movw	r24, r28
     9c4:	be dc       	rcall	.-1668   	; 0x342 <set2baud>
     9c6:	97 d1       	rcall	.+814    	; 0xcf6 <USART_0_is_rx_ready>
     9c8:	88 23       	and	r24, r24
     9ca:	11 f0       	breq	.+4      	; 0x9d0 <doupload+0xc0>
     9cc:	9b d1       	rcall	.+822    	; 0xd04 <USART_0_read>
     9ce:	e2 d2       	rcall	.+1476   	; 0xf94 <USART_2_write>
     9d0:	92 d1       	rcall	.+804    	; 0xcf6 <USART_0_is_rx_ready>
     9d2:	88 23       	and	r24, r24
     9d4:	29 f0       	breq	.+10     	; 0x9e0 <doupload+0xd0>
     9d6:	96 d1       	rcall	.+812    	; 0xd04 <USART_0_read>
     9d8:	dd d2       	rcall	.+1466   	; 0xf94 <USART_2_write>
     9da:	02 c0       	rjmp	.+4      	; 0x9e0 <doupload+0xd0>
     9dc:	c2 d2       	rcall	.+1412   	; 0xf62 <USART_2_read>
     9de:	ab d1       	rcall	.+854    	; 0xd36 <USART_0_write>
     9e0:	b9 d2       	rcall	.+1394   	; 0xf54 <USART_2_is_rx_ready>
     9e2:	81 11       	cpse	r24, r1
     9e4:	fb cf       	rjmp	.-10     	; 0x9dc <doupload+0xcc>
     9e6:	ef cf       	rjmp	.-34     	; 0x9c6 <doupload+0xb6>

000009e8 <main>:
     9e8:	cf 93       	push	r28
     9ea:	df 93       	push	r29
     9ec:	cd b7       	in	r28, 0x3d	; 61
     9ee:	de b7       	in	r29, 0x3e	; 62
     9f0:	2a 97       	sbiw	r28, 0x0a	; 10
     9f2:	0f b6       	in	r0, 0x3f	; 63
     9f4:	f8 94       	cli
     9f6:	de bf       	out	0x3e, r29	; 62
     9f8:	0f be       	out	0x3f, r0	; 63
     9fa:	cd bf       	out	0x3d, r28	; 61
     9fc:	88 e0       	ldi	r24, 0x08	; 8
     9fe:	ec ed       	ldi	r30, 0xDC	; 220
     a00:	f2 e0       	ldi	r31, 0x02	; 2
     a02:	de 01       	movw	r26, r28
     a04:	13 96       	adiw	r26, 0x03	; 3
     a06:	01 90       	ld	r0, Z+
     a08:	0d 92       	st	X+, r0
     a0a:	8a 95       	dec	r24
     a0c:	e1 f7       	brne	.-8      	; 0xa06 <main+0x1e>
     a0e:	8b db       	rcall	.-2282   	; 0x126 <atmel_start_init>
     a10:	78 94       	sei
     a12:	1a 82       	std	Y+2, r1	; 0x02
     a14:	19 82       	std	Y+1, r1	; 0x01
     a16:	89 81       	ldd	r24, Y+1	; 0x01
     a18:	9a 81       	ldd	r25, Y+2	; 0x02
     a1a:	07 97       	sbiw	r24, 0x07	; 7
     a1c:	98 f4       	brcc	.+38     	; 0xa44 <main+0x5c>
     a1e:	e9 81       	ldd	r30, Y+1	; 0x01
     a20:	fa 81       	ldd	r31, Y+2	; 0x02
     a22:	83 e0       	ldi	r24, 0x03	; 3
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	8c 0f       	add	r24, r28
     a28:	9d 1f       	adc	r25, r29
     a2a:	e8 0f       	add	r30, r24
     a2c:	f9 1f       	adc	r31, r25
     a2e:	80 81       	ld	r24, Z
     a30:	48 d3       	rcall	.+1680   	; 0x10c2 <USART_3_write>
     a32:	89 81       	ldd	r24, Y+1	; 0x01
     a34:	9a 81       	ldd	r25, Y+2	; 0x02
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	9a 83       	std	Y+2, r25	; 0x02
     a3a:	89 83       	std	Y+1, r24	; 0x01
     a3c:	89 81       	ldd	r24, Y+1	; 0x01
     a3e:	9a 81       	ldd	r25, Y+2	; 0x02
     a40:	07 97       	sbiw	r24, 0x07	; 7
     a42:	68 f3       	brcs	.-38     	; 0xa1e <main+0x36>
     a44:	8f ef       	ldi	r24, 0xFF	; 255
     a46:	9f ef       	ldi	r25, 0xFF	; 255
     a48:	9a 83       	std	Y+2, r25	; 0x02
     a4a:	89 83       	std	Y+1, r24	; 0x01
     a4c:	89 81       	ldd	r24, Y+1	; 0x01
     a4e:	9a 81       	ldd	r25, Y+2	; 0x02
     a50:	18 16       	cp	r1, r24
     a52:	19 06       	cpc	r1, r25
     a54:	7c f0       	brlt	.+30     	; 0xa74 <main+0x8c>
     a56:	06 e6       	ldi	r16, 0x66	; 102
     a58:	12 e0       	ldi	r17, 0x02	; 2
     a5a:	1f 93       	push	r17
     a5c:	0f 93       	push	r16
     a5e:	a3 d3       	rcall	.+1862   	; 0x11a6 <printf>
     a60:	93 dc       	rcall	.-1754   	; 0x388 <findlcd>
     a62:	9a 83       	std	Y+2, r25	; 0x02
     a64:	89 83       	std	Y+1, r24	; 0x01
     a66:	89 81       	ldd	r24, Y+1	; 0x01
     a68:	9a 81       	ldd	r25, Y+2	; 0x02
     a6a:	0f 90       	pop	r0
     a6c:	0f 90       	pop	r0
     a6e:	18 16       	cp	r1, r24
     a70:	19 06       	cpc	r1, r25
     a72:	9c f7       	brge	.-26     	; 0xa5a <main+0x72>
     a74:	84 e7       	ldi	r24, 0x74	; 116
     a76:	92 e0       	ldi	r25, 0x02	; 2
     a78:	9f 93       	push	r25
     a7a:	8f 93       	push	r24
     a7c:	94 d3       	rcall	.+1832   	; 0x11a6 <printf>
     a7e:	8f ef       	ldi	r24, 0xFF	; 255
     a80:	9f ef       	ldi	r25, 0xFF	; 255
     a82:	9a 83       	std	Y+2, r25	; 0x02
     a84:	89 83       	std	Y+1, r24	; 0x01
     a86:	0f 90       	pop	r0
     a88:	0f 90       	pop	r0
     a8a:	00 e8       	ldi	r16, 0x80	; 128
     a8c:	12 e0       	ldi	r17, 0x02	; 2
     a8e:	0f 2e       	mov	r0, r31
     a90:	f8 ea       	ldi	r31, 0xA8	; 168
     a92:	ef 2e       	mov	r14, r31
     a94:	f2 e0       	ldi	r31, 0x02	; 2
     a96:	ff 2e       	mov	r15, r31
     a98:	f0 2d       	mov	r31, r0
     a9a:	11 c0       	rjmp	.+34     	; 0xabe <main+0xd6>
     a9c:	1f 93       	push	r17
     a9e:	0f 93       	push	r16
     aa0:	82 d3       	rcall	.+1796   	; 0x11a6 <printf>
     aa2:	0c de       	rcall	.-1000   	; 0x6bc <conntoed>
     aa4:	9a 83       	std	Y+2, r25	; 0x02
     aa6:	89 83       	std	Y+1, r24	; 0x01
     aa8:	89 81       	ldd	r24, Y+1	; 0x01
     aaa:	9a 81       	ldd	r25, Y+2	; 0x02
     aac:	0f 90       	pop	r0
     aae:	0f 90       	pop	r0
     ab0:	99 23       	and	r25, r25
     ab2:	2c f0       	brlt	.+10     	; 0xabe <main+0xd6>
     ab4:	ff 92       	push	r15
     ab6:	ef 92       	push	r14
     ab8:	76 d3       	rcall	.+1772   	; 0x11a6 <printf>
     aba:	0f 90       	pop	r0
     abc:	0f 90       	pop	r0
     abe:	89 81       	ldd	r24, Y+1	; 0x01
     ac0:	9a 81       	ldd	r25, Y+2	; 0x02
     ac2:	99 23       	and	r25, r25
     ac4:	5c f3       	brlt	.-42     	; 0xa9c <main+0xb4>
     ac6:	83 ec       	ldi	r24, 0xC3	; 195
     ac8:	92 e0       	ldi	r25, 0x02	; 2
     aca:	9f 93       	push	r25
     acc:	8f 93       	push	r24
     ace:	6b d3       	rcall	.+1750   	; 0x11a6 <printf>
     ad0:	1f df       	rcall	.-450    	; 0x910 <doupload>

00000ad2 <USART_0_initialization>:
 */
static inline void PORTE_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRE &= ~(1 << pin);
     ad2:	68 98       	cbi	0x0d, 0	; 13
		DDRE &= ~(1 << pin);

		PORTE |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {

		PORTE &= ~(1 << pin);
     ad4:	70 98       	cbi	0x0e, 0	; 14
	switch (direction) {
	case PORT_DIR_IN:
		DDRE &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRE |= 1 << pin;
     ad6:	69 9a       	sbi	0x0d, 1	; 13
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	USART_0_init();
     ad8:	71 98       	cbi	0x0e, 1	; 14
     ada:	4c c1       	rjmp	.+664    	; 0xd74 <USART_0_init>
     adc:	08 95       	ret

00000ade <USART_1_initialization>:
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
     ade:	52 98       	cbi	0x0a, 2	; 10
		DDRD &= ~(1 << pin);

		PORTD |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {

		PORTD &= ~(1 << pin);
     ae0:	5a 98       	cbi	0x0b, 2	; 11
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRD |= 1 << pin;
     ae2:	53 9a       	sbi	0x0a, 3	; 10
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	USART_1_init();
     ae4:	5b 98       	cbi	0x0b, 3	; 11
     ae6:	be c1       	rjmp	.+892    	; 0xe64 <USART_1_init>
     ae8:	08 95       	ret

00000aea <USART_2_initialization>:
 */
static inline void PORTH_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRH &= ~(1 << pin);
     aea:	a1 e0       	ldi	r26, 0x01	; 1
     aec:	b1 e0       	ldi	r27, 0x01	; 1
     aee:	8c 91       	ld	r24, X
     af0:	8e 7f       	andi	r24, 0xFE	; 254
     af2:	8c 93       	st	X, r24
		DDRH &= ~(1 << pin);

		PORTH |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {

		PORTH &= ~(1 << pin);
     af4:	e2 e0       	ldi	r30, 0x02	; 2
     af6:	f1 e0       	ldi	r31, 0x01	; 1
     af8:	80 81       	ld	r24, Z
     afa:	8e 7f       	andi	r24, 0xFE	; 254
     afc:	80 83       	st	Z, r24
	switch (direction) {
	case PORT_DIR_IN:
		DDRH &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRH |= 1 << pin;
     afe:	8c 91       	ld	r24, X
     b00:	82 60       	ori	r24, 0x02	; 2
     b02:	8c 93       	st	X, r24
static inline void PORTH_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTH |= 1 << pin;
	} else {
		PORTH &= ~(1 << pin);
     b04:	80 81       	ld	r24, Z
     b06:	8d 7f       	andi	r24, 0xFD	; 253
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	USART_2_init();
     b08:	80 83       	st	Z, r24
     b0a:	63 c2       	rjmp	.+1222   	; 0xfd2 <USART_2_init>
     b0c:	08 95       	ret

00000b0e <USART_3_initialization>:
 */
static inline void PORTJ_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRJ &= ~(1 << pin);
     b0e:	a4 e0       	ldi	r26, 0x04	; 4
     b10:	b1 e0       	ldi	r27, 0x01	; 1
     b12:	8c 91       	ld	r24, X
     b14:	8e 7f       	andi	r24, 0xFE	; 254
     b16:	8c 93       	st	X, r24
		DDRJ &= ~(1 << pin);

		PORTJ |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {

		PORTJ &= ~(1 << pin);
     b18:	e5 e0       	ldi	r30, 0x05	; 5
     b1a:	f1 e0       	ldi	r31, 0x01	; 1
     b1c:	80 81       	ld	r24, Z
     b1e:	8e 7f       	andi	r24, 0xFE	; 254
     b20:	80 83       	st	Z, r24
	switch (direction) {
	case PORT_DIR_IN:
		DDRJ &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRJ |= 1 << pin;
     b22:	8c 91       	ld	r24, X
     b24:	82 60       	ori	r24, 0x02	; 2
     b26:	8c 93       	st	X, r24
static inline void PORTJ_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTJ |= 1 << pin;
	} else {
		PORTJ &= ~(1 << pin);
     b28:	80 81       	ld	r24, Z
     b2a:	8d 7f       	andi	r24, 0xFD	; 253
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	USART_3_init();
     b2c:	80 83       	st	Z, r24
     b2e:	ec c2       	rjmp	.+1496   	; 0x1108 <USART_3_init>
     b30:	08 95       	ret

00000b32 <system_init>:
     b32:	8f e3       	ldi	r24, 0x3F	; 63
     b34:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x700065>
     b38:	8f ee       	ldi	r24, 0xEF	; 239
     b3a:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x700064>
     b3e:	81 b1       	in	r24, 0x01	; 1
     b40:	11 b8       	out	0x01, r1	; 1
     b42:	82 b1       	in	r24, 0x02	; 2
     b44:	8f ef       	ldi	r24, 0xFF	; 255
     b46:	82 b9       	out	0x02, r24	; 2
     b48:	94 b1       	in	r25, 0x04	; 4
     b4a:	14 b8       	out	0x04, r1	; 4
     b4c:	95 b1       	in	r25, 0x05	; 5
     b4e:	85 b9       	out	0x05, r24	; 5
     b50:	97 b1       	in	r25, 0x07	; 7
     b52:	17 b8       	out	0x07, r1	; 7
     b54:	98 b1       	in	r25, 0x08	; 8
     b56:	88 b9       	out	0x08, r24	; 8
     b58:	9a b1       	in	r25, 0x0a	; 10
     b5a:	1a b8       	out	0x0a, r1	; 10
     b5c:	9b b1       	in	r25, 0x0b	; 11
     b5e:	8b b9       	out	0x0b, r24	; 11
     b60:	9d b1       	in	r25, 0x0d	; 13
     b62:	1d b8       	out	0x0d, r1	; 13
     b64:	9e b1       	in	r25, 0x0e	; 14
     b66:	8e b9       	out	0x0e, r24	; 14
     b68:	90 b3       	in	r25, 0x10	; 16
     b6a:	10 ba       	out	0x10, r1	; 16
     b6c:	91 b3       	in	r25, 0x11	; 17
     b6e:	81 bb       	out	0x11, r24	; 17
     b70:	93 b3       	in	r25, 0x13	; 19
     b72:	90 7c       	andi	r25, 0xC0	; 192
     b74:	93 bb       	out	0x13, r25	; 19
     b76:	94 b3       	in	r25, 0x14	; 20
     b78:	9f 63       	ori	r25, 0x3F	; 63
     b7a:	94 bb       	out	0x14, r25	; 20
     b7c:	e1 e0       	ldi	r30, 0x01	; 1
     b7e:	f1 e0       	ldi	r31, 0x01	; 1
     b80:	90 81       	ld	r25, Z
     b82:	10 82       	st	Z, r1
     b84:	e2 e0       	ldi	r30, 0x02	; 2
     b86:	f1 e0       	ldi	r31, 0x01	; 1
     b88:	90 81       	ld	r25, Z
     b8a:	80 83       	st	Z, r24
     b8c:	e4 e0       	ldi	r30, 0x04	; 4
     b8e:	f1 e0       	ldi	r31, 0x01	; 1
     b90:	90 81       	ld	r25, Z
     b92:	10 82       	st	Z, r1
     b94:	e5 e0       	ldi	r30, 0x05	; 5
     b96:	f1 e0       	ldi	r31, 0x01	; 1
     b98:	90 81       	ld	r25, Z
     b9a:	80 83       	st	Z, r24
     b9c:	e7 e0       	ldi	r30, 0x07	; 7
     b9e:	f1 e0       	ldi	r31, 0x01	; 1
     ba0:	90 81       	ld	r25, Z
     ba2:	10 82       	st	Z, r1
     ba4:	e8 e0       	ldi	r30, 0x08	; 8
     ba6:	f1 e0       	ldi	r31, 0x01	; 1
     ba8:	90 81       	ld	r25, Z
     baa:	80 83       	st	Z, r24
     bac:	ea e0       	ldi	r30, 0x0A	; 10
     bae:	f1 e0       	ldi	r31, 0x01	; 1
     bb0:	90 81       	ld	r25, Z
     bb2:	10 82       	st	Z, r1
     bb4:	eb e0       	ldi	r30, 0x0B	; 11
     bb6:	f1 e0       	ldi	r31, 0x01	; 1
     bb8:	90 81       	ld	r25, Z
     bba:	80 83       	st	Z, r24
     bbc:	27 9a       	sbi	0x04, 7	; 4
     bbe:	2f 98       	cbi	0x05, 7	; 5
     bc0:	40 e0       	ldi	r20, 0x00	; 0
     bc2:	60 e8       	ldi	r22, 0x80	; 128
     bc4:	81 e6       	ldi	r24, 0x61	; 97
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	09 d0       	rcall	.+18     	; 0xbdc <protected_write_io>
     bca:	13 be       	out	0x33, r1	; 51
     bcc:	15 be       	out	0x35, r1	; 53
     bce:	0e d0       	rcall	.+28     	; 0xbec <TIMER_0_init>
     bd0:	24 d0       	rcall	.+72     	; 0xc1a <TIMER_1_init>
     bd2:	7f df       	rcall	.-258    	; 0xad2 <USART_0_initialization>
     bd4:	84 df       	rcall	.-248    	; 0xade <USART_1_initialization>
     bd6:	89 df       	rcall	.-238    	; 0xaea <USART_2_initialization>
     bd8:	9a cf       	rjmp	.-204    	; 0xb0e <USART_3_initialization>
     bda:	08 95       	ret

00000bdc <protected_write_io>:
#if defined(__GNUC__)
	/*
	 * We need to disable interrupts globally before the protected
	 * sequence. In order to do that we must save SREG first.
	 */
	in      r18,    _SFR_IO_ADDR(SREG)
     bdc:	2f b7       	in	r18, 0x3f	; 63
	cli
     bde:	f8 94       	cli
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
     be0:	1b be       	out	0x3b, r1	; 59
#endif
	movw    r30, r24                // Load addr into Z
     be2:	fc 01       	movw	r30, r24
	st      Z, r22                  // Write protection bit to I/O register
     be4:	60 83       	st	Z, r22
	st      Z, r20                  // Write value to I/O register
     be6:	40 83       	st	Z, r20
	out     _SFR_IO_ADDR(SREG), r18
     be8:	2f bf       	out	0x3f, r18	; 63

	ret                             // Return to caller
     bea:	08 95       	ret

00000bec <TIMER_0_init>:
 */
int8_t TIMER_0_init()
{

	/* Enable TC1 */
	PRR0 &= ~(1 << PRTIM1);
     bec:	e4 e6       	ldi	r30, 0x64	; 100
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	80 81       	ld	r24, Z
     bf2:	87 7f       	andi	r24, 0xF7	; 247
     bf4:	80 83       	st	Z, r24

	// TCCR1A = (0 << COM1A1) | (0 << COM1A0) /* Normal port operation, OCA disconnected */
	//		 | (0 << COM1B1) | (0 << COM1B0) /* Normal port operation, OCB disconnected */
	//		 | (0 << WGM11) | (0 << WGM10); /* TC16 Mode 0 Normal */

	TCCR1B = (0 << WGM13) | (0 << WGM12)                /* TC16 Mode 0 Normal */
     bf6:	81 e0       	ldi	r24, 0x01	; 1
     bf8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
	         | 0 << ICES1                               /* Input Capture Edge Select: disabled */
	         | (0 << CS12) | (0 << CS11) | (1 << CS10); /* No prescaling */

	// ICR1 = 0; /* Input capture value, used as top counter value in some modes: 0 */

	OCR1A = 16000; /* Output compare A: 16000 */
     bfc:	80 e8       	ldi	r24, 0x80	; 128
     bfe:	9e e3       	ldi	r25, 0x3E	; 62
     c00:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
     c04:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>

	OCR1B = 16000; /* Output compare B: 16000 */
     c08:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
     c0c:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>

	TIMSK1 = 0 << OCIE1B   /* Output Compare B Match Interrupt Enable: disabled */
     c10:	82 e0       	ldi	r24, 0x02	; 2
     c12:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x70006f>
	         | 1 << OCIE1A /* Output Compare A Match Interrupt Enable: enabled */
	         | 0 << ICIE1  /* Input Capture Interrupt Enable: disabled */
	         | 0 << TOIE1; /* Overflow Interrupt Enable: disabled */

	return 0;
}
     c16:	80 e0       	ldi	r24, 0x00	; 0
     c18:	08 95       	ret

00000c1a <TIMER_1_init>:
 */
int8_t TIMER_1_init()
{

	/* Enable TC3 */
	PRR1 &= ~(1 << PRTIM3);
     c1a:	e5 e6       	ldi	r30, 0x65	; 101
     c1c:	f0 e0       	ldi	r31, 0x00	; 0
     c1e:	80 81       	ld	r24, Z
     c20:	87 7f       	andi	r24, 0xF7	; 247
     c22:	80 83       	st	Z, r24

	// TCCR3A = (0 << COM3A1) | (0 << COM3A0) /* Normal port operation, OCA disconnected */
	//		 | (0 << COM3B1) | (0 << COM3B0) /* Normal port operation, OCB disconnected */
	//		 | (0 << WGM31) | (0 << WGM30); /* TC16 Mode 0 Normal */

	TCCR3B = (0 << WGM33) | (0 << WGM32)                /* TC16 Mode 0 Normal */
     c24:	81 e0       	ldi	r24, 0x01	; 1
     c26:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
	         | 0 << ICES3                               /* Input Capture Edge Select: disabled */
	         | (0 << CS32) | (0 << CS31) | (1 << CS30); /* No prescaling */

	// ICR3 = 0; /* Input capture value, used as top counter value in some modes: 0 */

	OCR3A = 16000; /* Output compare A: 16000 */
     c2a:	80 e8       	ldi	r24, 0x80	; 128
     c2c:	9e e3       	ldi	r25, 0x3E	; 62
     c2e:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
     c32:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>

	// OCR3B = 0; /* Output compare B: 0 */

	TIMSK3 = 0 << OCIE3B   /* Output Compare B Match Interrupt Enable: disabled */
     c36:	82 e0       	ldi	r24, 0x02	; 2
     c38:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
	         | 1 << OCIE3A /* Output Compare A Match Interrupt Enable: enabled */
	         | 0 << ICIE3  /* Input Capture Interrupt Enable: disabled */
	         | 0 << TOIE3; /* Overflow Interrupt Enable: disabled */

	return 0;
}
     c3c:	80 e0       	ldi	r24, 0x00	; 0
     c3e:	08 95       	ret

00000c40 <__vector_25>:
	USART_3_rx_elements--;
	EXIT_CRITICAL(R);

	/* Return data */
	return USART_3_rxbuf[tmptail];
}
     c40:	1f 92       	push	r1
     c42:	0f 92       	push	r0
     c44:	0f b6       	in	r0, 0x3f	; 63
     c46:	0f 92       	push	r0
     c48:	11 24       	eor	r1, r1
     c4a:	0b b6       	in	r0, 0x3b	; 59
     c4c:	0f 92       	push	r0
     c4e:	8f 93       	push	r24
     c50:	9f 93       	push	r25
     c52:	ef 93       	push	r30
     c54:	ff 93       	push	r31
     c56:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     c5a:	e0 91 e9 03 	lds	r30, 0x03E9	; 0x8003e9 <USART_0_rx_head>
     c5e:	ef 5f       	subi	r30, 0xFF	; 255
     c60:	ef 77       	andi	r30, 0x7F	; 127
     c62:	e0 93 e9 03 	sts	0x03E9, r30	; 0x8003e9 <USART_0_rx_head>
     c66:	90 91 e8 03 	lds	r25, 0x03E8	; 0x8003e8 <USART_0_rx_tail>
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	e6 51       	subi	r30, 0x16	; 22
     c6e:	fc 4f       	sbci	r31, 0xFC	; 252
     c70:	80 83       	st	Z, r24
     c72:	80 91 e7 03 	lds	r24, 0x03E7	; 0x8003e7 <USART_0_rx_elements>
     c76:	8f 5f       	subi	r24, 0xFF	; 255
     c78:	80 93 e7 03 	sts	0x03E7, r24	; 0x8003e7 <USART_0_rx_elements>
     c7c:	ff 91       	pop	r31
     c7e:	ef 91       	pop	r30
     c80:	9f 91       	pop	r25
     c82:	8f 91       	pop	r24
     c84:	0f 90       	pop	r0
     c86:	0b be       	out	0x3b, r0	; 59
     c88:	0f 90       	pop	r0
     c8a:	0f be       	out	0x3f, r0	; 63
     c8c:	0f 90       	pop	r0
     c8e:	1f 90       	pop	r1
     c90:	18 95       	reti

00000c92 <__vector_26>:
     c92:	1f 92       	push	r1
     c94:	0f 92       	push	r0
     c96:	0f b6       	in	r0, 0x3f	; 63
     c98:	0f 92       	push	r0
     c9a:	11 24       	eor	r1, r1
     c9c:	0b b6       	in	r0, 0x3b	; 59
     c9e:	0f 92       	push	r0
     ca0:	8f 93       	push	r24
     ca2:	ef 93       	push	r30
     ca4:	ff 93       	push	r31
     ca6:	80 91 d4 03 	lds	r24, 0x03D4	; 0x8003d4 <USART_0_tx_elements>
     caa:	88 23       	and	r24, r24
     cac:	89 f0       	breq	.+34     	; 0xcd0 <__vector_26+0x3e>
     cae:	e0 91 d5 03 	lds	r30, 0x03D5	; 0x8003d5 <USART_0_tx_tail>
     cb2:	ef 5f       	subi	r30, 0xFF	; 255
     cb4:	ef 70       	andi	r30, 0x0F	; 15
     cb6:	e0 93 d5 03 	sts	0x03D5, r30	; 0x8003d5 <USART_0_tx_tail>
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	e9 52       	subi	r30, 0x29	; 41
     cbe:	fc 4f       	sbci	r31, 0xFC	; 252
     cc0:	80 81       	ld	r24, Z
     cc2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     cc6:	80 91 d4 03 	lds	r24, 0x03D4	; 0x8003d4 <USART_0_tx_elements>
     cca:	81 50       	subi	r24, 0x01	; 1
     ccc:	80 93 d4 03 	sts	0x03D4, r24	; 0x8003d4 <USART_0_tx_elements>
     cd0:	80 91 d4 03 	lds	r24, 0x03D4	; 0x8003d4 <USART_0_tx_elements>
     cd4:	81 11       	cpse	r24, r1
     cd6:	05 c0       	rjmp	.+10     	; 0xce2 <__vector_26+0x50>
     cd8:	e1 ec       	ldi	r30, 0xC1	; 193
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	80 81       	ld	r24, Z
     cde:	8f 7d       	andi	r24, 0xDF	; 223
     ce0:	80 83       	st	Z, r24
     ce2:	ff 91       	pop	r31
     ce4:	ef 91       	pop	r30
     ce6:	8f 91       	pop	r24
     ce8:	0f 90       	pop	r0
     cea:	0b be       	out	0x3b, r0	; 59
     cec:	0f 90       	pop	r0
     cee:	0f be       	out	0x3f, r0	; 63
     cf0:	0f 90       	pop	r0
     cf2:	1f 90       	pop	r1
     cf4:	18 95       	reti

00000cf6 <USART_0_is_rx_ready>:
     cf6:	90 91 e7 03 	lds	r25, 0x03E7	; 0x8003e7 <USART_0_rx_elements>
     cfa:	81 e0       	ldi	r24, 0x01	; 1
     cfc:	91 11       	cpse	r25, r1
     cfe:	01 c0       	rjmp	.+2      	; 0xd02 <USART_0_is_rx_ready+0xc>
     d00:	80 e0       	ldi	r24, 0x00	; 0
     d02:	08 95       	ret

00000d04 <USART_0_read>:
     d04:	80 91 e7 03 	lds	r24, 0x03E7	; 0x8003e7 <USART_0_rx_elements>
     d08:	88 23       	and	r24, r24
     d0a:	e1 f3       	breq	.-8      	; 0xd04 <USART_0_read>
     d0c:	e0 91 e8 03 	lds	r30, 0x03E8	; 0x8003e8 <USART_0_rx_tail>
     d10:	ef 5f       	subi	r30, 0xFF	; 255
     d12:	ef 77       	andi	r30, 0x7F	; 127
     d14:	e0 93 e8 03 	sts	0x03E8, r30	; 0x8003e8 <USART_0_rx_tail>
     d18:	0f b6       	in	r0, 0x3f	; 63
     d1a:	f8 94       	cli
     d1c:	0f 92       	push	r0
     d1e:	80 91 e7 03 	lds	r24, 0x03E7	; 0x8003e7 <USART_0_rx_elements>
     d22:	81 50       	subi	r24, 0x01	; 1
     d24:	80 93 e7 03 	sts	0x03E7, r24	; 0x8003e7 <USART_0_rx_elements>
     d28:	0f 90       	pop	r0
     d2a:	0f be       	out	0x3f, r0	; 63
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	e6 51       	subi	r30, 0x16	; 22
     d30:	fc 4f       	sbci	r31, 0xFC	; 252
     d32:	80 81       	ld	r24, Z
     d34:	08 95       	ret

00000d36 <USART_0_write>:
     d36:	20 91 d6 03 	lds	r18, 0x03D6	; 0x8003d6 <USART_0_tx_head>
     d3a:	2f 5f       	subi	r18, 0xFF	; 255
     d3c:	2f 70       	andi	r18, 0x0F	; 15
     d3e:	90 91 d4 03 	lds	r25, 0x03D4	; 0x8003d4 <USART_0_tx_elements>
     d42:	90 31       	cpi	r25, 0x10	; 16
     d44:	e1 f3       	breq	.-8      	; 0xd3e <USART_0_write+0x8>
     d46:	e2 2f       	mov	r30, r18
     d48:	f0 e0       	ldi	r31, 0x00	; 0
     d4a:	e9 52       	subi	r30, 0x29	; 41
     d4c:	fc 4f       	sbci	r31, 0xFC	; 252
     d4e:	80 83       	st	Z, r24
     d50:	20 93 d6 03 	sts	0x03D6, r18	; 0x8003d6 <USART_0_tx_head>
     d54:	0f b6       	in	r0, 0x3f	; 63
     d56:	f8 94       	cli
     d58:	0f 92       	push	r0
     d5a:	80 91 d4 03 	lds	r24, 0x03D4	; 0x8003d4 <USART_0_tx_elements>
     d5e:	8f 5f       	subi	r24, 0xFF	; 255
     d60:	80 93 d4 03 	sts	0x03D4, r24	; 0x8003d4 <USART_0_tx_elements>
     d64:	0f 90       	pop	r0
     d66:	0f be       	out	0x3f, r0	; 63
     d68:	e1 ec       	ldi	r30, 0xC1	; 193
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	80 81       	ld	r24, Z
     d6e:	80 62       	ori	r24, 0x20	; 32
     d70:	80 83       	st	Z, r24
     d72:	08 95       	ret

00000d74 <USART_0_init>:
     d74:	e4 e6       	ldi	r30, 0x64	; 100
     d76:	f0 e0       	ldi	r31, 0x00	; 0
     d78:	80 81       	ld	r24, Z
     d7a:	8d 7f       	andi	r24, 0xFD	; 253
     d7c:	80 83       	st	Z, r24
     d7e:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
     d82:	87 e6       	ldi	r24, 0x67	; 103
     d84:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
     d88:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
     d8c:	88 e9       	ldi	r24, 0x98	; 152
     d8e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
     d92:	10 92 e8 03 	sts	0x03E8, r1	; 0x8003e8 <USART_0_rx_tail>
     d96:	10 92 e9 03 	sts	0x03E9, r1	; 0x8003e9 <USART_0_rx_head>
     d9a:	10 92 e7 03 	sts	0x03E7, r1	; 0x8003e7 <USART_0_rx_elements>
     d9e:	10 92 d5 03 	sts	0x03D5, r1	; 0x8003d5 <USART_0_tx_tail>
     da2:	10 92 d6 03 	sts	0x03D6, r1	; 0x8003d6 <USART_0_tx_head>
     da6:	10 92 d4 03 	sts	0x03D4, r1	; 0x8003d4 <USART_0_tx_elements>
     daa:	80 e0       	ldi	r24, 0x00	; 0
     dac:	08 95       	ret

00000dae <__vector_36>:
     dae:	1f 92       	push	r1
     db0:	0f 92       	push	r0
     db2:	0f b6       	in	r0, 0x3f	; 63
     db4:	0f 92       	push	r0
     db6:	11 24       	eor	r1, r1
     db8:	0b b6       	in	r0, 0x3b	; 59
     dba:	0f 92       	push	r0
     dbc:	8f 93       	push	r24
     dbe:	9f 93       	push	r25
     dc0:	ef 93       	push	r30
     dc2:	ff 93       	push	r31
     dc4:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
     dc8:	e0 91 cb 03 	lds	r30, 0x03CB	; 0x8003cb <USART_1_rx_head>
     dcc:	ef 5f       	subi	r30, 0xFF	; 255
     dce:	e7 70       	andi	r30, 0x07	; 7
     dd0:	e0 93 cb 03 	sts	0x03CB, r30	; 0x8003cb <USART_1_rx_head>
     dd4:	90 91 ca 03 	lds	r25, 0x03CA	; 0x8003ca <USART_1_rx_tail>
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	e4 53       	subi	r30, 0x34	; 52
     ddc:	fc 4f       	sbci	r31, 0xFC	; 252
     dde:	80 83       	st	Z, r24
     de0:	80 91 c9 03 	lds	r24, 0x03C9	; 0x8003c9 <USART_1_rx_elements>
     de4:	8f 5f       	subi	r24, 0xFF	; 255
     de6:	80 93 c9 03 	sts	0x03C9, r24	; 0x8003c9 <USART_1_rx_elements>
     dea:	ff 91       	pop	r31
     dec:	ef 91       	pop	r30
     dee:	9f 91       	pop	r25
     df0:	8f 91       	pop	r24
     df2:	0f 90       	pop	r0
     df4:	0b be       	out	0x3b, r0	; 59
     df6:	0f 90       	pop	r0
     df8:	0f be       	out	0x3f, r0	; 63
     dfa:	0f 90       	pop	r0
     dfc:	1f 90       	pop	r1
     dfe:	18 95       	reti

00000e00 <__vector_37>:
     e00:	1f 92       	push	r1
     e02:	0f 92       	push	r0
     e04:	0f b6       	in	r0, 0x3f	; 63
     e06:	0f 92       	push	r0
     e08:	11 24       	eor	r1, r1
     e0a:	0b b6       	in	r0, 0x3b	; 59
     e0c:	0f 92       	push	r0
     e0e:	8f 93       	push	r24
     e10:	ef 93       	push	r30
     e12:	ff 93       	push	r31
     e14:	80 91 be 03 	lds	r24, 0x03BE	; 0x8003be <USART_1_tx_elements>
     e18:	88 23       	and	r24, r24
     e1a:	89 f0       	breq	.+34     	; 0xe3e <__vector_37+0x3e>
     e1c:	e0 91 bf 03 	lds	r30, 0x03BF	; 0x8003bf <USART_1_tx_tail>
     e20:	ef 5f       	subi	r30, 0xFF	; 255
     e22:	e7 70       	andi	r30, 0x07	; 7
     e24:	e0 93 bf 03 	sts	0x03BF, r30	; 0x8003bf <USART_1_tx_tail>
     e28:	f0 e0       	ldi	r31, 0x00	; 0
     e2a:	ef 53       	subi	r30, 0x3F	; 63
     e2c:	fc 4f       	sbci	r31, 0xFC	; 252
     e2e:	80 81       	ld	r24, Z
     e30:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
     e34:	80 91 be 03 	lds	r24, 0x03BE	; 0x8003be <USART_1_tx_elements>
     e38:	81 50       	subi	r24, 0x01	; 1
     e3a:	80 93 be 03 	sts	0x03BE, r24	; 0x8003be <USART_1_tx_elements>
     e3e:	80 91 be 03 	lds	r24, 0x03BE	; 0x8003be <USART_1_tx_elements>
     e42:	81 11       	cpse	r24, r1
     e44:	05 c0       	rjmp	.+10     	; 0xe50 <__vector_37+0x50>
     e46:	e9 ec       	ldi	r30, 0xC9	; 201
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	80 81       	ld	r24, Z
     e4c:	8f 7d       	andi	r24, 0xDF	; 223
     e4e:	80 83       	st	Z, r24
     e50:	ff 91       	pop	r31
     e52:	ef 91       	pop	r30
     e54:	8f 91       	pop	r24
     e56:	0f 90       	pop	r0
     e58:	0b be       	out	0x3b, r0	; 59
     e5a:	0f 90       	pop	r0
     e5c:	0f be       	out	0x3f, r0	; 63
     e5e:	0f 90       	pop	r0
     e60:	1f 90       	pop	r1
     e62:	18 95       	reti

00000e64 <USART_1_init>:
     e64:	e5 e6       	ldi	r30, 0x65	; 101
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	8e 7f       	andi	r24, 0xFE	; 254
     e6c:	80 83       	st	Z, r24
     e6e:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
     e72:	87 e6       	ldi	r24, 0x67	; 103
     e74:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
     e78:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
     e7c:	88 e9       	ldi	r24, 0x98	; 152
     e7e:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
     e82:	10 92 ca 03 	sts	0x03CA, r1	; 0x8003ca <USART_1_rx_tail>
     e86:	10 92 cb 03 	sts	0x03CB, r1	; 0x8003cb <USART_1_rx_head>
     e8a:	10 92 c9 03 	sts	0x03C9, r1	; 0x8003c9 <USART_1_rx_elements>
     e8e:	10 92 bf 03 	sts	0x03BF, r1	; 0x8003bf <USART_1_tx_tail>
     e92:	10 92 c0 03 	sts	0x03C0, r1	; 0x8003c0 <USART_1_tx_head>
     e96:	10 92 be 03 	sts	0x03BE, r1	; 0x8003be <USART_1_tx_elements>
     e9a:	80 e0       	ldi	r24, 0x00	; 0
     e9c:	08 95       	ret

00000e9e <__vector_51>:
     e9e:	1f 92       	push	r1
     ea0:	0f 92       	push	r0
     ea2:	0f b6       	in	r0, 0x3f	; 63
     ea4:	0f 92       	push	r0
     ea6:	11 24       	eor	r1, r1
     ea8:	0b b6       	in	r0, 0x3b	; 59
     eaa:	0f 92       	push	r0
     eac:	8f 93       	push	r24
     eae:	9f 93       	push	r25
     eb0:	ef 93       	push	r30
     eb2:	ff 93       	push	r31
     eb4:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
     eb8:	e0 91 7d 03 	lds	r30, 0x037D	; 0x80037d <USART_2_rx_head>
     ebc:	ef 5f       	subi	r30, 0xFF	; 255
     ebe:	ef 73       	andi	r30, 0x3F	; 63
     ec0:	e0 93 7d 03 	sts	0x037D, r30	; 0x80037d <USART_2_rx_head>
     ec4:	90 91 7c 03 	lds	r25, 0x037C	; 0x80037c <USART_2_rx_tail>
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	e2 58       	subi	r30, 0x82	; 130
     ecc:	fc 4f       	sbci	r31, 0xFC	; 252
     ece:	80 83       	st	Z, r24
     ed0:	80 91 7b 03 	lds	r24, 0x037B	; 0x80037b <USART_2_rx_elements>
     ed4:	8f 5f       	subi	r24, 0xFF	; 255
     ed6:	80 93 7b 03 	sts	0x037B, r24	; 0x80037b <USART_2_rx_elements>
     eda:	ff 91       	pop	r31
     edc:	ef 91       	pop	r30
     ede:	9f 91       	pop	r25
     ee0:	8f 91       	pop	r24
     ee2:	0f 90       	pop	r0
     ee4:	0b be       	out	0x3b, r0	; 59
     ee6:	0f 90       	pop	r0
     ee8:	0f be       	out	0x3f, r0	; 63
     eea:	0f 90       	pop	r0
     eec:	1f 90       	pop	r1
     eee:	18 95       	reti

00000ef0 <__vector_52>:
     ef0:	1f 92       	push	r1
     ef2:	0f 92       	push	r0
     ef4:	0f b6       	in	r0, 0x3f	; 63
     ef6:	0f 92       	push	r0
     ef8:	11 24       	eor	r1, r1
     efa:	0b b6       	in	r0, 0x3b	; 59
     efc:	0f 92       	push	r0
     efe:	8f 93       	push	r24
     f00:	ef 93       	push	r30
     f02:	ff 93       	push	r31
     f04:	80 91 70 03 	lds	r24, 0x0370	; 0x800370 <USART_2_tx_elements>
     f08:	88 23       	and	r24, r24
     f0a:	89 f0       	breq	.+34     	; 0xf2e <__vector_52+0x3e>
     f0c:	e0 91 71 03 	lds	r30, 0x0371	; 0x800371 <USART_2_tx_tail>
     f10:	ef 5f       	subi	r30, 0xFF	; 255
     f12:	e7 70       	andi	r30, 0x07	; 7
     f14:	e0 93 71 03 	sts	0x0371, r30	; 0x800371 <USART_2_tx_tail>
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	ed 58       	subi	r30, 0x8D	; 141
     f1c:	fc 4f       	sbci	r31, 0xFC	; 252
     f1e:	80 81       	ld	r24, Z
     f20:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
     f24:	80 91 70 03 	lds	r24, 0x0370	; 0x800370 <USART_2_tx_elements>
     f28:	81 50       	subi	r24, 0x01	; 1
     f2a:	80 93 70 03 	sts	0x0370, r24	; 0x800370 <USART_2_tx_elements>
     f2e:	80 91 70 03 	lds	r24, 0x0370	; 0x800370 <USART_2_tx_elements>
     f32:	81 11       	cpse	r24, r1
     f34:	05 c0       	rjmp	.+10     	; 0xf40 <__vector_52+0x50>
     f36:	e1 ed       	ldi	r30, 0xD1	; 209
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	80 81       	ld	r24, Z
     f3c:	8f 7d       	andi	r24, 0xDF	; 223
     f3e:	80 83       	st	Z, r24
     f40:	ff 91       	pop	r31
     f42:	ef 91       	pop	r30
     f44:	8f 91       	pop	r24
     f46:	0f 90       	pop	r0
     f48:	0b be       	out	0x3b, r0	; 59
     f4a:	0f 90       	pop	r0
     f4c:	0f be       	out	0x3f, r0	; 63
     f4e:	0f 90       	pop	r0
     f50:	1f 90       	pop	r1
     f52:	18 95       	reti

00000f54 <USART_2_is_rx_ready>:
     f54:	90 91 7b 03 	lds	r25, 0x037B	; 0x80037b <USART_2_rx_elements>
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	91 11       	cpse	r25, r1
     f5c:	01 c0       	rjmp	.+2      	; 0xf60 <USART_2_is_rx_ready+0xc>
     f5e:	80 e0       	ldi	r24, 0x00	; 0
     f60:	08 95       	ret

00000f62 <USART_2_read>:
     f62:	80 91 7b 03 	lds	r24, 0x037B	; 0x80037b <USART_2_rx_elements>
     f66:	88 23       	and	r24, r24
     f68:	e1 f3       	breq	.-8      	; 0xf62 <USART_2_read>
     f6a:	e0 91 7c 03 	lds	r30, 0x037C	; 0x80037c <USART_2_rx_tail>
     f6e:	ef 5f       	subi	r30, 0xFF	; 255
     f70:	ef 73       	andi	r30, 0x3F	; 63
     f72:	e0 93 7c 03 	sts	0x037C, r30	; 0x80037c <USART_2_rx_tail>
     f76:	0f b6       	in	r0, 0x3f	; 63
     f78:	f8 94       	cli
     f7a:	0f 92       	push	r0
     f7c:	80 91 7b 03 	lds	r24, 0x037B	; 0x80037b <USART_2_rx_elements>
     f80:	81 50       	subi	r24, 0x01	; 1
     f82:	80 93 7b 03 	sts	0x037B, r24	; 0x80037b <USART_2_rx_elements>
     f86:	0f 90       	pop	r0
     f88:	0f be       	out	0x3f, r0	; 63
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	e2 58       	subi	r30, 0x82	; 130
     f8e:	fc 4f       	sbci	r31, 0xFC	; 252
     f90:	80 81       	ld	r24, Z
     f92:	08 95       	ret

00000f94 <USART_2_write>:
     f94:	20 91 72 03 	lds	r18, 0x0372	; 0x800372 <USART_2_tx_head>
     f98:	2f 5f       	subi	r18, 0xFF	; 255
     f9a:	27 70       	andi	r18, 0x07	; 7
     f9c:	90 91 70 03 	lds	r25, 0x0370	; 0x800370 <USART_2_tx_elements>
     fa0:	98 30       	cpi	r25, 0x08	; 8
     fa2:	e1 f3       	breq	.-8      	; 0xf9c <USART_2_write+0x8>
     fa4:	e2 2f       	mov	r30, r18
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	ed 58       	subi	r30, 0x8D	; 141
     faa:	fc 4f       	sbci	r31, 0xFC	; 252
     fac:	80 83       	st	Z, r24
     fae:	20 93 72 03 	sts	0x0372, r18	; 0x800372 <USART_2_tx_head>
     fb2:	0f b6       	in	r0, 0x3f	; 63
     fb4:	f8 94       	cli
     fb6:	0f 92       	push	r0
     fb8:	80 91 70 03 	lds	r24, 0x0370	; 0x800370 <USART_2_tx_elements>
     fbc:	8f 5f       	subi	r24, 0xFF	; 255
     fbe:	80 93 70 03 	sts	0x0370, r24	; 0x800370 <USART_2_tx_elements>
     fc2:	0f 90       	pop	r0
     fc4:	0f be       	out	0x3f, r0	; 63
     fc6:	e1 ed       	ldi	r30, 0xD1	; 209
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	80 81       	ld	r24, Z
     fcc:	80 62       	ori	r24, 0x20	; 32
     fce:	80 83       	st	Z, r24
     fd0:	08 95       	ret

00000fd2 <USART_2_init>:
     fd2:	e5 e6       	ldi	r30, 0x65	; 101
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	8d 7f       	andi	r24, 0xFD	; 253
     fda:	80 83       	st	Z, r24
     fdc:	10 92 d5 00 	sts	0x00D5, r1	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
     fe0:	87 e6       	ldi	r24, 0x67	; 103
     fe2:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
     fe6:	10 92 d0 00 	sts	0x00D0, r1	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
     fea:	88 e9       	ldi	r24, 0x98	; 152
     fec:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>
     ff0:	10 92 7c 03 	sts	0x037C, r1	; 0x80037c <USART_2_rx_tail>
     ff4:	10 92 7d 03 	sts	0x037D, r1	; 0x80037d <USART_2_rx_head>
     ff8:	10 92 7b 03 	sts	0x037B, r1	; 0x80037b <USART_2_rx_elements>
     ffc:	10 92 71 03 	sts	0x0371, r1	; 0x800371 <USART_2_tx_tail>
    1000:	10 92 72 03 	sts	0x0372, r1	; 0x800372 <USART_2_tx_head>
    1004:	10 92 70 03 	sts	0x0370, r1	; 0x800370 <USART_2_tx_elements>
    1008:	80 e0       	ldi	r24, 0x00	; 0
    100a:	08 95       	ret

0000100c <__vector_54>:
    100c:	1f 92       	push	r1
    100e:	0f 92       	push	r0
    1010:	0f b6       	in	r0, 0x3f	; 63
    1012:	0f 92       	push	r0
    1014:	11 24       	eor	r1, r1
    1016:	0b b6       	in	r0, 0x3b	; 59
    1018:	0f 92       	push	r0
    101a:	8f 93       	push	r24
    101c:	9f 93       	push	r25
    101e:	ef 93       	push	r30
    1020:	ff 93       	push	r31
    1022:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    1026:	e0 91 67 03 	lds	r30, 0x0367	; 0x800367 <USART_3_rx_head>
    102a:	ef 5f       	subi	r30, 0xFF	; 255
    102c:	e7 70       	andi	r30, 0x07	; 7
    102e:	e0 93 67 03 	sts	0x0367, r30	; 0x800367 <USART_3_rx_head>
    1032:	90 91 66 03 	lds	r25, 0x0366	; 0x800366 <USART_3_rx_tail>
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	e8 59       	subi	r30, 0x98	; 152
    103a:	fc 4f       	sbci	r31, 0xFC	; 252
    103c:	80 83       	st	Z, r24
    103e:	80 91 65 03 	lds	r24, 0x0365	; 0x800365 <USART_3_rx_elements>
    1042:	8f 5f       	subi	r24, 0xFF	; 255
    1044:	80 93 65 03 	sts	0x0365, r24	; 0x800365 <USART_3_rx_elements>
    1048:	ff 91       	pop	r31
    104a:	ef 91       	pop	r30
    104c:	9f 91       	pop	r25
    104e:	8f 91       	pop	r24
    1050:	0f 90       	pop	r0
    1052:	0b be       	out	0x3b, r0	; 59
    1054:	0f 90       	pop	r0
    1056:	0f be       	out	0x3f, r0	; 63
    1058:	0f 90       	pop	r0
    105a:	1f 90       	pop	r1
    105c:	18 95       	reti

0000105e <__vector_55>:
    105e:	1f 92       	push	r1
    1060:	0f 92       	push	r0
    1062:	0f b6       	in	r0, 0x3f	; 63
    1064:	0f 92       	push	r0
    1066:	11 24       	eor	r1, r1
    1068:	0b b6       	in	r0, 0x3b	; 59
    106a:	0f 92       	push	r0
    106c:	8f 93       	push	r24
    106e:	ef 93       	push	r30
    1070:	ff 93       	push	r31
    1072:	80 91 5a 03 	lds	r24, 0x035A	; 0x80035a <USART_3_tx_elements>
    1076:	88 23       	and	r24, r24
    1078:	89 f0       	breq	.+34     	; 0x109c <__vector_55+0x3e>
    107a:	e0 91 5b 03 	lds	r30, 0x035B	; 0x80035b <USART_3_tx_tail>
    107e:	ef 5f       	subi	r30, 0xFF	; 255
    1080:	e7 70       	andi	r30, 0x07	; 7
    1082:	e0 93 5b 03 	sts	0x035B, r30	; 0x80035b <USART_3_tx_tail>
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	e3 5a       	subi	r30, 0xA3	; 163
    108a:	fc 4f       	sbci	r31, 0xFC	; 252
    108c:	80 81       	ld	r24, Z
    108e:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    1092:	80 91 5a 03 	lds	r24, 0x035A	; 0x80035a <USART_3_tx_elements>
    1096:	81 50       	subi	r24, 0x01	; 1
    1098:	80 93 5a 03 	sts	0x035A, r24	; 0x80035a <USART_3_tx_elements>
    109c:	80 91 5a 03 	lds	r24, 0x035A	; 0x80035a <USART_3_tx_elements>
    10a0:	81 11       	cpse	r24, r1
    10a2:	05 c0       	rjmp	.+10     	; 0x10ae <__vector_55+0x50>
    10a4:	e1 e3       	ldi	r30, 0x31	; 49
    10a6:	f1 e0       	ldi	r31, 0x01	; 1
    10a8:	80 81       	ld	r24, Z
    10aa:	8f 7d       	andi	r24, 0xDF	; 223
    10ac:	80 83       	st	Z, r24
    10ae:	ff 91       	pop	r31
    10b0:	ef 91       	pop	r30
    10b2:	8f 91       	pop	r24
    10b4:	0f 90       	pop	r0
    10b6:	0b be       	out	0x3b, r0	; 59
    10b8:	0f 90       	pop	r0
    10ba:	0f be       	out	0x3f, r0	; 63
    10bc:	0f 90       	pop	r0
    10be:	1f 90       	pop	r1
    10c0:	18 95       	reti

000010c2 <USART_3_write>:
void USART_3_write(const uint8_t data)
{
	uint8_t tmphead;

	/* Calculate buffer index */
	tmphead = (USART_3_tx_head + 1) & USART_3_TX_BUFFER_MASK;
    10c2:	20 91 5c 03 	lds	r18, 0x035C	; 0x80035c <USART_3_tx_head>
    10c6:	2f 5f       	subi	r18, 0xFF	; 255
    10c8:	27 70       	andi	r18, 0x07	; 7
	/* Wait for free space in buffer */
	while (USART_3_tx_elements == USART_3_TX_BUFFER_SIZE)
    10ca:	90 91 5a 03 	lds	r25, 0x035A	; 0x80035a <USART_3_tx_elements>
    10ce:	98 30       	cpi	r25, 0x08	; 8
    10d0:	e1 f3       	breq	.-8      	; 0x10ca <USART_3_write+0x8>
		;
	/* Store data in buffer */
	USART_3_txbuf[tmphead] = data;
    10d2:	e2 2f       	mov	r30, r18
    10d4:	f0 e0       	ldi	r31, 0x00	; 0
    10d6:	e3 5a       	subi	r30, 0xA3	; 163
    10d8:	fc 4f       	sbci	r31, 0xFC	; 252
    10da:	80 83       	st	Z, r24
	/* Store new index */
	USART_3_tx_head = tmphead;
    10dc:	20 93 5c 03 	sts	0x035C, r18	; 0x80035c <USART_3_tx_head>
	ENTER_CRITICAL(W);
    10e0:	0f b6       	in	r0, 0x3f	; 63
    10e2:	f8 94       	cli
    10e4:	0f 92       	push	r0
	USART_3_tx_elements++;
    10e6:	80 91 5a 03 	lds	r24, 0x035A	; 0x80035a <USART_3_tx_elements>
    10ea:	8f 5f       	subi	r24, 0xFF	; 255
    10ec:	80 93 5a 03 	sts	0x035A, r24	; 0x80035a <USART_3_tx_elements>
	EXIT_CRITICAL(W);
    10f0:	0f 90       	pop	r0
    10f2:	0f be       	out	0x3f, r0	; 63
	/* Enable UDRE interrupt */
	UCSR3B |= (1 << UDRIE3);
    10f4:	e1 e3       	ldi	r30, 0x31	; 49
    10f6:	f1 e0       	ldi	r31, 0x01	; 1
    10f8:	80 81       	ld	r24, Z
    10fa:	80 62       	ori	r24, 0x20	; 32
    10fc:	80 83       	st	Z, r24
    10fe:	08 95       	ret

00001100 <USART_3_printCHAR>:
    1100:	e0 df       	rcall	.-64     	; 0x10c2 <USART_3_write>
    1102:	80 e0       	ldi	r24, 0x00	; 0
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	08 95       	ret

00001108 <USART_3_init>:
    1108:	e5 e6       	ldi	r30, 0x65	; 101
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	80 81       	ld	r24, Z
    110e:	8b 7f       	andi	r24, 0xFB	; 251
    1110:	80 83       	st	Z, r24
    1112:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <__TEXT_REGION_LENGTH__+0x700135>
    1116:	87 e6       	ldi	r24, 0x67	; 103
    1118:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__TEXT_REGION_LENGTH__+0x700134>
    111c:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
    1120:	88 e9       	ldi	r24, 0x98	; 152
    1122:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <__TEXT_REGION_LENGTH__+0x700131>
    1126:	10 92 66 03 	sts	0x0366, r1	; 0x800366 <USART_3_rx_tail>
    112a:	10 92 67 03 	sts	0x0367, r1	; 0x800367 <USART_3_rx_head>
    112e:	10 92 65 03 	sts	0x0365, r1	; 0x800365 <USART_3_rx_elements>
    1132:	10 92 5b 03 	sts	0x035B, r1	; 0x80035b <USART_3_tx_tail>
    1136:	10 92 5c 03 	sts	0x035C, r1	; 0x80035c <USART_3_tx_head>
    113a:	10 92 5a 03 	sts	0x035A, r1	; 0x80035a <USART_3_tx_elements>
    113e:	80 e0       	ldi	r24, 0x00	; 0
    1140:	92 e0       	ldi	r25, 0x02	; 2
    1142:	90 93 6d 04 	sts	0x046D, r25	; 0x80046d <__iob+0x3>
    1146:	80 93 6c 04 	sts	0x046C, r24	; 0x80046c <__iob+0x2>
    114a:	80 e0       	ldi	r24, 0x00	; 0
    114c:	08 95       	ret

0000114e <__adddi3>:
    114e:	2a 0d       	add	r18, r10
    1150:	3b 1d       	adc	r19, r11
    1152:	4c 1d       	adc	r20, r12
    1154:	5d 1d       	adc	r21, r13
    1156:	6e 1d       	adc	r22, r14
    1158:	7f 1d       	adc	r23, r15
    115a:	80 1f       	adc	r24, r16
    115c:	91 1f       	adc	r25, r17
    115e:	08 95       	ret

00001160 <__adddi3_s8>:
    1160:	00 24       	eor	r0, r0
    1162:	a7 fd       	sbrc	r26, 7
    1164:	00 94       	com	r0
    1166:	2a 0f       	add	r18, r26
    1168:	30 1d       	adc	r19, r0
    116a:	40 1d       	adc	r20, r0
    116c:	50 1d       	adc	r21, r0
    116e:	60 1d       	adc	r22, r0
    1170:	70 1d       	adc	r23, r0
    1172:	80 1d       	adc	r24, r0
    1174:	90 1d       	adc	r25, r0
    1176:	08 95       	ret

00001178 <__cmpdi2>:
    1178:	2a 15       	cp	r18, r10
    117a:	3b 05       	cpc	r19, r11
    117c:	4c 05       	cpc	r20, r12
    117e:	5d 05       	cpc	r21, r13
    1180:	6e 05       	cpc	r22, r14
    1182:	7f 05       	cpc	r23, r15
    1184:	80 07       	cpc	r24, r16
    1186:	91 07       	cpc	r25, r17
    1188:	08 95       	ret

0000118a <strncmp>:
    118a:	fb 01       	movw	r30, r22
    118c:	dc 01       	movw	r26, r24
    118e:	41 50       	subi	r20, 0x01	; 1
    1190:	50 40       	sbci	r21, 0x00	; 0
    1192:	30 f0       	brcs	.+12     	; 0x11a0 <strncmp+0x16>
    1194:	8d 91       	ld	r24, X+
    1196:	01 90       	ld	r0, Z+
    1198:	80 19       	sub	r24, r0
    119a:	19 f4       	brne	.+6      	; 0x11a2 <strncmp+0x18>
    119c:	00 20       	and	r0, r0
    119e:	b9 f7       	brne	.-18     	; 0x118e <strncmp+0x4>
    11a0:	88 1b       	sub	r24, r24
    11a2:	99 0b       	sbc	r25, r25
    11a4:	08 95       	ret

000011a6 <printf>:
    11a6:	cf 93       	push	r28
    11a8:	df 93       	push	r29
    11aa:	cd b7       	in	r28, 0x3d	; 61
    11ac:	de b7       	in	r29, 0x3e	; 62
    11ae:	ae 01       	movw	r20, r28
    11b0:	4a 5f       	subi	r20, 0xFA	; 250
    11b2:	5f 4f       	sbci	r21, 0xFF	; 255
    11b4:	fa 01       	movw	r30, r20
    11b6:	61 91       	ld	r22, Z+
    11b8:	71 91       	ld	r23, Z+
    11ba:	af 01       	movw	r20, r30
    11bc:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <__iob+0x2>
    11c0:	90 91 6d 04 	lds	r25, 0x046D	; 0x80046d <__iob+0x3>
    11c4:	03 d0       	rcall	.+6      	; 0x11cc <vfprintf>
    11c6:	df 91       	pop	r29
    11c8:	cf 91       	pop	r28
    11ca:	08 95       	ret

000011cc <vfprintf>:
    11cc:	2f 92       	push	r2
    11ce:	3f 92       	push	r3
    11d0:	4f 92       	push	r4
    11d2:	5f 92       	push	r5
    11d4:	6f 92       	push	r6
    11d6:	7f 92       	push	r7
    11d8:	8f 92       	push	r8
    11da:	9f 92       	push	r9
    11dc:	af 92       	push	r10
    11de:	bf 92       	push	r11
    11e0:	cf 92       	push	r12
    11e2:	df 92       	push	r13
    11e4:	ef 92       	push	r14
    11e6:	ff 92       	push	r15
    11e8:	0f 93       	push	r16
    11ea:	1f 93       	push	r17
    11ec:	cf 93       	push	r28
    11ee:	df 93       	push	r29
    11f0:	cd b7       	in	r28, 0x3d	; 61
    11f2:	de b7       	in	r29, 0x3e	; 62
    11f4:	2b 97       	sbiw	r28, 0x0b	; 11
    11f6:	0f b6       	in	r0, 0x3f	; 63
    11f8:	f8 94       	cli
    11fa:	de bf       	out	0x3e, r29	; 62
    11fc:	0f be       	out	0x3f, r0	; 63
    11fe:	cd bf       	out	0x3d, r28	; 61
    1200:	6c 01       	movw	r12, r24
    1202:	7b 01       	movw	r14, r22
    1204:	8a 01       	movw	r16, r20
    1206:	fc 01       	movw	r30, r24
    1208:	17 82       	std	Z+7, r1	; 0x07
    120a:	16 82       	std	Z+6, r1	; 0x06
    120c:	83 81       	ldd	r24, Z+3	; 0x03
    120e:	81 ff       	sbrs	r24, 1
    1210:	bf c1       	rjmp	.+894    	; 0x1590 <vfprintf+0x3c4>
    1212:	ce 01       	movw	r24, r28
    1214:	01 96       	adiw	r24, 0x01	; 1
    1216:	3c 01       	movw	r6, r24
    1218:	f6 01       	movw	r30, r12
    121a:	93 81       	ldd	r25, Z+3	; 0x03
    121c:	f7 01       	movw	r30, r14
    121e:	93 fd       	sbrc	r25, 3
    1220:	85 91       	lpm	r24, Z+
    1222:	93 ff       	sbrs	r25, 3
    1224:	81 91       	ld	r24, Z+
    1226:	7f 01       	movw	r14, r30
    1228:	88 23       	and	r24, r24
    122a:	09 f4       	brne	.+2      	; 0x122e <vfprintf+0x62>
    122c:	ad c1       	rjmp	.+858    	; 0x1588 <vfprintf+0x3bc>
    122e:	85 32       	cpi	r24, 0x25	; 37
    1230:	39 f4       	brne	.+14     	; 0x1240 <vfprintf+0x74>
    1232:	93 fd       	sbrc	r25, 3
    1234:	85 91       	lpm	r24, Z+
    1236:	93 ff       	sbrs	r25, 3
    1238:	81 91       	ld	r24, Z+
    123a:	7f 01       	movw	r14, r30
    123c:	85 32       	cpi	r24, 0x25	; 37
    123e:	21 f4       	brne	.+8      	; 0x1248 <vfprintf+0x7c>
    1240:	b6 01       	movw	r22, r12
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	d6 d1       	rcall	.+940    	; 0x15f2 <fputc>
    1246:	e8 cf       	rjmp	.-48     	; 0x1218 <vfprintf+0x4c>
    1248:	91 2c       	mov	r9, r1
    124a:	21 2c       	mov	r2, r1
    124c:	31 2c       	mov	r3, r1
    124e:	ff e1       	ldi	r31, 0x1F	; 31
    1250:	f3 15       	cp	r31, r3
    1252:	d8 f0       	brcs	.+54     	; 0x128a <vfprintf+0xbe>
    1254:	8b 32       	cpi	r24, 0x2B	; 43
    1256:	79 f0       	breq	.+30     	; 0x1276 <vfprintf+0xaa>
    1258:	38 f4       	brcc	.+14     	; 0x1268 <vfprintf+0x9c>
    125a:	80 32       	cpi	r24, 0x20	; 32
    125c:	79 f0       	breq	.+30     	; 0x127c <vfprintf+0xb0>
    125e:	83 32       	cpi	r24, 0x23	; 35
    1260:	a1 f4       	brne	.+40     	; 0x128a <vfprintf+0xbe>
    1262:	23 2d       	mov	r18, r3
    1264:	20 61       	ori	r18, 0x10	; 16
    1266:	1d c0       	rjmp	.+58     	; 0x12a2 <vfprintf+0xd6>
    1268:	8d 32       	cpi	r24, 0x2D	; 45
    126a:	61 f0       	breq	.+24     	; 0x1284 <vfprintf+0xb8>
    126c:	80 33       	cpi	r24, 0x30	; 48
    126e:	69 f4       	brne	.+26     	; 0x128a <vfprintf+0xbe>
    1270:	23 2d       	mov	r18, r3
    1272:	21 60       	ori	r18, 0x01	; 1
    1274:	16 c0       	rjmp	.+44     	; 0x12a2 <vfprintf+0xd6>
    1276:	83 2d       	mov	r24, r3
    1278:	82 60       	ori	r24, 0x02	; 2
    127a:	38 2e       	mov	r3, r24
    127c:	e3 2d       	mov	r30, r3
    127e:	e4 60       	ori	r30, 0x04	; 4
    1280:	3e 2e       	mov	r3, r30
    1282:	2a c0       	rjmp	.+84     	; 0x12d8 <vfprintf+0x10c>
    1284:	f3 2d       	mov	r31, r3
    1286:	f8 60       	ori	r31, 0x08	; 8
    1288:	1d c0       	rjmp	.+58     	; 0x12c4 <vfprintf+0xf8>
    128a:	37 fc       	sbrc	r3, 7
    128c:	2d c0       	rjmp	.+90     	; 0x12e8 <vfprintf+0x11c>
    128e:	20 ed       	ldi	r18, 0xD0	; 208
    1290:	28 0f       	add	r18, r24
    1292:	2a 30       	cpi	r18, 0x0A	; 10
    1294:	40 f0       	brcs	.+16     	; 0x12a6 <vfprintf+0xda>
    1296:	8e 32       	cpi	r24, 0x2E	; 46
    1298:	b9 f4       	brne	.+46     	; 0x12c8 <vfprintf+0xfc>
    129a:	36 fc       	sbrc	r3, 6
    129c:	75 c1       	rjmp	.+746    	; 0x1588 <vfprintf+0x3bc>
    129e:	23 2d       	mov	r18, r3
    12a0:	20 64       	ori	r18, 0x40	; 64
    12a2:	32 2e       	mov	r3, r18
    12a4:	19 c0       	rjmp	.+50     	; 0x12d8 <vfprintf+0x10c>
    12a6:	36 fe       	sbrs	r3, 6
    12a8:	06 c0       	rjmp	.+12     	; 0x12b6 <vfprintf+0xea>
    12aa:	8a e0       	ldi	r24, 0x0A	; 10
    12ac:	98 9e       	mul	r9, r24
    12ae:	20 0d       	add	r18, r0
    12b0:	11 24       	eor	r1, r1
    12b2:	92 2e       	mov	r9, r18
    12b4:	11 c0       	rjmp	.+34     	; 0x12d8 <vfprintf+0x10c>
    12b6:	ea e0       	ldi	r30, 0x0A	; 10
    12b8:	2e 9e       	mul	r2, r30
    12ba:	20 0d       	add	r18, r0
    12bc:	11 24       	eor	r1, r1
    12be:	22 2e       	mov	r2, r18
    12c0:	f3 2d       	mov	r31, r3
    12c2:	f0 62       	ori	r31, 0x20	; 32
    12c4:	3f 2e       	mov	r3, r31
    12c6:	08 c0       	rjmp	.+16     	; 0x12d8 <vfprintf+0x10c>
    12c8:	8c 36       	cpi	r24, 0x6C	; 108
    12ca:	21 f4       	brne	.+8      	; 0x12d4 <vfprintf+0x108>
    12cc:	83 2d       	mov	r24, r3
    12ce:	80 68       	ori	r24, 0x80	; 128
    12d0:	38 2e       	mov	r3, r24
    12d2:	02 c0       	rjmp	.+4      	; 0x12d8 <vfprintf+0x10c>
    12d4:	88 36       	cpi	r24, 0x68	; 104
    12d6:	41 f4       	brne	.+16     	; 0x12e8 <vfprintf+0x11c>
    12d8:	f7 01       	movw	r30, r14
    12da:	93 fd       	sbrc	r25, 3
    12dc:	85 91       	lpm	r24, Z+
    12de:	93 ff       	sbrs	r25, 3
    12e0:	81 91       	ld	r24, Z+
    12e2:	7f 01       	movw	r14, r30
    12e4:	81 11       	cpse	r24, r1
    12e6:	b3 cf       	rjmp	.-154    	; 0x124e <vfprintf+0x82>
    12e8:	98 2f       	mov	r25, r24
    12ea:	9f 7d       	andi	r25, 0xDF	; 223
    12ec:	95 54       	subi	r25, 0x45	; 69
    12ee:	93 30       	cpi	r25, 0x03	; 3
    12f0:	28 f4       	brcc	.+10     	; 0x12fc <vfprintf+0x130>
    12f2:	0c 5f       	subi	r16, 0xFC	; 252
    12f4:	1f 4f       	sbci	r17, 0xFF	; 255
    12f6:	9f e3       	ldi	r25, 0x3F	; 63
    12f8:	99 83       	std	Y+1, r25	; 0x01
    12fa:	0d c0       	rjmp	.+26     	; 0x1316 <vfprintf+0x14a>
    12fc:	83 36       	cpi	r24, 0x63	; 99
    12fe:	31 f0       	breq	.+12     	; 0x130c <vfprintf+0x140>
    1300:	83 37       	cpi	r24, 0x73	; 115
    1302:	71 f0       	breq	.+28     	; 0x1320 <vfprintf+0x154>
    1304:	83 35       	cpi	r24, 0x53	; 83
    1306:	09 f0       	breq	.+2      	; 0x130a <vfprintf+0x13e>
    1308:	55 c0       	rjmp	.+170    	; 0x13b4 <vfprintf+0x1e8>
    130a:	20 c0       	rjmp	.+64     	; 0x134c <vfprintf+0x180>
    130c:	f8 01       	movw	r30, r16
    130e:	80 81       	ld	r24, Z
    1310:	89 83       	std	Y+1, r24	; 0x01
    1312:	0e 5f       	subi	r16, 0xFE	; 254
    1314:	1f 4f       	sbci	r17, 0xFF	; 255
    1316:	88 24       	eor	r8, r8
    1318:	83 94       	inc	r8
    131a:	91 2c       	mov	r9, r1
    131c:	53 01       	movw	r10, r6
    131e:	12 c0       	rjmp	.+36     	; 0x1344 <vfprintf+0x178>
    1320:	28 01       	movw	r4, r16
    1322:	f2 e0       	ldi	r31, 0x02	; 2
    1324:	4f 0e       	add	r4, r31
    1326:	51 1c       	adc	r5, r1
    1328:	f8 01       	movw	r30, r16
    132a:	a0 80       	ld	r10, Z
    132c:	b1 80       	ldd	r11, Z+1	; 0x01
    132e:	36 fe       	sbrs	r3, 6
    1330:	03 c0       	rjmp	.+6      	; 0x1338 <vfprintf+0x16c>
    1332:	69 2d       	mov	r22, r9
    1334:	70 e0       	ldi	r23, 0x00	; 0
    1336:	02 c0       	rjmp	.+4      	; 0x133c <vfprintf+0x170>
    1338:	6f ef       	ldi	r22, 0xFF	; 255
    133a:	7f ef       	ldi	r23, 0xFF	; 255
    133c:	c5 01       	movw	r24, r10
    133e:	4e d1       	rcall	.+668    	; 0x15dc <strnlen>
    1340:	4c 01       	movw	r8, r24
    1342:	82 01       	movw	r16, r4
    1344:	f3 2d       	mov	r31, r3
    1346:	ff 77       	andi	r31, 0x7F	; 127
    1348:	3f 2e       	mov	r3, r31
    134a:	15 c0       	rjmp	.+42     	; 0x1376 <vfprintf+0x1aa>
    134c:	28 01       	movw	r4, r16
    134e:	22 e0       	ldi	r18, 0x02	; 2
    1350:	42 0e       	add	r4, r18
    1352:	51 1c       	adc	r5, r1
    1354:	f8 01       	movw	r30, r16
    1356:	a0 80       	ld	r10, Z
    1358:	b1 80       	ldd	r11, Z+1	; 0x01
    135a:	36 fe       	sbrs	r3, 6
    135c:	03 c0       	rjmp	.+6      	; 0x1364 <vfprintf+0x198>
    135e:	69 2d       	mov	r22, r9
    1360:	70 e0       	ldi	r23, 0x00	; 0
    1362:	02 c0       	rjmp	.+4      	; 0x1368 <vfprintf+0x19c>
    1364:	6f ef       	ldi	r22, 0xFF	; 255
    1366:	7f ef       	ldi	r23, 0xFF	; 255
    1368:	c5 01       	movw	r24, r10
    136a:	2d d1       	rcall	.+602    	; 0x15c6 <strnlen_P>
    136c:	4c 01       	movw	r8, r24
    136e:	f3 2d       	mov	r31, r3
    1370:	f0 68       	ori	r31, 0x80	; 128
    1372:	3f 2e       	mov	r3, r31
    1374:	82 01       	movw	r16, r4
    1376:	33 fc       	sbrc	r3, 3
    1378:	19 c0       	rjmp	.+50     	; 0x13ac <vfprintf+0x1e0>
    137a:	82 2d       	mov	r24, r2
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	88 16       	cp	r8, r24
    1380:	99 06       	cpc	r9, r25
    1382:	a0 f4       	brcc	.+40     	; 0x13ac <vfprintf+0x1e0>
    1384:	b6 01       	movw	r22, r12
    1386:	80 e2       	ldi	r24, 0x20	; 32
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	33 d1       	rcall	.+614    	; 0x15f2 <fputc>
    138c:	2a 94       	dec	r2
    138e:	f5 cf       	rjmp	.-22     	; 0x137a <vfprintf+0x1ae>
    1390:	f5 01       	movw	r30, r10
    1392:	37 fc       	sbrc	r3, 7
    1394:	85 91       	lpm	r24, Z+
    1396:	37 fe       	sbrs	r3, 7
    1398:	81 91       	ld	r24, Z+
    139a:	5f 01       	movw	r10, r30
    139c:	b6 01       	movw	r22, r12
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	28 d1       	rcall	.+592    	; 0x15f2 <fputc>
    13a2:	21 10       	cpse	r2, r1
    13a4:	2a 94       	dec	r2
    13a6:	21 e0       	ldi	r18, 0x01	; 1
    13a8:	82 1a       	sub	r8, r18
    13aa:	91 08       	sbc	r9, r1
    13ac:	81 14       	cp	r8, r1
    13ae:	91 04       	cpc	r9, r1
    13b0:	79 f7       	brne	.-34     	; 0x1390 <vfprintf+0x1c4>
    13b2:	e1 c0       	rjmp	.+450    	; 0x1576 <vfprintf+0x3aa>
    13b4:	84 36       	cpi	r24, 0x64	; 100
    13b6:	11 f0       	breq	.+4      	; 0x13bc <vfprintf+0x1f0>
    13b8:	89 36       	cpi	r24, 0x69	; 105
    13ba:	39 f5       	brne	.+78     	; 0x140a <vfprintf+0x23e>
    13bc:	f8 01       	movw	r30, r16
    13be:	37 fe       	sbrs	r3, 7
    13c0:	07 c0       	rjmp	.+14     	; 0x13d0 <vfprintf+0x204>
    13c2:	60 81       	ld	r22, Z
    13c4:	71 81       	ldd	r23, Z+1	; 0x01
    13c6:	82 81       	ldd	r24, Z+2	; 0x02
    13c8:	93 81       	ldd	r25, Z+3	; 0x03
    13ca:	0c 5f       	subi	r16, 0xFC	; 252
    13cc:	1f 4f       	sbci	r17, 0xFF	; 255
    13ce:	08 c0       	rjmp	.+16     	; 0x13e0 <vfprintf+0x214>
    13d0:	60 81       	ld	r22, Z
    13d2:	71 81       	ldd	r23, Z+1	; 0x01
    13d4:	07 2e       	mov	r0, r23
    13d6:	00 0c       	add	r0, r0
    13d8:	88 0b       	sbc	r24, r24
    13da:	99 0b       	sbc	r25, r25
    13dc:	0e 5f       	subi	r16, 0xFE	; 254
    13de:	1f 4f       	sbci	r17, 0xFF	; 255
    13e0:	f3 2d       	mov	r31, r3
    13e2:	ff 76       	andi	r31, 0x6F	; 111
    13e4:	3f 2e       	mov	r3, r31
    13e6:	97 ff       	sbrs	r25, 7
    13e8:	09 c0       	rjmp	.+18     	; 0x13fc <vfprintf+0x230>
    13ea:	90 95       	com	r25
    13ec:	80 95       	com	r24
    13ee:	70 95       	com	r23
    13f0:	61 95       	neg	r22
    13f2:	7f 4f       	sbci	r23, 0xFF	; 255
    13f4:	8f 4f       	sbci	r24, 0xFF	; 255
    13f6:	9f 4f       	sbci	r25, 0xFF	; 255
    13f8:	f0 68       	ori	r31, 0x80	; 128
    13fa:	3f 2e       	mov	r3, r31
    13fc:	2a e0       	ldi	r18, 0x0A	; 10
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	a3 01       	movw	r20, r6
    1402:	33 d1       	rcall	.+614    	; 0x166a <__ultoa_invert>
    1404:	88 2e       	mov	r8, r24
    1406:	86 18       	sub	r8, r6
    1408:	44 c0       	rjmp	.+136    	; 0x1492 <vfprintf+0x2c6>
    140a:	85 37       	cpi	r24, 0x75	; 117
    140c:	31 f4       	brne	.+12     	; 0x141a <vfprintf+0x24e>
    140e:	23 2d       	mov	r18, r3
    1410:	2f 7e       	andi	r18, 0xEF	; 239
    1412:	b2 2e       	mov	r11, r18
    1414:	2a e0       	ldi	r18, 0x0A	; 10
    1416:	30 e0       	ldi	r19, 0x00	; 0
    1418:	25 c0       	rjmp	.+74     	; 0x1464 <vfprintf+0x298>
    141a:	93 2d       	mov	r25, r3
    141c:	99 7f       	andi	r25, 0xF9	; 249
    141e:	b9 2e       	mov	r11, r25
    1420:	8f 36       	cpi	r24, 0x6F	; 111
    1422:	c1 f0       	breq	.+48     	; 0x1454 <vfprintf+0x288>
    1424:	18 f4       	brcc	.+6      	; 0x142c <vfprintf+0x260>
    1426:	88 35       	cpi	r24, 0x58	; 88
    1428:	79 f0       	breq	.+30     	; 0x1448 <vfprintf+0x27c>
    142a:	ae c0       	rjmp	.+348    	; 0x1588 <vfprintf+0x3bc>
    142c:	80 37       	cpi	r24, 0x70	; 112
    142e:	19 f0       	breq	.+6      	; 0x1436 <vfprintf+0x26a>
    1430:	88 37       	cpi	r24, 0x78	; 120
    1432:	21 f0       	breq	.+8      	; 0x143c <vfprintf+0x270>
    1434:	a9 c0       	rjmp	.+338    	; 0x1588 <vfprintf+0x3bc>
    1436:	e9 2f       	mov	r30, r25
    1438:	e0 61       	ori	r30, 0x10	; 16
    143a:	be 2e       	mov	r11, r30
    143c:	b4 fe       	sbrs	r11, 4
    143e:	0d c0       	rjmp	.+26     	; 0x145a <vfprintf+0x28e>
    1440:	fb 2d       	mov	r31, r11
    1442:	f4 60       	ori	r31, 0x04	; 4
    1444:	bf 2e       	mov	r11, r31
    1446:	09 c0       	rjmp	.+18     	; 0x145a <vfprintf+0x28e>
    1448:	34 fe       	sbrs	r3, 4
    144a:	0a c0       	rjmp	.+20     	; 0x1460 <vfprintf+0x294>
    144c:	29 2f       	mov	r18, r25
    144e:	26 60       	ori	r18, 0x06	; 6
    1450:	b2 2e       	mov	r11, r18
    1452:	06 c0       	rjmp	.+12     	; 0x1460 <vfprintf+0x294>
    1454:	28 e0       	ldi	r18, 0x08	; 8
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	05 c0       	rjmp	.+10     	; 0x1464 <vfprintf+0x298>
    145a:	20 e1       	ldi	r18, 0x10	; 16
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	02 c0       	rjmp	.+4      	; 0x1464 <vfprintf+0x298>
    1460:	20 e1       	ldi	r18, 0x10	; 16
    1462:	32 e0       	ldi	r19, 0x02	; 2
    1464:	f8 01       	movw	r30, r16
    1466:	b7 fe       	sbrs	r11, 7
    1468:	07 c0       	rjmp	.+14     	; 0x1478 <vfprintf+0x2ac>
    146a:	60 81       	ld	r22, Z
    146c:	71 81       	ldd	r23, Z+1	; 0x01
    146e:	82 81       	ldd	r24, Z+2	; 0x02
    1470:	93 81       	ldd	r25, Z+3	; 0x03
    1472:	0c 5f       	subi	r16, 0xFC	; 252
    1474:	1f 4f       	sbci	r17, 0xFF	; 255
    1476:	06 c0       	rjmp	.+12     	; 0x1484 <vfprintf+0x2b8>
    1478:	60 81       	ld	r22, Z
    147a:	71 81       	ldd	r23, Z+1	; 0x01
    147c:	80 e0       	ldi	r24, 0x00	; 0
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	0e 5f       	subi	r16, 0xFE	; 254
    1482:	1f 4f       	sbci	r17, 0xFF	; 255
    1484:	a3 01       	movw	r20, r6
    1486:	f1 d0       	rcall	.+482    	; 0x166a <__ultoa_invert>
    1488:	88 2e       	mov	r8, r24
    148a:	86 18       	sub	r8, r6
    148c:	fb 2d       	mov	r31, r11
    148e:	ff 77       	andi	r31, 0x7F	; 127
    1490:	3f 2e       	mov	r3, r31
    1492:	36 fe       	sbrs	r3, 6
    1494:	0d c0       	rjmp	.+26     	; 0x14b0 <vfprintf+0x2e4>
    1496:	23 2d       	mov	r18, r3
    1498:	2e 7f       	andi	r18, 0xFE	; 254
    149a:	a2 2e       	mov	r10, r18
    149c:	89 14       	cp	r8, r9
    149e:	58 f4       	brcc	.+22     	; 0x14b6 <vfprintf+0x2ea>
    14a0:	34 fe       	sbrs	r3, 4
    14a2:	0b c0       	rjmp	.+22     	; 0x14ba <vfprintf+0x2ee>
    14a4:	32 fc       	sbrc	r3, 2
    14a6:	09 c0       	rjmp	.+18     	; 0x14ba <vfprintf+0x2ee>
    14a8:	83 2d       	mov	r24, r3
    14aa:	8e 7e       	andi	r24, 0xEE	; 238
    14ac:	a8 2e       	mov	r10, r24
    14ae:	05 c0       	rjmp	.+10     	; 0x14ba <vfprintf+0x2ee>
    14b0:	b8 2c       	mov	r11, r8
    14b2:	a3 2c       	mov	r10, r3
    14b4:	03 c0       	rjmp	.+6      	; 0x14bc <vfprintf+0x2f0>
    14b6:	b8 2c       	mov	r11, r8
    14b8:	01 c0       	rjmp	.+2      	; 0x14bc <vfprintf+0x2f0>
    14ba:	b9 2c       	mov	r11, r9
    14bc:	a4 fe       	sbrs	r10, 4
    14be:	0f c0       	rjmp	.+30     	; 0x14de <vfprintf+0x312>
    14c0:	fe 01       	movw	r30, r28
    14c2:	e8 0d       	add	r30, r8
    14c4:	f1 1d       	adc	r31, r1
    14c6:	80 81       	ld	r24, Z
    14c8:	80 33       	cpi	r24, 0x30	; 48
    14ca:	21 f4       	brne	.+8      	; 0x14d4 <vfprintf+0x308>
    14cc:	9a 2d       	mov	r25, r10
    14ce:	99 7e       	andi	r25, 0xE9	; 233
    14d0:	a9 2e       	mov	r10, r25
    14d2:	09 c0       	rjmp	.+18     	; 0x14e6 <vfprintf+0x31a>
    14d4:	a2 fe       	sbrs	r10, 2
    14d6:	06 c0       	rjmp	.+12     	; 0x14e4 <vfprintf+0x318>
    14d8:	b3 94       	inc	r11
    14da:	b3 94       	inc	r11
    14dc:	04 c0       	rjmp	.+8      	; 0x14e6 <vfprintf+0x31a>
    14de:	8a 2d       	mov	r24, r10
    14e0:	86 78       	andi	r24, 0x86	; 134
    14e2:	09 f0       	breq	.+2      	; 0x14e6 <vfprintf+0x31a>
    14e4:	b3 94       	inc	r11
    14e6:	a3 fc       	sbrc	r10, 3
    14e8:	10 c0       	rjmp	.+32     	; 0x150a <vfprintf+0x33e>
    14ea:	a0 fe       	sbrs	r10, 0
    14ec:	06 c0       	rjmp	.+12     	; 0x14fa <vfprintf+0x32e>
    14ee:	b2 14       	cp	r11, r2
    14f0:	80 f4       	brcc	.+32     	; 0x1512 <vfprintf+0x346>
    14f2:	28 0c       	add	r2, r8
    14f4:	92 2c       	mov	r9, r2
    14f6:	9b 18       	sub	r9, r11
    14f8:	0d c0       	rjmp	.+26     	; 0x1514 <vfprintf+0x348>
    14fa:	b2 14       	cp	r11, r2
    14fc:	58 f4       	brcc	.+22     	; 0x1514 <vfprintf+0x348>
    14fe:	b6 01       	movw	r22, r12
    1500:	80 e2       	ldi	r24, 0x20	; 32
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	76 d0       	rcall	.+236    	; 0x15f2 <fputc>
    1506:	b3 94       	inc	r11
    1508:	f8 cf       	rjmp	.-16     	; 0x14fa <vfprintf+0x32e>
    150a:	b2 14       	cp	r11, r2
    150c:	18 f4       	brcc	.+6      	; 0x1514 <vfprintf+0x348>
    150e:	2b 18       	sub	r2, r11
    1510:	02 c0       	rjmp	.+4      	; 0x1516 <vfprintf+0x34a>
    1512:	98 2c       	mov	r9, r8
    1514:	21 2c       	mov	r2, r1
    1516:	a4 fe       	sbrs	r10, 4
    1518:	0f c0       	rjmp	.+30     	; 0x1538 <vfprintf+0x36c>
    151a:	b6 01       	movw	r22, r12
    151c:	80 e3       	ldi	r24, 0x30	; 48
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	68 d0       	rcall	.+208    	; 0x15f2 <fputc>
    1522:	a2 fe       	sbrs	r10, 2
    1524:	16 c0       	rjmp	.+44     	; 0x1552 <vfprintf+0x386>
    1526:	a1 fc       	sbrc	r10, 1
    1528:	03 c0       	rjmp	.+6      	; 0x1530 <vfprintf+0x364>
    152a:	88 e7       	ldi	r24, 0x78	; 120
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	02 c0       	rjmp	.+4      	; 0x1534 <vfprintf+0x368>
    1530:	88 e5       	ldi	r24, 0x58	; 88
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	b6 01       	movw	r22, r12
    1536:	0c c0       	rjmp	.+24     	; 0x1550 <vfprintf+0x384>
    1538:	8a 2d       	mov	r24, r10
    153a:	86 78       	andi	r24, 0x86	; 134
    153c:	51 f0       	breq	.+20     	; 0x1552 <vfprintf+0x386>
    153e:	a1 fe       	sbrs	r10, 1
    1540:	02 c0       	rjmp	.+4      	; 0x1546 <vfprintf+0x37a>
    1542:	8b e2       	ldi	r24, 0x2B	; 43
    1544:	01 c0       	rjmp	.+2      	; 0x1548 <vfprintf+0x37c>
    1546:	80 e2       	ldi	r24, 0x20	; 32
    1548:	a7 fc       	sbrc	r10, 7
    154a:	8d e2       	ldi	r24, 0x2D	; 45
    154c:	b6 01       	movw	r22, r12
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	50 d0       	rcall	.+160    	; 0x15f2 <fputc>
    1552:	89 14       	cp	r8, r9
    1554:	30 f4       	brcc	.+12     	; 0x1562 <vfprintf+0x396>
    1556:	b6 01       	movw	r22, r12
    1558:	80 e3       	ldi	r24, 0x30	; 48
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	4a d0       	rcall	.+148    	; 0x15f2 <fputc>
    155e:	9a 94       	dec	r9
    1560:	f8 cf       	rjmp	.-16     	; 0x1552 <vfprintf+0x386>
    1562:	8a 94       	dec	r8
    1564:	f3 01       	movw	r30, r6
    1566:	e8 0d       	add	r30, r8
    1568:	f1 1d       	adc	r31, r1
    156a:	80 81       	ld	r24, Z
    156c:	b6 01       	movw	r22, r12
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	40 d0       	rcall	.+128    	; 0x15f2 <fputc>
    1572:	81 10       	cpse	r8, r1
    1574:	f6 cf       	rjmp	.-20     	; 0x1562 <vfprintf+0x396>
    1576:	22 20       	and	r2, r2
    1578:	09 f4       	brne	.+2      	; 0x157c <vfprintf+0x3b0>
    157a:	4e ce       	rjmp	.-868    	; 0x1218 <vfprintf+0x4c>
    157c:	b6 01       	movw	r22, r12
    157e:	80 e2       	ldi	r24, 0x20	; 32
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	37 d0       	rcall	.+110    	; 0x15f2 <fputc>
    1584:	2a 94       	dec	r2
    1586:	f7 cf       	rjmp	.-18     	; 0x1576 <vfprintf+0x3aa>
    1588:	f6 01       	movw	r30, r12
    158a:	86 81       	ldd	r24, Z+6	; 0x06
    158c:	97 81       	ldd	r25, Z+7	; 0x07
    158e:	02 c0       	rjmp	.+4      	; 0x1594 <vfprintf+0x3c8>
    1590:	8f ef       	ldi	r24, 0xFF	; 255
    1592:	9f ef       	ldi	r25, 0xFF	; 255
    1594:	2b 96       	adiw	r28, 0x0b	; 11
    1596:	0f b6       	in	r0, 0x3f	; 63
    1598:	f8 94       	cli
    159a:	de bf       	out	0x3e, r29	; 62
    159c:	0f be       	out	0x3f, r0	; 63
    159e:	cd bf       	out	0x3d, r28	; 61
    15a0:	df 91       	pop	r29
    15a2:	cf 91       	pop	r28
    15a4:	1f 91       	pop	r17
    15a6:	0f 91       	pop	r16
    15a8:	ff 90       	pop	r15
    15aa:	ef 90       	pop	r14
    15ac:	df 90       	pop	r13
    15ae:	cf 90       	pop	r12
    15b0:	bf 90       	pop	r11
    15b2:	af 90       	pop	r10
    15b4:	9f 90       	pop	r9
    15b6:	8f 90       	pop	r8
    15b8:	7f 90       	pop	r7
    15ba:	6f 90       	pop	r6
    15bc:	5f 90       	pop	r5
    15be:	4f 90       	pop	r4
    15c0:	3f 90       	pop	r3
    15c2:	2f 90       	pop	r2
    15c4:	08 95       	ret

000015c6 <strnlen_P>:
    15c6:	fc 01       	movw	r30, r24
    15c8:	05 90       	lpm	r0, Z+
    15ca:	61 50       	subi	r22, 0x01	; 1
    15cc:	70 40       	sbci	r23, 0x00	; 0
    15ce:	01 10       	cpse	r0, r1
    15d0:	d8 f7       	brcc	.-10     	; 0x15c8 <strnlen_P+0x2>
    15d2:	80 95       	com	r24
    15d4:	90 95       	com	r25
    15d6:	8e 0f       	add	r24, r30
    15d8:	9f 1f       	adc	r25, r31
    15da:	08 95       	ret

000015dc <strnlen>:
    15dc:	fc 01       	movw	r30, r24
    15de:	61 50       	subi	r22, 0x01	; 1
    15e0:	70 40       	sbci	r23, 0x00	; 0
    15e2:	01 90       	ld	r0, Z+
    15e4:	01 10       	cpse	r0, r1
    15e6:	d8 f7       	brcc	.-10     	; 0x15de <strnlen+0x2>
    15e8:	80 95       	com	r24
    15ea:	90 95       	com	r25
    15ec:	8e 0f       	add	r24, r30
    15ee:	9f 1f       	adc	r25, r31
    15f0:	08 95       	ret

000015f2 <fputc>:
    15f2:	0f 93       	push	r16
    15f4:	1f 93       	push	r17
    15f6:	cf 93       	push	r28
    15f8:	df 93       	push	r29
    15fa:	fb 01       	movw	r30, r22
    15fc:	23 81       	ldd	r18, Z+3	; 0x03
    15fe:	21 fd       	sbrc	r18, 1
    1600:	03 c0       	rjmp	.+6      	; 0x1608 <fputc+0x16>
    1602:	8f ef       	ldi	r24, 0xFF	; 255
    1604:	9f ef       	ldi	r25, 0xFF	; 255
    1606:	2c c0       	rjmp	.+88     	; 0x1660 <fputc+0x6e>
    1608:	22 ff       	sbrs	r18, 2
    160a:	16 c0       	rjmp	.+44     	; 0x1638 <fputc+0x46>
    160c:	46 81       	ldd	r20, Z+6	; 0x06
    160e:	57 81       	ldd	r21, Z+7	; 0x07
    1610:	24 81       	ldd	r18, Z+4	; 0x04
    1612:	35 81       	ldd	r19, Z+5	; 0x05
    1614:	42 17       	cp	r20, r18
    1616:	53 07       	cpc	r21, r19
    1618:	44 f4       	brge	.+16     	; 0x162a <fputc+0x38>
    161a:	a0 81       	ld	r26, Z
    161c:	b1 81       	ldd	r27, Z+1	; 0x01
    161e:	9d 01       	movw	r18, r26
    1620:	2f 5f       	subi	r18, 0xFF	; 255
    1622:	3f 4f       	sbci	r19, 0xFF	; 255
    1624:	31 83       	std	Z+1, r19	; 0x01
    1626:	20 83       	st	Z, r18
    1628:	8c 93       	st	X, r24
    162a:	26 81       	ldd	r18, Z+6	; 0x06
    162c:	37 81       	ldd	r19, Z+7	; 0x07
    162e:	2f 5f       	subi	r18, 0xFF	; 255
    1630:	3f 4f       	sbci	r19, 0xFF	; 255
    1632:	37 83       	std	Z+7, r19	; 0x07
    1634:	26 83       	std	Z+6, r18	; 0x06
    1636:	14 c0       	rjmp	.+40     	; 0x1660 <fputc+0x6e>
    1638:	8b 01       	movw	r16, r22
    163a:	ec 01       	movw	r28, r24
    163c:	fb 01       	movw	r30, r22
    163e:	00 84       	ldd	r0, Z+8	; 0x08
    1640:	f1 85       	ldd	r31, Z+9	; 0x09
    1642:	e0 2d       	mov	r30, r0
    1644:	19 95       	eicall
    1646:	89 2b       	or	r24, r25
    1648:	e1 f6       	brne	.-72     	; 0x1602 <fputc+0x10>
    164a:	d8 01       	movw	r26, r16
    164c:	16 96       	adiw	r26, 0x06	; 6
    164e:	8d 91       	ld	r24, X+
    1650:	9c 91       	ld	r25, X
    1652:	17 97       	sbiw	r26, 0x07	; 7
    1654:	01 96       	adiw	r24, 0x01	; 1
    1656:	17 96       	adiw	r26, 0x07	; 7
    1658:	9c 93       	st	X, r25
    165a:	8e 93       	st	-X, r24
    165c:	16 97       	sbiw	r26, 0x06	; 6
    165e:	ce 01       	movw	r24, r28
    1660:	df 91       	pop	r29
    1662:	cf 91       	pop	r28
    1664:	1f 91       	pop	r17
    1666:	0f 91       	pop	r16
    1668:	08 95       	ret

0000166a <__ultoa_invert>:
    166a:	fa 01       	movw	r30, r20
    166c:	aa 27       	eor	r26, r26
    166e:	28 30       	cpi	r18, 0x08	; 8
    1670:	51 f1       	breq	.+84     	; 0x16c6 <__ultoa_invert+0x5c>
    1672:	20 31       	cpi	r18, 0x10	; 16
    1674:	81 f1       	breq	.+96     	; 0x16d6 <__ultoa_invert+0x6c>
    1676:	e8 94       	clt
    1678:	6f 93       	push	r22
    167a:	6e 7f       	andi	r22, 0xFE	; 254
    167c:	6e 5f       	subi	r22, 0xFE	; 254
    167e:	7f 4f       	sbci	r23, 0xFF	; 255
    1680:	8f 4f       	sbci	r24, 0xFF	; 255
    1682:	9f 4f       	sbci	r25, 0xFF	; 255
    1684:	af 4f       	sbci	r26, 0xFF	; 255
    1686:	b1 e0       	ldi	r27, 0x01	; 1
    1688:	3e d0       	rcall	.+124    	; 0x1706 <__ultoa_invert+0x9c>
    168a:	b4 e0       	ldi	r27, 0x04	; 4
    168c:	3c d0       	rcall	.+120    	; 0x1706 <__ultoa_invert+0x9c>
    168e:	67 0f       	add	r22, r23
    1690:	78 1f       	adc	r23, r24
    1692:	89 1f       	adc	r24, r25
    1694:	9a 1f       	adc	r25, r26
    1696:	a1 1d       	adc	r26, r1
    1698:	68 0f       	add	r22, r24
    169a:	79 1f       	adc	r23, r25
    169c:	8a 1f       	adc	r24, r26
    169e:	91 1d       	adc	r25, r1
    16a0:	a1 1d       	adc	r26, r1
    16a2:	6a 0f       	add	r22, r26
    16a4:	71 1d       	adc	r23, r1
    16a6:	81 1d       	adc	r24, r1
    16a8:	91 1d       	adc	r25, r1
    16aa:	a1 1d       	adc	r26, r1
    16ac:	20 d0       	rcall	.+64     	; 0x16ee <__ultoa_invert+0x84>
    16ae:	09 f4       	brne	.+2      	; 0x16b2 <__ultoa_invert+0x48>
    16b0:	68 94       	set
    16b2:	3f 91       	pop	r19
    16b4:	2a e0       	ldi	r18, 0x0A	; 10
    16b6:	26 9f       	mul	r18, r22
    16b8:	11 24       	eor	r1, r1
    16ba:	30 19       	sub	r19, r0
    16bc:	30 5d       	subi	r19, 0xD0	; 208
    16be:	31 93       	st	Z+, r19
    16c0:	de f6       	brtc	.-74     	; 0x1678 <__ultoa_invert+0xe>
    16c2:	cf 01       	movw	r24, r30
    16c4:	08 95       	ret
    16c6:	46 2f       	mov	r20, r22
    16c8:	47 70       	andi	r20, 0x07	; 7
    16ca:	40 5d       	subi	r20, 0xD0	; 208
    16cc:	41 93       	st	Z+, r20
    16ce:	b3 e0       	ldi	r27, 0x03	; 3
    16d0:	0f d0       	rcall	.+30     	; 0x16f0 <__ultoa_invert+0x86>
    16d2:	c9 f7       	brne	.-14     	; 0x16c6 <__ultoa_invert+0x5c>
    16d4:	f6 cf       	rjmp	.-20     	; 0x16c2 <__ultoa_invert+0x58>
    16d6:	46 2f       	mov	r20, r22
    16d8:	4f 70       	andi	r20, 0x0F	; 15
    16da:	40 5d       	subi	r20, 0xD0	; 208
    16dc:	4a 33       	cpi	r20, 0x3A	; 58
    16de:	18 f0       	brcs	.+6      	; 0x16e6 <__ultoa_invert+0x7c>
    16e0:	49 5d       	subi	r20, 0xD9	; 217
    16e2:	31 fd       	sbrc	r19, 1
    16e4:	40 52       	subi	r20, 0x20	; 32
    16e6:	41 93       	st	Z+, r20
    16e8:	02 d0       	rcall	.+4      	; 0x16ee <__ultoa_invert+0x84>
    16ea:	a9 f7       	brne	.-22     	; 0x16d6 <__ultoa_invert+0x6c>
    16ec:	ea cf       	rjmp	.-44     	; 0x16c2 <__ultoa_invert+0x58>
    16ee:	b4 e0       	ldi	r27, 0x04	; 4
    16f0:	a6 95       	lsr	r26
    16f2:	97 95       	ror	r25
    16f4:	87 95       	ror	r24
    16f6:	77 95       	ror	r23
    16f8:	67 95       	ror	r22
    16fa:	ba 95       	dec	r27
    16fc:	c9 f7       	brne	.-14     	; 0x16f0 <__ultoa_invert+0x86>
    16fe:	00 97       	sbiw	r24, 0x00	; 0
    1700:	61 05       	cpc	r22, r1
    1702:	71 05       	cpc	r23, r1
    1704:	08 95       	ret
    1706:	9b 01       	movw	r18, r22
    1708:	ac 01       	movw	r20, r24
    170a:	0a 2e       	mov	r0, r26
    170c:	06 94       	lsr	r0
    170e:	57 95       	ror	r21
    1710:	47 95       	ror	r20
    1712:	37 95       	ror	r19
    1714:	27 95       	ror	r18
    1716:	ba 95       	dec	r27
    1718:	c9 f7       	brne	.-14     	; 0x170c <__ultoa_invert+0xa2>
    171a:	62 0f       	add	r22, r18
    171c:	73 1f       	adc	r23, r19
    171e:	84 1f       	adc	r24, r20
    1720:	95 1f       	adc	r25, r21
    1722:	a0 1d       	adc	r26, r0
    1724:	08 95       	ret

00001726 <_exit>:
    1726:	f8 94       	cli

00001728 <__stop_program>:
    1728:	ff cf       	rjmp	.-2      	; 0x1728 <__stop_program>
