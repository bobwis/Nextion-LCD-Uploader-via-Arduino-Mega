
async serial transfer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000120  00800200  00001788  0000181c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001788  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000198  00800320  00800320  0000193c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000193c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001998  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002c8  00000000  00000000  000019d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000307d  00000000  00000000  00001ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000133a  00000000  00000000  00004d1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000016e3  00000000  00000000  00006057  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000760  00000000  00000000  0000773c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001089  00000000  00000000  00007e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000016ab  00000000  00000000  00008f25  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000248  00000000  00000000  0000a5d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	8f c0       	rjmp	.+286    	; 0x124 <__bad_interrupt>
       6:	00 00       	nop
       8:	8d c0       	rjmp	.+282    	; 0x124 <__bad_interrupt>
       a:	00 00       	nop
       c:	8b c0       	rjmp	.+278    	; 0x124 <__bad_interrupt>
       e:	00 00       	nop
      10:	89 c0       	rjmp	.+274    	; 0x124 <__bad_interrupt>
      12:	00 00       	nop
      14:	87 c0       	rjmp	.+270    	; 0x124 <__bad_interrupt>
      16:	00 00       	nop
      18:	85 c0       	rjmp	.+266    	; 0x124 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	83 c0       	rjmp	.+262    	; 0x124 <__bad_interrupt>
      1e:	00 00       	nop
      20:	81 c0       	rjmp	.+258    	; 0x124 <__bad_interrupt>
      22:	00 00       	nop
      24:	7f c0       	rjmp	.+254    	; 0x124 <__bad_interrupt>
      26:	00 00       	nop
      28:	7d c0       	rjmp	.+250    	; 0x124 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7b c0       	rjmp	.+246    	; 0x124 <__bad_interrupt>
      2e:	00 00       	nop
      30:	79 c0       	rjmp	.+242    	; 0x124 <__bad_interrupt>
      32:	00 00       	nop
      34:	77 c0       	rjmp	.+238    	; 0x124 <__bad_interrupt>
      36:	00 00       	nop
      38:	75 c0       	rjmp	.+234    	; 0x124 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	73 c0       	rjmp	.+230    	; 0x124 <__bad_interrupt>
      3e:	00 00       	nop
      40:	71 c0       	rjmp	.+226    	; 0x124 <__bad_interrupt>
      42:	00 00       	nop
      44:	72 c0       	rjmp	.+228    	; 0x12a <__vector_17>
      46:	00 00       	nop
      48:	6d c0       	rjmp	.+218    	; 0x124 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6b c0       	rjmp	.+214    	; 0x124 <__bad_interrupt>
      4e:	00 00       	nop
      50:	69 c0       	rjmp	.+210    	; 0x124 <__bad_interrupt>
      52:	00 00       	nop
      54:	67 c0       	rjmp	.+206    	; 0x124 <__bad_interrupt>
      56:	00 00       	nop
      58:	65 c0       	rjmp	.+202    	; 0x124 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	63 c0       	rjmp	.+198    	; 0x124 <__bad_interrupt>
      5e:	00 00       	nop
      60:	61 c0       	rjmp	.+194    	; 0x124 <__bad_interrupt>
      62:	00 00       	nop
      64:	1c c6       	rjmp	.+3128   	; 0xc9e <__vector_25>
      66:	00 00       	nop
      68:	43 c6       	rjmp	.+3206   	; 0xcf0 <__vector_26>
      6a:	00 00       	nop
      6c:	5b c0       	rjmp	.+182    	; 0x124 <__bad_interrupt>
      6e:	00 00       	nop
      70:	59 c0       	rjmp	.+178    	; 0x124 <__bad_interrupt>
      72:	00 00       	nop
      74:	57 c0       	rjmp	.+174    	; 0x124 <__bad_interrupt>
      76:	00 00       	nop
      78:	55 c0       	rjmp	.+170    	; 0x124 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	53 c0       	rjmp	.+166    	; 0x124 <__bad_interrupt>
      7e:	00 00       	nop
      80:	51 c0       	rjmp	.+162    	; 0x124 <__bad_interrupt>
      82:	00 00       	nop
      84:	4f c0       	rjmp	.+158    	; 0x124 <__bad_interrupt>
      86:	00 00       	nop
      88:	4d c0       	rjmp	.+154    	; 0x124 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4b c0       	rjmp	.+150    	; 0x124 <__bad_interrupt>
      8e:	00 00       	nop
      90:	bd c6       	rjmp	.+3450   	; 0xe0c <__vector_36>
      92:	00 00       	nop
      94:	e4 c6       	rjmp	.+3528   	; 0xe5e <__vector_37>
      96:	00 00       	nop
      98:	45 c0       	rjmp	.+138    	; 0x124 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	43 c0       	rjmp	.+134    	; 0x124 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	41 c0       	rjmp	.+130    	; 0x124 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3f c0       	rjmp	.+126    	; 0x124 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3d c0       	rjmp	.+122    	; 0x124 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3b c0       	rjmp	.+118    	; 0x124 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	39 c0       	rjmp	.+114    	; 0x124 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	37 c0       	rjmp	.+110    	; 0x124 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	35 c0       	rjmp	.+106    	; 0x124 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	33 c0       	rjmp	.+102    	; 0x124 <__bad_interrupt>
      be:	00 00       	nop
      c0:	31 c0       	rjmp	.+98     	; 0x124 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2f c0       	rjmp	.+94     	; 0x124 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2d c0       	rjmp	.+90     	; 0x124 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	17 c7       	rjmp	.+3630   	; 0xefc <__vector_51>
      ce:	00 00       	nop
      d0:	3e c7       	rjmp	.+3708   	; 0xf4e <__vector_52>
      d2:	00 00       	nop
      d4:	27 c0       	rjmp	.+78     	; 0x124 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	c8 c7       	rjmp	.+3984   	; 0x106a <__vector_54>
      da:	00 00       	nop
      dc:	ef c7       	rjmp	.+4062   	; 0x10bc <__vector_55>
      de:	00 00       	nop
      e0:	21 c0       	rjmp	.+66     	; 0x124 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	13 e0       	ldi	r17, 0x03	; 3
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e8 e8       	ldi	r30, 0x88	; 136
      fc:	f7 e1       	ldi	r31, 0x17	; 23
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a0 32       	cpi	r26, 0x20	; 32
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	24 e0       	ldi	r18, 0x04	; 4
     110:	a0 e2       	ldi	r26, 0x20	; 32
     112:	b3 e0       	ldi	r27, 0x03	; 3
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a8 3b       	cpi	r26, 0xB8	; 184
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	87 d4       	rcall	.+2318   	; 0xa2e <main>
     120:	0c 94 c2 0b 	jmp	0x1784	; 0x1784 <_exit>

00000124 <__bad_interrupt>:
     124:	6d cf       	rjmp	.-294    	; 0x0 <__vectors>

00000126 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
**/
void atmel_start_init(void)
{
     126:	48 c5       	rjmp	.+2704   	; 0xbb8 <system_init>
     128:	08 95       	ret

0000012a <__vector_17>:
#include <compiler.h>

volatile uint64_t msectimer0 = 0;

ISR(TIMER1_COMPA_vect)
{
     12a:	1f 92       	push	r1
     12c:	0f 92       	push	r0
     12e:	0f b6       	in	r0, 0x3f	; 63
     130:	0f 92       	push	r0
     132:	11 24       	eor	r1, r1
     134:	2f 93       	push	r18
     136:	3f 93       	push	r19
     138:	4f 93       	push	r20
     13a:	5f 93       	push	r21
     13c:	6f 93       	push	r22
     13e:	7f 93       	push	r23
     140:	8f 93       	push	r24
     142:	9f 93       	push	r25
     144:	af 93       	push	r26
	static uint16_t nextcmp = 0;

	nextcmp = nextcmp + 16000;
     146:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <__data_end>
     14a:	90 91 21 03 	lds	r25, 0x0321	; 0x800321 <__data_end+0x1>
     14e:	80 58       	subi	r24, 0x80	; 128
     150:	91 4c       	sbci	r25, 0xC1	; 193
     152:	90 93 21 03 	sts	0x0321, r25	; 0x800321 <__data_end+0x1>
     156:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <__data_end>
	OCR1AH = nextcmp >> 8 ;
     15a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
	OCR1AL = nextcmp & 0xff;
     15e:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <__data_end>
     162:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
	msectimer0++;
     166:	20 91 22 03 	lds	r18, 0x0322	; 0x800322 <msectimer0>
     16a:	30 91 23 03 	lds	r19, 0x0323	; 0x800323 <msectimer0+0x1>
     16e:	40 91 24 03 	lds	r20, 0x0324	; 0x800324 <msectimer0+0x2>
     172:	50 91 25 03 	lds	r21, 0x0325	; 0x800325 <msectimer0+0x3>
     176:	60 91 26 03 	lds	r22, 0x0326	; 0x800326 <msectimer0+0x4>
     17a:	70 91 27 03 	lds	r23, 0x0327	; 0x800327 <msectimer0+0x5>
     17e:	80 91 28 03 	lds	r24, 0x0328	; 0x800328 <msectimer0+0x6>
     182:	90 91 29 03 	lds	r25, 0x0329	; 0x800329 <msectimer0+0x7>
     186:	a1 e0       	ldi	r26, 0x01	; 1
     188:	0e 94 df 08 	call	0x11be	; 0x11be <__adddi3_s8>
     18c:	20 93 22 03 	sts	0x0322, r18	; 0x800322 <msectimer0>
     190:	30 93 23 03 	sts	0x0323, r19	; 0x800323 <msectimer0+0x1>
     194:	40 93 24 03 	sts	0x0324, r20	; 0x800324 <msectimer0+0x2>
     198:	50 93 25 03 	sts	0x0325, r21	; 0x800325 <msectimer0+0x3>
     19c:	60 93 26 03 	sts	0x0326, r22	; 0x800326 <msectimer0+0x4>
     1a0:	70 93 27 03 	sts	0x0327, r23	; 0x800327 <msectimer0+0x5>
     1a4:	80 93 28 03 	sts	0x0328, r24	; 0x800328 <msectimer0+0x6>
     1a8:	90 93 29 03 	sts	0x0329, r25	; 0x800329 <msectimer0+0x7>
	/* Insert your TIMER_0 compare channel A interrupt handling code here */
}
     1ac:	af 91       	pop	r26
     1ae:	9f 91       	pop	r25
     1b0:	8f 91       	pop	r24
     1b2:	7f 91       	pop	r23
     1b4:	6f 91       	pop	r22
     1b6:	5f 91       	pop	r21
     1b8:	4f 91       	pop	r20
     1ba:	3f 91       	pop	r19
     1bc:	2f 91       	pop	r18
     1be:	0f 90       	pop	r0
     1c0:	0f be       	out	0x3f, r0	; 63
     1c2:	0f 90       	pop	r0
     1c4:	1f 90       	pop	r1
     1c6:	18 95       	reti

000001c8 <delay_ms>:
		_delay_ms(1);
	}
}
#else
void delay_ms(uint16_t count)
{
     1c8:	6f 92       	push	r6
     1ca:	7f 92       	push	r7
     1cc:	8f 92       	push	r8
     1ce:	9f 92       	push	r9
     1d0:	af 92       	push	r10
     1d2:	bf 92       	push	r11
     1d4:	cf 92       	push	r12
     1d6:	df 92       	push	r13
     1d8:	ef 92       	push	r14
     1da:	ff 92       	push	r15
     1dc:	0f 93       	push	r16
     1de:	1f 93       	push	r17
     1e0:	cf 93       	push	r28
     1e2:	df 93       	push	r29
     1e4:	cd b7       	in	r28, 0x3d	; 61
     1e6:	de b7       	in	r29, 0x3e	; 62
     1e8:	60 97       	sbiw	r28, 0x10	; 16
     1ea:	0f b6       	in	r0, 0x3f	; 63
     1ec:	f8 94       	cli
     1ee:	de bf       	out	0x3e, r29	; 62
     1f0:	0f be       	out	0x3f, r0	; 63
     1f2:	cd bf       	out	0x3d, r28	; 61
	volatile uint64_t k,j;
	while(1) {
		cli();
     1f4:	f8 94       	cli
		j = msectimer0;
     1f6:	f0 91 22 03 	lds	r31, 0x0322	; 0x800322 <msectimer0>
     1fa:	e0 91 23 03 	lds	r30, 0x0323	; 0x800323 <msectimer0+0x1>
     1fe:	70 91 24 03 	lds	r23, 0x0324	; 0x800324 <msectimer0+0x2>
     202:	60 91 25 03 	lds	r22, 0x0325	; 0x800325 <msectimer0+0x3>
     206:	50 91 26 03 	lds	r21, 0x0326	; 0x800326 <msectimer0+0x4>
     20a:	40 91 27 03 	lds	r20, 0x0327	; 0x800327 <msectimer0+0x5>
     20e:	30 91 28 03 	lds	r19, 0x0328	; 0x800328 <msectimer0+0x6>
     212:	20 91 29 03 	lds	r18, 0x0329	; 0x800329 <msectimer0+0x7>
     216:	f9 87       	std	Y+9, r31	; 0x09
     218:	ea 87       	std	Y+10, r30	; 0x0a
     21a:	7b 87       	std	Y+11, r23	; 0x0b
     21c:	6c 87       	std	Y+12, r22	; 0x0c
     21e:	5d 87       	std	Y+13, r21	; 0x0d
     220:	4e 87       	std	Y+14, r20	; 0x0e
     222:	3f 87       	std	Y+15, r19	; 0x0f
     224:	28 8b       	std	Y+16, r18	; 0x10
		sei();
     226:	78 94       	sei
		k = j + (uint64_t)count;
     228:	69 84       	ldd	r6, Y+9	; 0x09
     22a:	7a 84       	ldd	r7, Y+10	; 0x0a
     22c:	bb 85       	ldd	r27, Y+11	; 0x0b
     22e:	ac 85       	ldd	r26, Y+12	; 0x0c
     230:	fd 85       	ldd	r31, Y+13	; 0x0d
     232:	ee 85       	ldd	r30, Y+14	; 0x0e
     234:	0f 85       	ldd	r16, Y+15	; 0x0f
     236:	18 89       	ldd	r17, Y+16	; 0x10
     238:	4c 01       	movw	r8, r24
     23a:	28 2f       	mov	r18, r24
     23c:	39 2d       	mov	r19, r9
     23e:	40 e0       	ldi	r20, 0x00	; 0
     240:	50 e0       	ldi	r21, 0x00	; 0
     242:	60 e0       	ldi	r22, 0x00	; 0
     244:	70 e0       	ldi	r23, 0x00	; 0
     246:	80 e0       	ldi	r24, 0x00	; 0
     248:	90 e0       	ldi	r25, 0x00	; 0
     24a:	a6 2c       	mov	r10, r6
     24c:	b7 2c       	mov	r11, r7
     24e:	cb 2e       	mov	r12, r27
     250:	da 2e       	mov	r13, r26
     252:	ef 2e       	mov	r14, r31
     254:	fe 2e       	mov	r15, r30
     256:	aa d7       	rcall	.+3924   	; 0x11ac <__adddi3>
     258:	29 83       	std	Y+1, r18	; 0x01
     25a:	3a 83       	std	Y+2, r19	; 0x02
     25c:	4b 83       	std	Y+3, r20	; 0x03
     25e:	5c 83       	std	Y+4, r21	; 0x04
     260:	6d 83       	std	Y+5, r22	; 0x05
     262:	7e 83       	std	Y+6, r23	; 0x06
     264:	8f 83       	std	Y+7, r24	; 0x07
     266:	98 87       	std	Y+8, r25	; 0x08
		while(1) {
			cli();
     268:	f8 94       	cli
			j = msectimer0;
     26a:	70 91 22 03 	lds	r23, 0x0322	; 0x800322 <msectimer0>
     26e:	60 91 23 03 	lds	r22, 0x0323	; 0x800323 <msectimer0+0x1>
     272:	50 91 24 03 	lds	r21, 0x0324	; 0x800324 <msectimer0+0x2>
     276:	40 91 25 03 	lds	r20, 0x0325	; 0x800325 <msectimer0+0x3>
     27a:	30 91 26 03 	lds	r19, 0x0326	; 0x800326 <msectimer0+0x4>
     27e:	20 91 27 03 	lds	r18, 0x0327	; 0x800327 <msectimer0+0x5>
     282:	90 91 28 03 	lds	r25, 0x0328	; 0x800328 <msectimer0+0x6>
     286:	80 91 29 03 	lds	r24, 0x0329	; 0x800329 <msectimer0+0x7>
     28a:	79 87       	std	Y+9, r23	; 0x09
     28c:	6a 87       	std	Y+10, r22	; 0x0a
     28e:	5b 87       	std	Y+11, r21	; 0x0b
     290:	4c 87       	std	Y+12, r20	; 0x0c
     292:	3d 87       	std	Y+13, r19	; 0x0d
     294:	2e 87       	std	Y+14, r18	; 0x0e
     296:	9f 87       	std	Y+15, r25	; 0x0f
     298:	88 8b       	std	Y+16, r24	; 0x10
			sei();
     29a:	78 94       	sei
			if (j >= k)
     29c:	29 85       	ldd	r18, Y+9	; 0x09
     29e:	3a 85       	ldd	r19, Y+10	; 0x0a
     2a0:	4b 85       	ldd	r20, Y+11	; 0x0b
     2a2:	5c 85       	ldd	r21, Y+12	; 0x0c
     2a4:	6d 85       	ldd	r22, Y+13	; 0x0d
     2a6:	7e 85       	ldd	r23, Y+14	; 0x0e
     2a8:	8f 85       	ldd	r24, Y+15	; 0x0f
     2aa:	98 89       	ldd	r25, Y+16	; 0x10
     2ac:	a9 80       	ldd	r10, Y+1	; 0x01
     2ae:	ba 80       	ldd	r11, Y+2	; 0x02
     2b0:	cb 80       	ldd	r12, Y+3	; 0x03
     2b2:	dc 80       	ldd	r13, Y+4	; 0x04
     2b4:	ed 80       	ldd	r14, Y+5	; 0x05
     2b6:	fe 80       	ldd	r15, Y+6	; 0x06
     2b8:	0f 81       	ldd	r16, Y+7	; 0x07
     2ba:	18 85       	ldd	r17, Y+8	; 0x08
     2bc:	8c d7       	rcall	.+3864   	; 0x11d6 <__cmpdi2>
     2be:	a0 f2       	brcs	.-88     	; 0x268 <delay_ms+0xa0>
			{
				return;
			}
		}
	}
}
     2c0:	60 96       	adiw	r28, 0x10	; 16
     2c2:	0f b6       	in	r0, 0x3f	; 63
     2c4:	f8 94       	cli
     2c6:	de bf       	out	0x3e, r29	; 62
     2c8:	0f be       	out	0x3f, r0	; 63
     2ca:	cd bf       	out	0x3d, r28	; 61
     2cc:	df 91       	pop	r29
     2ce:	cf 91       	pop	r28
     2d0:	1f 91       	pop	r17
     2d2:	0f 91       	pop	r16
     2d4:	ff 90       	pop	r15
     2d6:	ef 90       	pop	r14
     2d8:	df 90       	pop	r13
     2da:	cf 90       	pop	r12
     2dc:	bf 90       	pop	r11
     2de:	af 90       	pop	r10
     2e0:	9f 90       	pop	r9
     2e2:	8f 90       	pop	r8
     2e4:	7f 90       	pop	r7
     2e6:	6f 90       	pop	r6
     2e8:	08 95       	ret

000002ea <set0baud>:
#endif

// set the baud on the fly for usart 0; this makes sure uart is idle
void set0baud(int baudindex) {
     2ea:	9c 01       	movw	r18, r24

	//Check UART tx Data has been completed
	while (!(UCSR0A & (1 <<UDRE0)))			// 	while (!(UCSR0A & (1 <<TXC0)))
     2ec:	e0 ec       	ldi	r30, 0xC0	; 192
     2ee:	f0 e0       	ldi	r31, 0x00	; 0
     2f0:	90 81       	ld	r25, Z
     2f2:	95 ff       	sbrs	r25, 5
     2f4:	fd cf       	rjmp	.-6      	; 0x2f0 <set0baud+0x6>
	;
	ENTER_CRITICAL(W);
     2f6:	0f b6       	in	r0, 0x3f	; 63
     2f8:	f8 94       	cli
     2fa:	0f 92       	push	r0
	while (!(UCSR0A & (1 <<UDRE0)))		// make sure no sneaky isr got in
     2fc:	e0 ec       	ldi	r30, 0xC0	; 192
     2fe:	f0 e0       	ldi	r31, 0x00	; 0
     300:	90 81       	ld	r25, Z
     302:	95 ff       	sbrs	r25, 5
     304:	fd cf       	rjmp	.-6      	; 0x300 <set0baud+0x16>
	;
	// deactivate USART
	UCSR0B = 0 << RXCIE0    /* RX Complete Interrupt Enable: enabled */
     306:	a1 ec       	ldi	r26, 0xC1	; 193
     308:	b0 e0       	ldi	r27, 0x00	; 0
     30a:	1c 92       	st	X, r1
	| 0 << RXEN0   /* Receiver Enable: enabled */
	| 0 << TXEN0   /* Transmitter Enable: enabled */
	| 0 << UCSZ02; /*  */
	
	//Reconfigure baud rate
	UBRR0H = (btable[baudindex][BMULT] >> 8);
     30c:	f9 01       	movw	r30, r18
     30e:	ee 0f       	add	r30, r30
     310:	ff 1f       	adc	r31, r31
     312:	ee 0f       	add	r30, r30
     314:	ff 1f       	adc	r31, r31
     316:	ec 5f       	subi	r30, 0xFC	; 252
     318:	fc 4f       	sbci	r31, 0xFC	; 252
     31a:	81 81       	ldd	r24, Z+1	; 0x01
     31c:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
	UBRR0L = (btable[baudindex][BMULT] & 0xff);
     320:	80 81       	ld	r24, Z
     322:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>

	// activate USART
	UCSR0B = 1 << RXCIE0    /* RX Complete Interrupt Enable: enabled */
     326:	88 e9       	ldi	r24, 0x98	; 152
     328:	8c 93       	st	X, r24
	| 0 << UDRIE0  /* USART Data Register Empty Interupt Enable: disabled */
	| 1 << RXEN0   /* Receiver Enable: enabled */
	| 1 << TXEN0   /* Transmitter Enable: enabled */
	| 0 << UCSZ02; /*  */

	EXIT_CRITICAL(W);
     32a:	0f 90       	pop	r0
     32c:	0f be       	out	0x3f, r0	; 63
     32e:	08 95       	ret

00000330 <set2baud>:
}

// set the baud on the fly for usart 2; this makes sure uart is idle
void set2baud(int baudindex) {
     330:	9c 01       	movw	r18, r24

	//Check UART tx Data has been completed
	while (!(UCSR2A & (1 <<UDRE2)))			// 	while (!(UCSR2A & (1 <<TXC2)))
     332:	e0 ed       	ldi	r30, 0xD0	; 208
     334:	f0 e0       	ldi	r31, 0x00	; 0
     336:	90 81       	ld	r25, Z
     338:	95 ff       	sbrs	r25, 5
     33a:	fd cf       	rjmp	.-6      	; 0x336 <set2baud+0x6>
	;
	ENTER_CRITICAL(W);
     33c:	0f b6       	in	r0, 0x3f	; 63
     33e:	f8 94       	cli
     340:	0f 92       	push	r0
	while (!(UCSR2A & (1 <<UDRE2)))		// make sure no sneaky isr got in
     342:	e0 ed       	ldi	r30, 0xD0	; 208
     344:	f0 e0       	ldi	r31, 0x00	; 0
     346:	90 81       	ld	r25, Z
     348:	95 ff       	sbrs	r25, 5
     34a:	fd cf       	rjmp	.-6      	; 0x346 <set2baud+0x16>
	;
	// deactivate USART
	UCSR2B = 0 << RXCIE2    /* RX Complete Interrupt Enable: enabled */
     34c:	a1 ed       	ldi	r26, 0xD1	; 209
     34e:	b0 e0       	ldi	r27, 0x00	; 0
     350:	1c 92       	st	X, r1
	| 0 << RXEN2   /* Receiver Enable: enabled */
	| 0 << TXEN2   /* Transmitter Enable: enabled */
	| 0 << UCSZ22; /*  */
	
	//Reconfigure baud rate
	UBRR2H = (btable[baudindex][BMULT] >> 8);
     352:	f9 01       	movw	r30, r18
     354:	ee 0f       	add	r30, r30
     356:	ff 1f       	adc	r31, r31
     358:	ee 0f       	add	r30, r30
     35a:	ff 1f       	adc	r31, r31
     35c:	ec 5f       	subi	r30, 0xFC	; 252
     35e:	fc 4f       	sbci	r31, 0xFC	; 252
     360:	81 81       	ldd	r24, Z+1	; 0x01
     362:	80 93 d5 00 	sts	0x00D5, r24	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
	UBRR2L = (btable[baudindex][BMULT] & 0xff);
     366:	80 81       	ld	r24, Z
     368:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>

	// activate USART
	UCSR2B = 1 << RXCIE2    /* RX Complete Interrupt Enable: enabled */
     36c:	88 e9       	ldi	r24, 0x98	; 152
     36e:	8c 93       	st	X, r24
	| 0 << UDRIE2  /* USART Data Register Empty Interupt Enable: disabled */
	| 1 << RXEN2   /* Receiver Enable: enabled */
	| 1 << TXEN2   /* Transmitter Enable: enabled */
	| 0 << UCSZ22; /*  */

	EXIT_CRITICAL(W);
     370:	0f 90       	pop	r0
     372:	0f be       	out	0x3f, r0	; 63
     374:	08 95       	ret

00000376 <findlcd>:
}

// Find the LCD and return the current baud rate or -1 if not found
int findlcd(void)
{
     376:	8f 92       	push	r8
     378:	9f 92       	push	r9
     37a:	af 92       	push	r10
     37c:	bf 92       	push	r11
     37e:	cf 92       	push	r12
     380:	df 92       	push	r13
     382:	ef 92       	push	r14
     384:	ff 92       	push	r15
     386:	0f 93       	push	r16
     388:	1f 93       	push	r17
     38a:	cf 93       	push	r28
     38c:	df 93       	push	r29
     38e:	cd b7       	in	r28, 0x3d	; 61
     390:	de b7       	in	r29, 0x3e	; 62
     392:	c6 59       	subi	r28, 0x96	; 150
     394:	d1 09       	sbc	r29, r1
     396:	0f b6       	in	r0, 0x3f	; 63
     398:	f8 94       	cli
     39a:	de bf       	out	0x3e, r29	; 62
     39c:	0f be       	out	0x3f, r0	; 63
     39e:	cd bf       	out	0x3d, r28	; 61
	const char discovermsg[]="\x00\xff\xff\xff""connect\xff\xff\xff";	// discovery message
     3a0:	8f e0       	ldi	r24, 0x0F	; 15
     3a2:	ee e0       	ldi	r30, 0x0E	; 14
     3a4:	f2 e0       	ldi	r31, 0x02	; 2
     3a6:	de 01       	movw	r26, r28
     3a8:	11 96       	adiw	r26, 0x01	; 1
     3aa:	01 90       	ld	r0, Z+
     3ac:	0d 92       	st	X+, r0
     3ae:	8a 95       	dec	r24
     3b0:	e1 f7       	brne	.-8      	; 0x3aa <findlcd+0x34>
	const char foundmsg[]="comok ";		// first part of expected LCD response
     3b2:	87 e0       	ldi	r24, 0x07	; 7
     3b4:	e5 e3       	ldi	r30, 0x35	; 53
     3b6:	f2 e0       	ldi	r31, 0x02	; 2
     3b8:	de 01       	movw	r26, r28
     3ba:	50 96       	adiw	r26, 0x10	; 16
     3bc:	01 90       	ld	r0, Z+
     3be:	0d 92       	st	X+, r0
     3c0:	8a 95       	dec	r24
     3c2:	e1 f7       	brne	.-8      	; 0x3bc <findlcd+0x46>
	int	i, j, rindex, bindex;
	int inindex = 0;
	int wtim = 0;

	// clear arrays
	memset(lcdsig, 0, sizeof lcdsig);
     3c4:	80 e5       	ldi	r24, 0x50	; 80
     3c6:	ea e2       	ldi	r30, 0x2A	; 42
     3c8:	f3 e0       	ldi	r31, 0x03	; 3
     3ca:	df 01       	movw	r26, r30
     3cc:	1d 92       	st	X+, r1
     3ce:	8a 95       	dec	r24
     3d0:	e9 f7       	brne	.-6      	; 0x3cc <findlcd+0x56>
	memset(response, 0, sizeof response);
     3d2:	fe 01       	movw	r30, r28
     3d4:	77 96       	adiw	r30, 0x17	; 23
     3d6:	80 e8       	ldi	r24, 0x80	; 128
     3d8:	df 01       	movw	r26, r30
     3da:	1d 92       	st	X+, r1
     3dc:	8a 95       	dec	r24
     3de:	e9 f7       	brne	.-6      	; 0x3da <findlcd+0x64>
     3e0:	a1 2c       	mov	r10, r1
     3e2:	b1 2c       	mov	r11, r1
     3e4:	4e 01       	movw	r8, r28
     3e6:	bf e0       	ldi	r27, 0x0F	; 15
     3e8:	8b 0e       	add	r8, r27
     3ea:	91 1c       	adc	r9, r1

	for(bindex=0; bindex<sizeof(btable); bindex++)		// try every baud
	{
		inindex = 0;
		set2baud(bindex);			// set the LCD baud rate
     3ec:	c5 01       	movw	r24, r10
     3ee:	a0 df       	rcall	.-192    	; 0x330 <set2baud>
		delay_ms(2);			// allow baud gen to settle
     3f0:	82 e0       	ldi	r24, 0x02	; 2
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	e9 de       	rcall	.-558    	; 0x1c8 <delay_ms>
     3f6:	fe 01       	movw	r30, r28
     3f8:	31 96       	adiw	r30, 0x01	; 1
     3fa:	6f 01       	movw	r12, r30
     3fc:	00 e0       	ldi	r16, 0x00	; 0
     3fe:	10 e0       	ldi	r17, 0x00	; 0

		for(j=0; j<sizeof(discovermsg)-1; j++)		// send discovery command to LCD
		{
			USART_2_write(discovermsg[j]);	// connect
     400:	d6 01       	movw	r26, r12
     402:	8d 91       	ld	r24, X+
     404:	6d 01       	movw	r12, r26
     406:	f5 d5       	rcall	.+3050   	; 0xff2 <USART_2_write>
     408:	0f 2e       	mov	r0, r31
     40a:	f7 e1       	ldi	r31, 0x17	; 23
     40c:	ef 2e       	mov	r14, r31
     40e:	f1 2c       	mov	r15, r1
     410:	f0 2d       	mov	r31, r0
     412:	ec 0e       	add	r14, r28
     414:	fd 1e       	adc	r15, r29
     416:	e0 0e       	add	r14, r16
     418:	f1 1e       	adc	r15, r17
			while(USART_2_is_rx_ready())
     41a:	09 c0       	rjmp	.+18     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
			{
				if(inindex < sizeof(response))
     41c:	00 38       	cpi	r16, 0x80	; 128
     41e:	11 05       	cpc	r17, r1
				{
					response[inindex++] = USART_2_read();
     420:	30 f4       	brcc	.+12     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     422:	0f 5f       	subi	r16, 0xFF	; 255
     424:	1f 4f       	sbci	r17, 0xFF	; 255
     426:	cc d5       	rcall	.+2968   	; 0xfc0 <USART_2_read>
     428:	f7 01       	movw	r30, r14
     42a:	81 93       	st	Z+, r24
		delay_ms(2);			// allow baud gen to settle

		for(j=0; j<sizeof(discovermsg)-1; j++)		// send discovery command to LCD
		{
			USART_2_write(discovermsg[j]);	// connect
			while(USART_2_is_rx_ready())
     42c:	7f 01       	movw	r14, r30
     42e:	c1 d5       	rcall	.+2946   	; 0xfb2 <USART_2_is_rx_ready>
     430:	81 11       	cpse	r24, r1
     432:	f4 cf       	rjmp	.-24     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
	{
		inindex = 0;
		set2baud(bindex);			// set the LCD baud rate
		delay_ms(2);			// allow baud gen to settle

		for(j=0; j<sizeof(discovermsg)-1; j++)		// send discovery command to LCD
     434:	c8 14       	cp	r12, r8
     436:	d9 04       	cpc	r13, r9
     438:	19 f7       	brne	.-58     	; 0x400 <__LOCK_REGION_LENGTH__>
     43a:	0f 2e       	mov	r0, r31
     43c:	fa ef       	ldi	r31, 0xFA	; 250
     43e:	cf 2e       	mov	r12, r31
     440:	d1 2c       	mov	r13, r1
     442:	f0 2d       	mov	r31, r0

		for (wtim = 0; (wtim < 250); wtim++)		// hang around a bit and try to collect complete response
		{
			while(USART_2_is_rx_ready())
			{
				if(inindex < sizeof(response))
     444:	13 c0       	rjmp	.+38     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
     446:	00 38       	cpi	r16, 0x80	; 128
				{
					response[inindex++] = USART_2_read();
     448:	11 05       	cpc	r17, r1
     44a:	30 f4       	brcc	.+12     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
     44c:	0f 5f       	subi	r16, 0xFF	; 255
     44e:	1f 4f       	sbci	r17, 0xFF	; 255
     450:	b7 d5       	rcall	.+2926   	; 0xfc0 <USART_2_read>
			}
		}

		for (wtim = 0; (wtim < 250); wtim++)		// hang around a bit and try to collect complete response
		{
			while(USART_2_is_rx_ready())
     452:	d7 01       	movw	r26, r14
     454:	8d 93       	st	X+, r24
     456:	7d 01       	movw	r14, r26
     458:	ac d5       	rcall	.+2904   	; 0xfb2 <USART_2_is_rx_ready>
				if(inindex < sizeof(response))
				{
					response[inindex++] = USART_2_read();
				}
			}
			delay_ms(1);			// allow one char time at 9600 baud
     45a:	81 11       	cpse	r24, r1
     45c:	f4 cf       	rjmp	.-24     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
     45e:	81 e0       	ldi	r24, 0x01	; 1
     460:	90 e0       	ldi	r25, 0x00	; 0
     462:	b2 de       	rcall	.-668    	; 0x1c8 <delay_ms>
     464:	b1 e0       	ldi	r27, 0x01	; 1
     466:	cb 1a       	sub	r12, r27
					response[inindex++] = USART_2_read();
				}
			}
		}

		for (wtim = 0; (wtim < 250); wtim++)		// hang around a bit and try to collect complete response
     468:	d1 08       	sbc	r13, r1
     46a:	51 f0       	breq	.+20     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
     46c:	0f 2e       	mov	r0, r31
     46e:	f7 e1       	ldi	r31, 0x17	; 23
     470:	ef 2e       	mov	r14, r31
     472:	f1 2c       	mov	r15, r1
     474:	f0 2d       	mov	r31, r0
     476:	ec 0e       	add	r14, r28
     478:	fd 1e       	adc	r15, r29
     47a:	e0 0e       	add	r14, r16
     47c:	f1 1e       	adc	r15, r17
			delay_ms(1);			// allow one char time at 9600 baud
		}

		if (inindex)		// we *have* received something
		{
			for(rindex=0; rindex<inindex; rindex++)		// the length of the rx'd string
     47e:	ec cf       	rjmp	.-40     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
     480:	10 16       	cp	r1, r16
     482:	11 06       	cpc	r1, r17
     484:	0c f0       	brlt	.+2      	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
     486:	60 c0       	rjmp	.+192    	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
     488:	6e 01       	movw	r12, r28
     48a:	e7 e1       	ldi	r30, 0x17	; 23
     48c:	ce 0e       	add	r12, r30
			{
				if (strncmp(&response[rindex],foundmsg,sizeof(foundmsg-1)) == 0)		// look for the start
     48e:	d1 1c       	adc	r13, r1
     490:	e1 2c       	mov	r14, r1
     492:	f1 2c       	mov	r15, r1
     494:	42 e0       	ldi	r20, 0x02	; 2
     496:	50 e0       	ldi	r21, 0x00	; 0
     498:	be 01       	movw	r22, r28
     49a:	60 5f       	subi	r22, 0xF0	; 240
     49c:	7f 4f       	sbci	r23, 0xFF	; 255
     49e:	c6 01       	movw	r24, r12
     4a0:	a3 d6       	rcall	.+3398   	; 0x11e8 <strncmp>
     4a2:	89 2b       	or	r24, r25
				{
					for(i=rindex; i<inindex; i++)		// found start, now look for terminator bytes
     4a4:	09 f0       	breq	.+2      	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
     4a6:	46 c0       	rjmp	.+140    	; 0x534 <__LOCK_REGION_LENGTH__+0x134>
     4a8:	e0 16       	cp	r14, r16
     4aa:	f1 06       	cpc	r15, r17
     4ac:	0c f0       	brlt	.+2      	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
     4ae:	42 c0       	rjmp	.+132    	; 0x534 <__LOCK_REGION_LENGTH__+0x134>
					{
						if ((response[i] == 0xff) && (response[i+1] == 0xff) && (response[i+2] == 0xff))	// found response terminator
     4b0:	f6 01       	movw	r30, r12
     4b2:	c7 01       	movw	r24, r14
     4b4:	21 91       	ld	r18, Z+
     4b6:	2f 3f       	cpi	r18, 0xFF	; 255
     4b8:	c1 f5       	brne	.+112    	; 0x52a <__LOCK_REGION_LENGTH__+0x12a>
     4ba:	20 81       	ld	r18, Z
     4bc:	2f 3f       	cpi	r18, 0xFF	; 255
     4be:	a9 f5       	brne	.+106    	; 0x52a <__LOCK_REGION_LENGTH__+0x12a>
     4c0:	9c 01       	movw	r18, r24
     4c2:	2e 5f       	subi	r18, 0xFE	; 254
     4c4:	3f 4f       	sbci	r19, 0xFF	; 255
						{
							if(i+2-rindex > sizeof(lcdsig)-1)		// will fit in the buffer
     4c6:	41 81       	ldd	r20, Z+1	; 0x01
     4c8:	4f 3f       	cpi	r20, 0xFF	; 255
     4ca:	79 f5       	brne	.+94     	; 0x52a <__LOCK_REGION_LENGTH__+0x12a>
     4cc:	2e 19       	sub	r18, r14
							{
								printf("LCD response too long\n\r");
     4ce:	3f 09       	sbc	r19, r15
     4d0:	20 35       	cpi	r18, 0x50	; 80
     4d2:	31 05       	cpc	r19, r1
     4d4:	50 f0       	brcs	.+20     	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
     4d6:	8d e1       	ldi	r24, 0x1D	; 29
     4d8:	92 e0       	ldi	r25, 0x02	; 2
								return(-1);
     4da:	9f 93       	push	r25
     4dc:	8f 93       	push	r24
     4de:	92 d6       	rcall	.+3364   	; 0x1204 <printf>
     4e0:	0f 90       	pop	r0
     4e2:	0f 90       	pop	r0
							}
							else
							{
								int k;
								j = 0;
								k = i + 3 - rindex;
     4e4:	8f ef       	ldi	r24, 0xFF	; 255
     4e6:	9f ef       	ldi	r25, 0xFF	; 255
     4e8:	3c c0       	rjmp	.+120    	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
								//		this expression evals wrong- compiler??			while (j < (i+3-rindex))
								while (j < k)
     4ea:	03 96       	adiw	r24, 0x03	; 3
     4ec:	8e 19       	sub	r24, r14
     4ee:	9f 09       	sbc	r25, r15
     4f0:	18 16       	cp	r1, r24
     4f2:	19 06       	cpc	r1, r25
     4f4:	8c f4       	brge	.+34     	; 0x518 <__LOCK_REGION_LENGTH__+0x118>
     4f6:	e7 e1       	ldi	r30, 0x17	; 23
     4f8:	f0 e0       	ldi	r31, 0x00	; 0
     4fa:	ec 0f       	add	r30, r28
     4fc:	fd 1f       	adc	r31, r29
     4fe:	ee 0d       	add	r30, r14
     500:	ff 1d       	adc	r31, r15
     502:	aa e2       	ldi	r26, 0x2A	; 42
     504:	b3 e0       	ldi	r27, 0x03	; 3
								{
									lcdsig[j++] = response[rindex++];		// copy response string into global
     506:	9c 01       	movw	r18, r24
     508:	26 5d       	subi	r18, 0xD6	; 214
							{
								int k;
								j = 0;
								k = i + 3 - rindex;
								//		this expression evals wrong- compiler??			while (j < (i+3-rindex))
								while (j < k)
     50a:	3c 4f       	sbci	r19, 0xFC	; 252
     50c:	41 91       	ld	r20, Z+
     50e:	4d 93       	st	X+, r20
     510:	a2 17       	cp	r26, r18
								return(-1);
							}
							else
							{
								int k;
								j = 0;
     512:	b3 07       	cpc	r27, r19
     514:	d9 f7       	brne	.-10     	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
								//		this expression evals wrong- compiler??			while (j < (i+3-rindex))
								while (j < k)
								{
									lcdsig[j++] = response[rindex++];		// copy response string into global
								}
								lcdsig[j] = '\0';		// add our null terminator
     516:	02 c0       	rjmp	.+4      	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>
     518:	80 e0       	ldi	r24, 0x00	; 0
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	fc 01       	movw	r30, r24
								return(bindex);
     51e:	e6 5d       	subi	r30, 0xD6	; 214
     520:	fc 4f       	sbci	r31, 0xFC	; 252
     522:	10 82       	st	Z, r1
		{
			for(rindex=0; rindex<inindex; rindex++)		// the length of the rx'd string
			{
				if (strncmp(&response[rindex],foundmsg,sizeof(foundmsg-1)) == 0)		// look for the start
				{
					for(i=rindex; i<inindex; i++)		// found start, now look for terminator bytes
     524:	8a 2d       	mov	r24, r10
     526:	9b 2d       	mov	r25, r11
     528:	1c c0       	rjmp	.+56     	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
     52a:	01 96       	adiw	r24, 0x01	; 1
     52c:	80 17       	cp	r24, r16
			delay_ms(1);			// allow one char time at 9600 baud
		}

		if (inindex)		// we *have* received something
		{
			for(rindex=0; rindex<inindex; rindex++)		// the length of the rx'd string
     52e:	91 07       	cpc	r25, r17
     530:	0c f4       	brge	.+2      	; 0x534 <__LOCK_REGION_LENGTH__+0x134>
     532:	c0 cf       	rjmp	.-128    	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
     534:	ff ef       	ldi	r31, 0xFF	; 255
     536:	ef 1a       	sub	r14, r31
     538:	ff 0a       	sbc	r15, r31
     53a:	8f ef       	ldi	r24, 0xFF	; 255
     53c:	c8 1a       	sub	r12, r24
     53e:	d8 0a       	sbc	r13, r24
     540:	0e 15       	cp	r16, r14

	// clear arrays
	memset(lcdsig, 0, sizeof lcdsig);
	memset(response, 0, sizeof response);

	for(bindex=0; bindex<sizeof(btable); bindex++)		// try every baud
     542:	1f 05       	cpc	r17, r15
     544:	09 f0       	breq	.+2      	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
     546:	a6 cf       	rjmp	.-180    	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
     548:	9f ef       	ldi	r25, 0xFF	; 255
     54a:	a9 1a       	sub	r10, r25
     54c:	b9 0a       	sbc	r11, r25
     54e:	ac e1       	ldi	r26, 0x1C	; 28
     550:	aa 16       	cp	r10, r26

			}
		}
	}
	// test
	lcdsig[0]=128;
     552:	b1 04       	cpc	r11, r1
     554:	09 f0       	breq	.+2      	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
     556:	4a cf       	rjmp	.-364    	; 0x3ec <findlcd+0x76>
	return(-1);
     558:	80 e8       	ldi	r24, 0x80	; 128
     55a:	80 93 2a 03 	sts	0x032A, r24	; 0x80032a <lcdsig>
}
     55e:	8f ef       	ldi	r24, 0xFF	; 255
     560:	9f ef       	ldi	r25, 0xFF	; 255
     562:	ca 56       	subi	r28, 0x6A	; 106
     564:	df 4f       	sbci	r29, 0xFF	; 255
     566:	0f b6       	in	r0, 0x3f	; 63
     568:	f8 94       	cli
     56a:	de bf       	out	0x3e, r29	; 62
     56c:	0f be       	out	0x3f, r0	; 63
     56e:	cd bf       	out	0x3d, r28	; 61
     570:	df 91       	pop	r29
     572:	cf 91       	pop	r28
     574:	1f 91       	pop	r17
     576:	0f 91       	pop	r16
     578:	ff 90       	pop	r15
     57a:	ef 90       	pop	r14
     57c:	df 90       	pop	r13
     57e:	cf 90       	pop	r12
     580:	bf 90       	pop	r11
     582:	af 90       	pop	r10
     584:	9f 90       	pop	r9
     586:	8f 90       	pop	r8
     588:	08 95       	ret

0000058a <getconnect>:


// see if Nextion editor connects
int getconnect(char buf[], int bsize)
{
     58a:	6f 92       	push	r6
     58c:	7f 92       	push	r7
     58e:	8f 92       	push	r8
     590:	9f 92       	push	r9
     592:	af 92       	push	r10
     594:	bf 92       	push	r11
     596:	cf 92       	push	r12
     598:	df 92       	push	r13
     59a:	ef 92       	push	r14
     59c:	ff 92       	push	r15
     59e:	0f 93       	push	r16
     5a0:	1f 93       	push	r17
     5a2:	cf 93       	push	r28
     5a4:	df 93       	push	r29
     5a6:	cd b7       	in	r28, 0x3d	; 61
     5a8:	de b7       	in	r29, 0x3e	; 62
     5aa:	2b 97       	sbiw	r28, 0x0b	; 11
     5ac:	0f b6       	in	r0, 0x3f	; 63
     5ae:	f8 94       	cli
     5b0:	de bf       	out	0x3e, r29	; 62
     5b2:	0f be       	out	0x3f, r0	; 63
     5b4:	cd bf       	out	0x3d, r28	; 61
     5b6:	5c 01       	movw	r10, r24
     5b8:	6b 01       	movw	r12, r22
	int inindex = 0, mindex = 0;
	int wtim, i;
	char ch;
	const char discovermsg[]="connect\xff\xff\xff";		// expected discovery message
     5ba:	8b e0       	ldi	r24, 0x0B	; 11
     5bc:	ec e3       	ldi	r30, 0x3C	; 60
     5be:	f2 e0       	ldi	r31, 0x02	; 2
     5c0:	de 01       	movw	r26, r28
     5c2:	11 96       	adiw	r26, 0x01	; 1
     5c4:	01 90       	ld	r0, Z+
     5c6:	0d 92       	st	X+, r0
     5c8:	8a 95       	dec	r24
     5ca:	e1 f7       	brne	.-8      	; 0x5c4 <getconnect+0x3a>

	for(i=0; i<bsize; buf[i++]='\0');
     5cc:	16 16       	cp	r1, r22
     5ce:	17 06       	cpc	r1, r23
     5d0:	0c f0       	brlt	.+2      	; 0x5d4 <getconnect+0x4a>
     5d2:	48 c0       	rjmp	.+144    	; 0x664 <getconnect+0xda>
     5d4:	f5 01       	movw	r30, r10
     5d6:	c5 01       	movw	r24, r10
     5d8:	86 0f       	add	r24, r22
     5da:	97 1f       	adc	r25, r23
     5dc:	11 92       	st	Z+, r1
     5de:	e8 17       	cp	r30, r24
     5e0:	f9 07       	cpc	r31, r25
     5e2:	e1 f7       	brne	.-8      	; 0x5dc <getconnect+0x52>
     5e4:	3f c0       	rjmp	.+126    	; 0x664 <getconnect+0xda>
	for (wtim = 0; (wtim < 7000); wtim++)		// hang around waiting for some input
	{
		while(USART_0_is_rx_ready())
		{
			if(inindex < bsize)
     5e6:	ec 14       	cp	r14, r12
     5e8:	fd 04       	cpc	r15, r13
     5ea:	34 f0       	brlt	.+12     	; 0x5f8 <getconnect+0x6e>
			}
			else
			{
				// input buffer full
				inindex = 0;
				for(i=0; i<bsize; buf[i++]='\0');
     5ec:	1c 14       	cp	r1, r12
     5ee:	1d 04       	cpc	r1, r13
     5f0:	e4 f0       	brlt	.+56     	; 0x62a <getconnect+0xa0>
				}
			}
			else
			{
				// input buffer full
				inindex = 0;
     5f2:	e1 2c       	mov	r14, r1
     5f4:	f1 2c       	mov	r15, r1
	{
		while(USART_0_is_rx_ready())
		{
			if(inindex < bsize)
			{
				ch = USART_0_read();
     5f6:	25 c0       	rjmp	.+74     	; 0x642 <getconnect+0xb8>
				buf[inindex++] = ch;
     5f8:	b4 d3       	rcall	.+1896   	; 0xd62 <USART_0_read>
     5fa:	f5 01       	movw	r30, r10
     5fc:	ee 0d       	add	r30, r14
     5fe:	ff 1d       	adc	r31, r15
				if (discovermsg[mindex] == ch)
     600:	80 83       	st	Z, r24
     602:	e1 e0       	ldi	r30, 0x01	; 1
     604:	f0 e0       	ldi	r31, 0x00	; 0
     606:	ec 0f       	add	r30, r28
     608:	fd 1f       	adc	r31, r29
     60a:	e8 0d       	add	r30, r8
     60c:	f9 1d       	adc	r31, r9
     60e:	90 81       	ld	r25, Z
     610:	89 13       	cpse	r24, r25
				{
					mindex++;
     612:	13 c0       	rjmp	.+38     	; 0x63a <getconnect+0xb0>
     614:	8f ef       	ldi	r24, 0xFF	; 255
     616:	88 1a       	sub	r8, r24
					if (mindex == sizeof(discovermsg)-1)	// all matched
     618:	98 0a       	sbc	r9, r24
     61a:	8a e0       	ldi	r24, 0x0A	; 10
     61c:	88 16       	cp	r8, r24
     61e:	91 04       	cpc	r9, r1
		while(USART_0_is_rx_ready())
		{
			if(inindex < bsize)
			{
				ch = USART_0_read();
				buf[inindex++] = ch;
     620:	d9 f0       	breq	.+54     	; 0x658 <getconnect+0xce>
     622:	8f ef       	ldi	r24, 0xFF	; 255
     624:	e8 1a       	sub	r14, r24
     626:	f8 0a       	sbc	r15, r24
     628:	0c c0       	rjmp	.+24     	; 0x642 <getconnect+0xb8>
			}
			else
			{
				// input buffer full
				inindex = 0;
				for(i=0; i<bsize; buf[i++]='\0');
     62a:	f5 01       	movw	r30, r10
     62c:	11 92       	st	Z+, r1
     62e:	e0 17       	cp	r30, r16
     630:	f1 07       	cpc	r31, r17
				}
			}
			else
			{
				// input buffer full
				inindex = 0;
     632:	e1 f7       	brne	.-8      	; 0x62c <getconnect+0xa2>
     634:	e1 2c       	mov	r14, r1
     636:	f1 2c       	mov	r15, r1
						return(0);
					}
				}
				else
				{
					mindex = 0;		// reset the search
     638:	04 c0       	rjmp	.+8      	; 0x642 <getconnect+0xb8>
     63a:	81 2c       	mov	r8, r1
					inindex = 0;
     63c:	91 2c       	mov	r9, r1
	const char discovermsg[]="connect\xff\xff\xff";		// expected discovery message

	for(i=0; i<bsize; buf[i++]='\0');
	for (wtim = 0; (wtim < 7000); wtim++)		// hang around waiting for some input
	{
		while(USART_0_is_rx_ready())
     63e:	e1 2c       	mov	r14, r1
     640:	f1 2c       	mov	r15, r1
     642:	88 d3       	rcall	.+1808   	; 0xd54 <USART_0_is_rx_ready>
				// input buffer full
				inindex = 0;
				for(i=0; i<bsize; buf[i++]='\0');
			}
		}
		delay_ms(1);
     644:	81 11       	cpse	r24, r1
     646:	cf cf       	rjmp	.-98     	; 0x5e6 <getconnect+0x5c>
     648:	81 e0       	ldi	r24, 0x01	; 1
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	bd dd       	rcall	.-1158   	; 0x1c8 <delay_ms>
     64e:	81 e0       	ldi	r24, 0x01	; 1
	int wtim, i;
	char ch;
	const char discovermsg[]="connect\xff\xff\xff";		// expected discovery message

	for(i=0; i<bsize; buf[i++]='\0');
	for (wtim = 0; (wtim < 7000); wtim++)		// hang around waiting for some input
     650:	68 1a       	sub	r6, r24
     652:	71 08       	sbc	r7, r1
				if (discovermsg[mindex] == ch)
				{
					mindex++;
					if (mindex == sizeof(discovermsg)-1)	// all matched
					{
						return(0);
     654:	21 f0       	breq	.+8      	; 0x65e <getconnect+0xd4>
     656:	f5 cf       	rjmp	.-22     	; 0x642 <getconnect+0xb8>
     658:	80 e0       	ldi	r24, 0x00	; 0
				for(i=0; i<bsize; buf[i++]='\0');
			}
		}
		delay_ms(1);
	}
	return(-1);
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	11 c0       	rjmp	.+34     	; 0x680 <getconnect+0xf6>
     65e:	8f ef       	ldi	r24, 0xFF	; 255
				}
			}
			else
			{
				// input buffer full
				inindex = 0;
     660:	9f ef       	ldi	r25, 0xFF	; 255
     662:	0e c0       	rjmp	.+28     	; 0x680 <getconnect+0xf6>
     664:	0f 2e       	mov	r0, r31
     666:	f8 e5       	ldi	r31, 0x58	; 88
     668:	6f 2e       	mov	r6, r31
     66a:	fb e1       	ldi	r31, 0x1B	; 27
     66c:	7f 2e       	mov	r7, r31
     66e:	f0 2d       	mov	r31, r0
     670:	81 2c       	mov	r8, r1
     672:	91 2c       	mov	r9, r1
     674:	e1 2c       	mov	r14, r1
     676:	f1 2c       	mov	r15, r1
     678:	85 01       	movw	r16, r10
     67a:	0c 0d       	add	r16, r12
			}
		}
		delay_ms(1);
	}
	return(-1);
}
     67c:	1d 1d       	adc	r17, r13
     67e:	e1 cf       	rjmp	.-62     	; 0x642 <getconnect+0xb8>
     680:	2b 96       	adiw	r28, 0x0b	; 11
     682:	0f b6       	in	r0, 0x3f	; 63
     684:	f8 94       	cli
     686:	de bf       	out	0x3e, r29	; 62
     688:	0f be       	out	0x3f, r0	; 63
     68a:	cd bf       	out	0x3d, r28	; 61
     68c:	df 91       	pop	r29
     68e:	cf 91       	pop	r28
     690:	1f 91       	pop	r17
     692:	0f 91       	pop	r16
     694:	ff 90       	pop	r15
     696:	ef 90       	pop	r14
     698:	df 90       	pop	r13
     69a:	cf 90       	pop	r12
     69c:	bf 90       	pop	r11
     69e:	af 90       	pop	r10
     6a0:	9f 90       	pop	r9
     6a2:	8f 90       	pop	r8
     6a4:	7f 90       	pop	r7
     6a6:	6f 90       	pop	r6
     6a8:	08 95       	ret

000006aa <conntoed>:

// wait for connect from Nextion Editor and respond
int conntoed()
{
     6aa:	ef 92       	push	r14
     6ac:	ff 92       	push	r15
     6ae:	0f 93       	push	r16
     6b0:	1f 93       	push	r17
     6b2:	cf 93       	push	r28
     6b4:	df 93       	push	r29
     6b6:	cd b7       	in	r28, 0x3d	; 61
     6b8:	de b7       	in	r29, 0x3e	; 62
     6ba:	c4 58       	subi	r28, 0x84	; 132
     6bc:	d1 09       	sbc	r29, r1
     6be:	0f b6       	in	r0, 0x3f	; 63
     6c0:	f8 94       	cli
     6c2:	de bf       	out	0x3e, r29	; 62
     6c4:	0f be       	out	0x3f, r0	; 63
     6c6:	cd bf       	out	0x3d, r28	; 61
	int i;
	char inbuf[128];
	const char nulresp[]={0x1a,0xff,0xff,0xff};
     6c8:	8a e1       	ldi	r24, 0x1A	; 26
     6ca:	cf 57       	subi	r28, 0x7F	; 127
     6cc:	df 4f       	sbci	r29, 0xFF	; 255
     6ce:	88 83       	st	Y, r24
     6d0:	c1 58       	subi	r28, 0x81	; 129
     6d2:	d0 40       	sbci	r29, 0x00	; 0
     6d4:	8f ef       	ldi	r24, 0xFF	; 255
     6d6:	ce 57       	subi	r28, 0x7E	; 126
     6d8:	df 4f       	sbci	r29, 0xFF	; 255
     6da:	88 83       	st	Y, r24
     6dc:	c2 58       	subi	r28, 0x82	; 130
     6de:	d0 40       	sbci	r29, 0x00	; 0
     6e0:	cd 57       	subi	r28, 0x7D	; 125
     6e2:	df 4f       	sbci	r29, 0xFF	; 255
     6e4:	88 83       	st	Y, r24
     6e6:	c3 58       	subi	r28, 0x83	; 131
     6e8:	d0 40       	sbci	r29, 0x00	; 0
     6ea:	cc 57       	subi	r28, 0x7C	; 124
     6ec:	df 4f       	sbci	r29, 0xFF	; 255
     6ee:	88 83       	st	Y, r24
     6f0:	c4 58       	subi	r28, 0x84	; 132
     6f2:	d0 40       	sbci	r29, 0x00	; 0


	i = getconnect(inbuf,sizeof(inbuf));
     6f4:	60 e8       	ldi	r22, 0x80	; 128
     6f6:	70 e0       	ldi	r23, 0x00	; 0
     6f8:	ce 01       	movw	r24, r28
     6fa:	01 96       	adiw	r24, 0x01	; 1
     6fc:	46 df       	rcall	.-372    	; 0x58a <getconnect>
	if (i < 0)
     6fe:	99 23       	and	r25, r25
     700:	ec f0       	brlt	.+58     	; 0x73c <conntoed+0x92>
     702:	8e 01       	movw	r16, r28
     704:	0f 57       	subi	r16, 0x7F	; 127
     706:	1f 4f       	sbci	r17, 0xFF	; 255
     708:	78 01       	movw	r14, r16
     70a:	84 e0       	ldi	r24, 0x04	; 4
     70c:	e8 0e       	add	r14, r24
     70e:	f1 1c       	adc	r15, r1
		return(-1);
	}
	// Pc has connected, now send LCD signature response
	for(i=0; i<4; i++)		// send error response - might not be needed
	{
		USART_0_write(nulresp[i]);
     710:	f8 01       	movw	r30, r16
     712:	81 91       	ld	r24, Z+
     714:	8f 01       	movw	r16, r30
     716:	3e d3       	rcall	.+1660   	; 0xd94 <USART_0_write>
	if (i < 0)
	{
		return(-1);
	}
	// Pc has connected, now send LCD signature response
	for(i=0; i<4; i++)		// send error response - might not be needed
     718:	e0 16       	cp	r14, r16
     71a:	f1 06       	cpc	r15, r17
     71c:	c9 f7       	brne	.-14     	; 0x710 <conntoed+0x66>
	{
		USART_0_write(nulresp[i]);
	}
	i = 0;
	while(lcdsig[i])
     71e:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <lcdsig>
     722:	88 23       	and	r24, r24
     724:	71 f0       	breq	.+28     	; 0x742 <conntoed+0x98>
     726:	0b e2       	ldi	r16, 0x2B	; 43
	{
		USART_0_write(lcdsig[i++]);		// send the saved LCD response to the Editor
     728:	13 e0       	ldi	r17, 0x03	; 3
     72a:	34 d3       	rcall	.+1640   	; 0xd94 <USART_0_write>
	for(i=0; i<4; i++)		// send error response - might not be needed
	{
		USART_0_write(nulresp[i]);
	}
	i = 0;
	while(lcdsig[i])
     72c:	f8 01       	movw	r30, r16
     72e:	81 91       	ld	r24, Z+
     730:	8f 01       	movw	r16, r30
     732:	81 11       	cpse	r24, r1
     734:	fa cf       	rjmp	.-12     	; 0x72a <conntoed+0x80>
	{
		USART_0_write(lcdsig[i++]);		// send the saved LCD response to the Editor
	}
	return(0);
     736:	80 e0       	ldi	r24, 0x00	; 0
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	05 c0       	rjmp	.+10     	; 0x746 <conntoed+0x9c>


	i = getconnect(inbuf,sizeof(inbuf));
	if (i < 0)
	{
		return(-1);
     73c:	8f ef       	ldi	r24, 0xFF	; 255
     73e:	9f ef       	ldi	r25, 0xFF	; 255
     740:	02 c0       	rjmp	.+4      	; 0x746 <conntoed+0x9c>
	i = 0;
	while(lcdsig[i])
	{
		USART_0_write(lcdsig[i++]);		// send the saved LCD response to the Editor
	}
	return(0);
     742:	80 e0       	ldi	r24, 0x00	; 0
     744:	90 e0       	ldi	r25, 0x00	; 0
}
     746:	cc 57       	subi	r28, 0x7C	; 124
     748:	df 4f       	sbci	r29, 0xFF	; 255
     74a:	0f b6       	in	r0, 0x3f	; 63
     74c:	f8 94       	cli
     74e:	de bf       	out	0x3e, r29	; 62
     750:	0f be       	out	0x3f, r0	; 63
     752:	cd bf       	out	0x3d, r28	; 61
     754:	df 91       	pop	r29
     756:	cf 91       	pop	r28
     758:	1f 91       	pop	r17
     75a:	0f 91       	pop	r16
     75c:	ff 90       	pop	r15
     75e:	ef 90       	pop	r14
     760:	08 95       	ret

00000762 <getupcmd>:


// wait for and parse the baud rate from the 'upload' command
// return the new baud rate or -1 if not found
long getupcmd(void)
{
     762:	7f 92       	push	r7
     764:	8f 92       	push	r8
     766:	9f 92       	push	r9
     768:	af 92       	push	r10
     76a:	bf 92       	push	r11
     76c:	cf 92       	push	r12
     76e:	df 92       	push	r13
     770:	ef 92       	push	r14
     772:	ff 92       	push	r15
     774:	0f 93       	push	r16
     776:	1f 93       	push	r17
     778:	cf 93       	push	r28
     77a:	df 93       	push	r29
     77c:	cd b7       	in	r28, 0x3d	; 61
     77e:	de b7       	in	r29, 0x3e	; 62
     780:	2e 97       	sbiw	r28, 0x0e	; 14
     782:	0f b6       	in	r0, 0x3f	; 63
     784:	f8 94       	cli
     786:	de bf       	out	0x3e, r29	; 62
     788:	0f be       	out	0x3f, r0	; 63
     78a:	cd bf       	out	0x3d, r28	; 61
	int mindex = 0;
	int wtim, termcnt = 0, commacnt = 0;
	volatile long newbaud = 0;
     78c:	19 82       	std	Y+1, r1	; 0x01
     78e:	1a 82       	std	Y+2, r1	; 0x02
     790:	1b 82       	std	Y+3, r1	; 0x03
     792:	1c 82       	std	Y+4, r1	; 0x04
	char ch;
	bool validcmd = false;

	const char uploadmsg[]="whmi-wri ";		// expected upload command
     794:	8a e0       	ldi	r24, 0x0A	; 10
     796:	e7 e4       	ldi	r30, 0x47	; 71
     798:	f2 e0       	ldi	r31, 0x02	; 2
     79a:	de 01       	movw	r26, r28
     79c:	15 96       	adiw	r26, 0x05	; 5
     79e:	01 90       	ld	r0, Z+
     7a0:	0d 92       	st	X+, r0
     7a2:	8a 95       	dec	r24
     7a4:	e1 f7       	brne	.-8      	; 0x79e <getupcmd+0x3c>
     7a6:	0f 2e       	mov	r0, r31
     7a8:	f8 e8       	ldi	r31, 0x88	; 136
     7aa:	8f 2e       	mov	r8, r31
     7ac:	f3 e1       	ldi	r31, 0x13	; 19
     7ae:	9f 2e       	mov	r9, r31
     7b0:	f0 2d       	mov	r31, r0
{
	int mindex = 0;
	int wtim, termcnt = 0, commacnt = 0;
	volatile long newbaud = 0;
	char ch;
	bool validcmd = false;
     7b2:	00 e0       	ldi	r16, 0x00	; 0
// wait for and parse the baud rate from the 'upload' command
// return the new baud rate or -1 if not found
long getupcmd(void)
{
	int mindex = 0;
	int wtim, termcnt = 0, commacnt = 0;
     7b4:	c1 2c       	mov	r12, r1
     7b6:	d1 2c       	mov	r13, r1
     7b8:	a1 2c       	mov	r10, r1
     7ba:	b1 2c       	mov	r11, r1

// wait for and parse the baud rate from the 'upload' command
// return the new baud rate or -1 if not found
long getupcmd(void)
{
	int mindex = 0;
     7bc:	e1 2c       	mov	r14, r1
     7be:	f1 2c       	mov	r15, r1
				{
					//						USART_3_write(ch);
					mindex++;
					if (mindex == sizeof(uploadmsg)-1)	// all matched
					{
						validcmd = true;
     7c0:	77 24       	eor	r7, r7
     7c2:	73 94       	inc	r7

	for (wtim = 0; (wtim < 5000); wtim++)		// hang around waiting for some input
	{
		while(USART_0_is_rx_ready())
		{
			ch = USART_0_read();
     7c4:	67 c0       	rjmp	.+206    	; 0x894 <getupcmd+0x132>
			USART_2_write(ch);	// copy to the LCD
     7c6:	cd d2       	rcall	.+1434   	; 0xd62 <USART_0_read>
     7c8:	18 2f       	mov	r17, r24
			if (!(validcmd)) {
     7ca:	13 d4       	rcall	.+2086   	; 0xff2 <USART_2_write>
     7cc:	01 11       	cpse	r16, r1
				if (uploadmsg[mindex] == ch)			// compare this char with upload cmd string
     7ce:	1b c0       	rjmp	.+54     	; 0x806 <getupcmd+0xa4>
     7d0:	e5 e0       	ldi	r30, 0x05	; 5
     7d2:	f0 e0       	ldi	r31, 0x00	; 0
     7d4:	ec 0f       	add	r30, r28
     7d6:	fd 1f       	adc	r31, r29
     7d8:	ee 0d       	add	r30, r14
     7da:	ff 1d       	adc	r31, r15
     7dc:	80 81       	ld	r24, Z
     7de:	18 13       	cpse	r17, r24
				{
					//						USART_3_write(ch);
					mindex++;
     7e0:	57 c0       	rjmp	.+174    	; 0x890 <getupcmd+0x12e>
     7e2:	8f ef       	ldi	r24, 0xFF	; 255
     7e4:	e8 1a       	sub	r14, r24
					if (mindex == sizeof(uploadmsg)-1)	// all matched
     7e6:	f8 0a       	sbc	r15, r24
     7e8:	89 e0       	ldi	r24, 0x09	; 9
     7ea:	e8 16       	cp	r14, r24
     7ec:	f1 04       	cpc	r15, r1
     7ee:	09 f0       	breq	.+2      	; 0x7f2 <getupcmd+0x90>
					{
						validcmd = true;
						commacnt = 0;
						termcnt = 0;
						newbaud = 0;
     7f0:	51 c0       	rjmp	.+162    	; 0x894 <getupcmd+0x132>
     7f2:	19 82       	std	Y+1, r1	; 0x01
     7f4:	1a 82       	std	Y+2, r1	; 0x02
     7f6:	1b 82       	std	Y+3, r1	; 0x03
				{
					//						USART_3_write(ch);
					mindex++;
					if (mindex == sizeof(uploadmsg)-1)	// all matched
					{
						validcmd = true;
     7f8:	1c 82       	std	Y+4, r1	; 0x04
						commacnt = 0;
     7fa:	07 2d       	mov	r16, r7
     7fc:	c1 2c       	mov	r12, r1
						termcnt = 0;
     7fe:	d1 2c       	mov	r13, r1
     800:	a1 2c       	mov	r10, r1
     802:	b1 2c       	mov	r11, r1
				}
			}
			else
			{
				// valid upload command seen - we need to get the params and find the end
				if (ch == 0xff)
     804:	47 c0       	rjmp	.+142    	; 0x894 <getupcmd+0x132>
     806:	1f 3f       	cpi	r17, 0xFF	; 255
				{
					termcnt++;
     808:	61 f4       	brne	.+24     	; 0x822 <getupcmd+0xc0>
     80a:	8f ef       	ldi	r24, 0xFF	; 255
     80c:	a8 1a       	sub	r10, r24
					if (termcnt == 3)
     80e:	b8 0a       	sbc	r11, r24
     810:	83 e0       	ldi	r24, 0x03	; 3
     812:	a8 16       	cp	r10, r24
     814:	b1 04       	cpc	r11, r1
					{
						return(newbaud);
     816:	51 f4       	brne	.+20     	; 0x82c <getupcmd+0xca>
     818:	69 81       	ldd	r22, Y+1	; 0x01
     81a:	7a 81       	ldd	r23, Y+2	; 0x02
     81c:	8b 81       	ldd	r24, Y+3	; 0x03
     81e:	9c 81       	ldd	r25, Y+4	; 0x04
					}
				}
				if (ch == ',')		// comma between parameters
     820:	5a c0       	rjmp	.+180    	; 0x8d6 <getupcmd+0x174>
     822:	1c 32       	cpi	r17, 0x2C	; 44
				{
					commacnt++;
     824:	19 f4       	brne	.+6      	; 0x82c <getupcmd+0xca>
     826:	8f ef       	ldi	r24, 0xFF	; 255
     828:	c8 1a       	sub	r12, r24
				}
				if (commacnt == 1)
     82a:	d8 0a       	sbc	r13, r24
     82c:	81 e0       	ldi	r24, 0x01	; 1
     82e:	c8 16       	cp	r12, r24
     830:	d1 04       	cpc	r13, r1
				{
					if ((ch >= '0') && (ch <= '9'))
     832:	81 f5       	brne	.+96     	; 0x894 <getupcmd+0x132>
     834:	80 ed       	ldi	r24, 0xD0	; 208
     836:	81 0f       	add	r24, r17
     838:	8a 30       	cpi	r24, 0x0A	; 10
					{
						newbaud *= 10;
     83a:	60 f5       	brcc	.+88     	; 0x894 <getupcmd+0x132>
     83c:	89 81       	ldd	r24, Y+1	; 0x01
     83e:	9a 81       	ldd	r25, Y+2	; 0x02
     840:	ab 81       	ldd	r26, Y+3	; 0x03
     842:	bc 81       	ldd	r27, Y+4	; 0x04
     844:	88 0f       	add	r24, r24
     846:	99 1f       	adc	r25, r25
     848:	aa 1f       	adc	r26, r26
     84a:	bb 1f       	adc	r27, r27
     84c:	ac 01       	movw	r20, r24
     84e:	bd 01       	movw	r22, r26
     850:	44 0f       	add	r20, r20
     852:	55 1f       	adc	r21, r21
     854:	66 1f       	adc	r22, r22
     856:	77 1f       	adc	r23, r23
     858:	44 0f       	add	r20, r20
     85a:	55 1f       	adc	r21, r21
     85c:	66 1f       	adc	r22, r22
     85e:	77 1f       	adc	r23, r23
     860:	84 0f       	add	r24, r20
     862:	95 1f       	adc	r25, r21
     864:	a6 1f       	adc	r26, r22
     866:	b7 1f       	adc	r27, r23
     868:	89 83       	std	Y+1, r24	; 0x01
     86a:	9a 83       	std	Y+2, r25	; 0x02
     86c:	ab 83       	std	Y+3, r26	; 0x03
						newbaud = newbaud + ch - '0';
     86e:	bc 83       	std	Y+4, r27	; 0x04
     870:	89 81       	ldd	r24, Y+1	; 0x01
     872:	9a 81       	ldd	r25, Y+2	; 0x02
     874:	ab 81       	ldd	r26, Y+3	; 0x03
     876:	bc 81       	ldd	r27, Y+4	; 0x04
     878:	81 0f       	add	r24, r17
     87a:	91 1d       	adc	r25, r1
     87c:	a1 1d       	adc	r26, r1
     87e:	b1 1d       	adc	r27, r1
     880:	c0 97       	sbiw	r24, 0x30	; 48
     882:	a1 09       	sbc	r26, r1
     884:	b1 09       	sbc	r27, r1
     886:	89 83       	std	Y+1, r24	; 0x01
     888:	9a 83       	std	Y+2, r25	; 0x02
     88a:	ab 83       	std	Y+3, r26	; 0x03
					}
				}
				else
				{
					//						inindex = 0;	// no need to keep that input
					mindex = 0;		// reset the search
     88c:	bc 83       	std	Y+4, r27	; 0x04

	const char uploadmsg[]="whmi-wri ";		// expected upload command

	for (wtim = 0; (wtim < 5000); wtim++)		// hang around waiting for some input
	{
		while(USART_0_is_rx_ready())
     88e:	02 c0       	rjmp	.+4      	; 0x894 <getupcmd+0x132>
     890:	e1 2c       	mov	r14, r1

			}
		}
		while(USART_2_is_rx_ready())
		{
			ch = USART_2_read();
     892:	f1 2c       	mov	r15, r1
     894:	5f d2       	rcall	.+1214   	; 0xd54 <USART_0_is_rx_ready>
			USART_0_write(ch);	// copy to the PC
     896:	81 11       	cpse	r24, r1
					}
				}

			}
		}
		while(USART_2_is_rx_ready())
     898:	96 cf       	rjmp	.-212    	; 0x7c6 <getupcmd+0x64>
     89a:	02 c0       	rjmp	.+4      	; 0x8a0 <getupcmd+0x13e>
     89c:	91 d3       	rcall	.+1826   	; 0xfc0 <USART_2_read>
		{
			ch = USART_2_read();
			USART_0_write(ch);	// copy to the PC
		}
		delay_ms(1);
     89e:	7a d2       	rcall	.+1268   	; 0xd94 <USART_0_write>
     8a0:	88 d3       	rcall	.+1808   	; 0xfb2 <USART_2_is_rx_ready>
     8a2:	81 11       	cpse	r24, r1
     8a4:	fb cf       	rjmp	.-10     	; 0x89c <getupcmd+0x13a>
     8a6:	81 e0       	ldi	r24, 0x01	; 1
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	8e dc       	rcall	.-1764   	; 0x1c8 <delay_ms>
	char ch;
	bool validcmd = false;

	const char uploadmsg[]="whmi-wri ";		// expected upload command

	for (wtim = 0; (wtim < 5000); wtim++)		// hang around waiting for some input
     8ac:	81 e0       	ldi	r24, 0x01	; 1
			ch = USART_2_read();
			USART_0_write(ch);	// copy to the PC
		}
		delay_ms(1);
	}
	return((newbaud > 0) ? newbaud : -1L);
     8ae:	88 1a       	sub	r8, r24
     8b0:	91 08       	sbc	r9, r1
     8b2:	81 f7       	brne	.-32     	; 0x894 <getupcmd+0x132>
     8b4:	89 81       	ldd	r24, Y+1	; 0x01
     8b6:	9a 81       	ldd	r25, Y+2	; 0x02
     8b8:	ab 81       	ldd	r26, Y+3	; 0x03
     8ba:	bc 81       	ldd	r27, Y+4	; 0x04
     8bc:	18 16       	cp	r1, r24
     8be:	19 06       	cpc	r1, r25
     8c0:	1a 06       	cpc	r1, r26
     8c2:	1b 06       	cpc	r1, r27
     8c4:	2c f4       	brge	.+10     	; 0x8d0 <getupcmd+0x16e>
     8c6:	69 81       	ldd	r22, Y+1	; 0x01
     8c8:	7a 81       	ldd	r23, Y+2	; 0x02
     8ca:	8b 81       	ldd	r24, Y+3	; 0x03
     8cc:	9c 81       	ldd	r25, Y+4	; 0x04
     8ce:	03 c0       	rjmp	.+6      	; 0x8d6 <getupcmd+0x174>
}
     8d0:	6f ef       	ldi	r22, 0xFF	; 255
     8d2:	7f ef       	ldi	r23, 0xFF	; 255
     8d4:	cb 01       	movw	r24, r22
     8d6:	2e 96       	adiw	r28, 0x0e	; 14
     8d8:	0f b6       	in	r0, 0x3f	; 63
     8da:	f8 94       	cli
     8dc:	de bf       	out	0x3e, r29	; 62
     8de:	0f be       	out	0x3f, r0	; 63
     8e0:	cd bf       	out	0x3d, r28	; 61
     8e2:	df 91       	pop	r29
     8e4:	cf 91       	pop	r28
     8e6:	1f 91       	pop	r17
     8e8:	0f 91       	pop	r16
     8ea:	ff 90       	pop	r15
     8ec:	ef 90       	pop	r14
     8ee:	df 90       	pop	r13
     8f0:	cf 90       	pop	r12
     8f2:	bf 90       	pop	r11
     8f4:	af 90       	pop	r10
     8f6:	9f 90       	pop	r9
     8f8:	8f 90       	pop	r8
     8fa:	7f 90       	pop	r7
     8fc:	08 95       	ret

000008fe <doupload>:
     8fe:	cf 92       	push	r12
     900:	df 92       	push	r13
     902:	ef 92       	push	r14
     904:	ff 92       	push	r15
     906:	cf 93       	push	r28
     908:	df 93       	push	r29
     90a:	2b df       	rcall	.-426    	; 0x762 <getupcmd>
     90c:	6b 01       	movw	r12, r22
     90e:	7c 01       	movw	r14, r24
     910:	99 23       	and	r25, r25
     912:	0c f4       	brge	.+2      	; 0x916 <doupload+0x18>
     914:	83 c0       	rjmp	.+262    	; 0xa1c <doupload+0x11e>
     916:	ff 92       	push	r15
     918:	ef 92       	push	r14
     91a:	df 92       	push	r13
     91c:	6f 93       	push	r22
     91e:	81 e5       	ldi	r24, 0x51	; 81
     920:	92 e0       	ldi	r25, 0x02	; 2
     922:	9f 93       	push	r25
     924:	8f 93       	push	r24
     926:	6e d4       	rcall	.+2268   	; 0x1204 <printf>
     928:	0f 90       	pop	r0
     92a:	0f 90       	pop	r0
     92c:	0f 90       	pop	r0
     92e:	0f 90       	pop	r0
     930:	0f 90       	pop	r0
     932:	0f 90       	pop	r0
     934:	80 e6       	ldi	r24, 0x60	; 96
     936:	c8 16       	cp	r12, r24
     938:	89 e0       	ldi	r24, 0x09	; 9
     93a:	d8 06       	cpc	r13, r24
     93c:	e1 04       	cpc	r14, r1
     93e:	f1 04       	cpc	r15, r1
     940:	c9 f1       	breq	.+114    	; 0x9b4 <doupload+0xb6>
     942:	c1 14       	cp	r12, r1
     944:	82 ec       	ldi	r24, 0xC2	; 194
     946:	d8 06       	cpc	r13, r24
     948:	81 e0       	ldi	r24, 0x01	; 1
     94a:	e8 06       	cpc	r14, r24
     94c:	f1 04       	cpc	r15, r1
     94e:	19 f1       	breq	.+70     	; 0x996 <doupload+0x98>
     950:	80 ec       	ldi	r24, 0xC0	; 192
     952:	c8 16       	cp	r12, r24
     954:	82 e1       	ldi	r24, 0x12	; 18
     956:	d8 06       	cpc	r13, r24
     958:	e1 04       	cpc	r14, r1
     95a:	f1 04       	cpc	r15, r1
     95c:	f9 f0       	breq	.+62     	; 0x99c <doupload+0x9e>
     95e:	c1 14       	cp	r12, r1
     960:	81 ee       	ldi	r24, 0xE1	; 225
     962:	d8 06       	cpc	r13, r24
     964:	e1 04       	cpc	r14, r1
     966:	f1 04       	cpc	r15, r1
     968:	e1 f0       	breq	.+56     	; 0x9a2 <doupload+0xa4>
     96a:	80 e8       	ldi	r24, 0x80	; 128
     96c:	c8 16       	cp	r12, r24
     96e:	85 e2       	ldi	r24, 0x25	; 37
     970:	d8 06       	cpc	r13, r24
     972:	e1 04       	cpc	r14, r1
     974:	f1 04       	cpc	r15, r1
     976:	c1 f0       	breq	.+48     	; 0x9a8 <doupload+0xaa>
     978:	c1 14       	cp	r12, r1
     97a:	86 e9       	ldi	r24, 0x96	; 150
     97c:	d8 06       	cpc	r13, r24
     97e:	e1 04       	cpc	r14, r1
     980:	f1 04       	cpc	r15, r1
     982:	a9 f0       	breq	.+42     	; 0x9ae <doupload+0xb0>
     984:	c1 14       	cp	r12, r1
     986:	8b e4       	ldi	r24, 0x4B	; 75
     988:	d8 06       	cpc	r13, r24
     98a:	e1 04       	cpc	r14, r1
     98c:	f1 04       	cpc	r15, r1
     98e:	a9 f4       	brne	.+42     	; 0x9ba <doupload+0xbc>
     990:	c6 e0       	ldi	r28, 0x06	; 6
     992:	d0 e0       	ldi	r29, 0x00	; 0
     994:	14 c0       	rjmp	.+40     	; 0x9be <doupload+0xc0>
     996:	c1 e0       	ldi	r28, 0x01	; 1
     998:	d0 e0       	ldi	r29, 0x00	; 0
     99a:	11 c0       	rjmp	.+34     	; 0x9be <doupload+0xc0>
     99c:	c2 e0       	ldi	r28, 0x02	; 2
     99e:	d0 e0       	ldi	r29, 0x00	; 0
     9a0:	0e c0       	rjmp	.+28     	; 0x9be <doupload+0xc0>
     9a2:	c3 e0       	ldi	r28, 0x03	; 3
     9a4:	d0 e0       	ldi	r29, 0x00	; 0
     9a6:	0b c0       	rjmp	.+22     	; 0x9be <doupload+0xc0>
     9a8:	c4 e0       	ldi	r28, 0x04	; 4
     9aa:	d0 e0       	ldi	r29, 0x00	; 0
     9ac:	08 c0       	rjmp	.+16     	; 0x9be <doupload+0xc0>
     9ae:	c5 e0       	ldi	r28, 0x05	; 5
     9b0:	d0 e0       	ldi	r29, 0x00	; 0
     9b2:	05 c0       	rjmp	.+10     	; 0x9be <doupload+0xc0>
     9b4:	c0 e0       	ldi	r28, 0x00	; 0
     9b6:	d0 e0       	ldi	r29, 0x00	; 0
     9b8:	02 c0       	rjmp	.+4      	; 0x9be <doupload+0xc0>
     9ba:	c7 e0       	ldi	r28, 0x07	; 7
     9bc:	d0 e0       	ldi	r29, 0x00	; 0
     9be:	ce 01       	movw	r24, r28
     9c0:	94 dc       	rcall	.-1752   	; 0x2ea <set0baud>
     9c2:	ce 01       	movw	r24, r28
     9c4:	b5 dc       	rcall	.-1686   	; 0x330 <set2baud>
     9c6:	c0 e0       	ldi	r28, 0x00	; 0
     9c8:	c5 d1       	rcall	.+906    	; 0xd54 <USART_0_is_rx_ready>
     9ca:	88 23       	and	r24, r24
     9cc:	21 f0       	breq	.+8      	; 0x9d6 <doupload+0xd8>
     9ce:	c9 d1       	rcall	.+914    	; 0xd62 <USART_0_read>
     9d0:	10 d3       	rcall	.+1568   	; 0xff2 <USART_2_write>
     9d2:	c0 e0       	ldi	r28, 0x00	; 0
     9d4:	05 c0       	rjmp	.+10     	; 0x9e0 <doupload+0xe2>
     9d6:	cf 5f       	subi	r28, 0xFF	; 255
     9d8:	03 c0       	rjmp	.+6      	; 0x9e0 <doupload+0xe2>
     9da:	cf 5f       	subi	r28, 0xFF	; 255
     9dc:	c2 d1       	rcall	.+900    	; 0xd62 <USART_0_read>
     9de:	09 d3       	rcall	.+1554   	; 0xff2 <USART_2_write>
     9e0:	b9 d1       	rcall	.+882    	; 0xd54 <USART_0_is_rx_ready>
     9e2:	81 11       	cpse	r24, r1
     9e4:	fa cf       	rjmp	.-12     	; 0x9da <doupload+0xdc>
     9e6:	e5 d2       	rcall	.+1482   	; 0xfb2 <USART_2_is_rx_ready>
     9e8:	88 23       	and	r24, r24
     9ea:	a9 f0       	breq	.+42     	; 0xa16 <doupload+0x118>
     9ec:	e9 d2       	rcall	.+1490   	; 0xfc0 <USART_2_read>
     9ee:	d2 d1       	rcall	.+932    	; 0xd94 <USART_0_write>
     9f0:	cc 23       	and	r28, r28
     9f2:	51 f3       	breq	.-44     	; 0x9c8 <doupload+0xca>
     9f4:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <msectimer0>
     9f8:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <msectimer0+0x1>
     9fc:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <msectimer0+0x2>
     a00:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <msectimer0+0x3>
     a04:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <msectimer0+0x4>
     a08:	80 91 27 03 	lds	r24, 0x0327	; 0x800327 <msectimer0+0x5>
     a0c:	80 91 28 03 	lds	r24, 0x0328	; 0x800328 <msectimer0+0x6>
     a10:	80 91 29 03 	lds	r24, 0x0329	; 0x800329 <msectimer0+0x7>
     a14:	d9 cf       	rjmp	.-78     	; 0x9c8 <doupload+0xca>
     a16:	c1 11       	cpse	r28, r1
     a18:	ed cf       	rjmp	.-38     	; 0x9f4 <doupload+0xf6>
     a1a:	d6 cf       	rjmp	.-84     	; 0x9c8 <doupload+0xca>
     a1c:	8f ef       	ldi	r24, 0xFF	; 255
     a1e:	9f ef       	ldi	r25, 0xFF	; 255
     a20:	df 91       	pop	r29
     a22:	cf 91       	pop	r28
     a24:	ff 90       	pop	r15
     a26:	ef 90       	pop	r14
     a28:	df 90       	pop	r13
     a2a:	cf 90       	pop	r12
     a2c:	08 95       	ret

00000a2e <main>:
     a2e:	cf 93       	push	r28
     a30:	df 93       	push	r29
     a32:	cd b7       	in	r28, 0x3d	; 61
     a34:	de b7       	in	r29, 0x3e	; 62
     a36:	2a 97       	sbiw	r28, 0x0a	; 10
     a38:	0f b6       	in	r0, 0x3f	; 63
     a3a:	f8 94       	cli
     a3c:	de bf       	out	0x3e, r29	; 62
     a3e:	0f be       	out	0x3f, r0	; 63
     a40:	cd bf       	out	0x3d, r28	; 61
     a42:	88 e0       	ldi	r24, 0x08	; 8
     a44:	ec ef       	ldi	r30, 0xFC	; 252
     a46:	f2 e0       	ldi	r31, 0x02	; 2
     a48:	de 01       	movw	r26, r28
     a4a:	13 96       	adiw	r26, 0x03	; 3
     a4c:	01 90       	ld	r0, Z+
     a4e:	0d 92       	st	X+, r0
     a50:	8a 95       	dec	r24
     a52:	e1 f7       	brne	.-8      	; 0xa4c <main+0x1e>
     a54:	68 db       	rcall	.-2352   	; 0x126 <atmel_start_init>
     a56:	78 94       	sei
     a58:	1a 82       	std	Y+2, r1	; 0x02
     a5a:	19 82       	std	Y+1, r1	; 0x01
     a5c:	89 81       	ldd	r24, Y+1	; 0x01
     a5e:	9a 81       	ldd	r25, Y+2	; 0x02
     a60:	07 97       	sbiw	r24, 0x07	; 7
     a62:	98 f4       	brcc	.+38     	; 0xa8a <main+0x5c>
     a64:	e9 81       	ldd	r30, Y+1	; 0x01
     a66:	fa 81       	ldd	r31, Y+2	; 0x02
     a68:	83 e0       	ldi	r24, 0x03	; 3
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	8c 0f       	add	r24, r28
     a6e:	9d 1f       	adc	r25, r29
     a70:	e8 0f       	add	r30, r24
     a72:	f9 1f       	adc	r31, r25
     a74:	80 81       	ld	r24, Z
     a76:	54 d3       	rcall	.+1704   	; 0x1120 <USART_3_write>
     a78:	89 81       	ldd	r24, Y+1	; 0x01
     a7a:	9a 81       	ldd	r25, Y+2	; 0x02
     a7c:	01 96       	adiw	r24, 0x01	; 1
     a7e:	9a 83       	std	Y+2, r25	; 0x02
     a80:	89 83       	std	Y+1, r24	; 0x01
     a82:	89 81       	ldd	r24, Y+1	; 0x01
     a84:	9a 81       	ldd	r25, Y+2	; 0x02
     a86:	07 97       	sbiw	r24, 0x07	; 7
     a88:	68 f3       	brcs	.-38     	; 0xa64 <main+0x36>
     a8a:	88 24       	eor	r8, r8
     a8c:	8a 94       	dec	r8
     a8e:	98 2c       	mov	r9, r8
     a90:	0f 2e       	mov	r0, r31
     a92:	f8 e6       	ldi	r31, 0x68	; 104
     a94:	ef 2e       	mov	r14, r31
     a96:	f2 e0       	ldi	r31, 0x02	; 2
     a98:	ff 2e       	mov	r15, r31
     a9a:	f0 2d       	mov	r31, r0
     a9c:	0f 2e       	mov	r0, r31
     a9e:	f6 e7       	ldi	r31, 0x76	; 118
     aa0:	af 2e       	mov	r10, r31
     aa2:	f2 e0       	ldi	r31, 0x02	; 2
     aa4:	bf 2e       	mov	r11, r31
     aa6:	f0 2d       	mov	r31, r0
     aa8:	02 e8       	ldi	r16, 0x82	; 130
     aaa:	12 e0       	ldi	r17, 0x02	; 2
     aac:	0f 2e       	mov	r0, r31
     aae:	fa ea       	ldi	r31, 0xAA	; 170
     ab0:	2f 2e       	mov	r2, r31
     ab2:	f2 e0       	ldi	r31, 0x02	; 2
     ab4:	3f 2e       	mov	r3, r31
     ab6:	f0 2d       	mov	r31, r0
     ab8:	0f 2e       	mov	r0, r31
     aba:	f5 ec       	ldi	r31, 0xC5	; 197
     abc:	6f 2e       	mov	r6, r31
     abe:	f2 e0       	ldi	r31, 0x02	; 2
     ac0:	7f 2e       	mov	r7, r31
     ac2:	f0 2d       	mov	r31, r0
     ac4:	0f 2e       	mov	r0, r31
     ac6:	fe ed       	ldi	r31, 0xDE	; 222
     ac8:	4f 2e       	mov	r4, r31
     aca:	f2 e0       	ldi	r31, 0x02	; 2
     acc:	5f 2e       	mov	r5, r31
     ace:	f0 2d       	mov	r31, r0
     ad0:	9a 82       	std	Y+2, r9	; 0x02
     ad2:	89 82       	std	Y+1, r8	; 0x01
     ad4:	89 81       	ldd	r24, Y+1	; 0x01
     ad6:	9a 81       	ldd	r25, Y+2	; 0x02
     ad8:	18 16       	cp	r1, r24
     ada:	19 06       	cpc	r1, r25
     adc:	6c f0       	brlt	.+26     	; 0xaf8 <main+0xca>
     ade:	ff 92       	push	r15
     ae0:	ef 92       	push	r14
     ae2:	90 d3       	rcall	.+1824   	; 0x1204 <printf>
     ae4:	48 dc       	rcall	.-1904   	; 0x376 <findlcd>
     ae6:	9a 83       	std	Y+2, r25	; 0x02
     ae8:	89 83       	std	Y+1, r24	; 0x01
     aea:	89 81       	ldd	r24, Y+1	; 0x01
     aec:	9a 81       	ldd	r25, Y+2	; 0x02
     aee:	0f 90       	pop	r0
     af0:	0f 90       	pop	r0
     af2:	18 16       	cp	r1, r24
     af4:	19 06       	cpc	r1, r25
     af6:	9c f7       	brge	.-26     	; 0xade <main+0xb0>
     af8:	c9 80       	ldd	r12, Y+1	; 0x01
     afa:	da 80       	ldd	r13, Y+2	; 0x02
     afc:	bf 92       	push	r11
     afe:	af 92       	push	r10
     b00:	81 d3       	rcall	.+1794   	; 0x1204 <printf>
     b02:	9a 82       	std	Y+2, r9	; 0x02
     b04:	89 82       	std	Y+1, r8	; 0x01
     b06:	0f 90       	pop	r0
     b08:	0f 90       	pop	r0
     b0a:	11 c0       	rjmp	.+34     	; 0xb2e <main+0x100>
     b0c:	1f 93       	push	r17
     b0e:	0f 93       	push	r16
     b10:	79 d3       	rcall	.+1778   	; 0x1204 <printf>
     b12:	cb dd       	rcall	.-1130   	; 0x6aa <conntoed>
     b14:	9a 83       	std	Y+2, r25	; 0x02
     b16:	89 83       	std	Y+1, r24	; 0x01
     b18:	89 81       	ldd	r24, Y+1	; 0x01
     b1a:	9a 81       	ldd	r25, Y+2	; 0x02
     b1c:	0f 90       	pop	r0
     b1e:	0f 90       	pop	r0
     b20:	99 23       	and	r25, r25
     b22:	2c f0       	brlt	.+10     	; 0xb2e <main+0x100>
     b24:	3f 92       	push	r3
     b26:	2f 92       	push	r2
     b28:	6d d3       	rcall	.+1754   	; 0x1204 <printf>
     b2a:	0f 90       	pop	r0
     b2c:	0f 90       	pop	r0
     b2e:	89 81       	ldd	r24, Y+1	; 0x01
     b30:	9a 81       	ldd	r25, Y+2	; 0x02
     b32:	99 23       	and	r25, r25
     b34:	5c f3       	brlt	.-42     	; 0xb0c <main+0xde>
     b36:	7f 92       	push	r7
     b38:	6f 92       	push	r6
     b3a:	64 d3       	rcall	.+1736   	; 0x1204 <printf>
     b3c:	e0 de       	rcall	.-576    	; 0x8fe <doupload>
     b3e:	c6 01       	movw	r24, r12
     b40:	d4 db       	rcall	.-2136   	; 0x2ea <set0baud>
     b42:	c6 01       	movw	r24, r12
     b44:	f5 db       	rcall	.-2070   	; 0x330 <set2baud>
     b46:	5f 92       	push	r5
     b48:	4f 92       	push	r4
     b4a:	5c d3       	rcall	.+1720   	; 0x1204 <printf>
     b4c:	2f 9a       	sbi	0x05, 7	; 5
     b4e:	0f 90       	pop	r0
     b50:	0f 90       	pop	r0
     b52:	0f 90       	pop	r0
     b54:	0f 90       	pop	r0
     b56:	bc cf       	rjmp	.-136    	; 0xad0 <main+0xa2>

00000b58 <USART_0_initialization>:
 */
static inline void PORTE_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRE &= ~(1 << pin);
     b58:	68 98       	cbi	0x0d, 0	; 13
		DDRE &= ~(1 << pin);

		PORTE |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {

		PORTE &= ~(1 << pin);
     b5a:	70 98       	cbi	0x0e, 0	; 14
	switch (direction) {
	case PORT_DIR_IN:
		DDRE &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRE |= 1 << pin;
     b5c:	69 9a       	sbi	0x0d, 1	; 13
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	USART_0_init();
     b5e:	71 98       	cbi	0x0e, 1	; 14
     b60:	38 c1       	rjmp	.+624    	; 0xdd2 <USART_0_init>
     b62:	08 95       	ret

00000b64 <USART_1_initialization>:
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
     b64:	52 98       	cbi	0x0a, 2	; 10
		DDRD &= ~(1 << pin);

		PORTD |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {

		PORTD &= ~(1 << pin);
     b66:	5a 98       	cbi	0x0b, 2	; 11
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRD |= 1 << pin;
     b68:	53 9a       	sbi	0x0a, 3	; 10
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	USART_1_init();
     b6a:	5b 98       	cbi	0x0b, 3	; 11
     b6c:	aa c1       	rjmp	.+852    	; 0xec2 <USART_1_init>
     b6e:	08 95       	ret

00000b70 <USART_2_initialization>:
 */
static inline void PORTH_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRH &= ~(1 << pin);
     b70:	a1 e0       	ldi	r26, 0x01	; 1
     b72:	b1 e0       	ldi	r27, 0x01	; 1
     b74:	8c 91       	ld	r24, X
     b76:	8e 7f       	andi	r24, 0xFE	; 254
     b78:	8c 93       	st	X, r24
		DDRH &= ~(1 << pin);

		PORTH |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {

		PORTH &= ~(1 << pin);
     b7a:	e2 e0       	ldi	r30, 0x02	; 2
     b7c:	f1 e0       	ldi	r31, 0x01	; 1
     b7e:	80 81       	ld	r24, Z
     b80:	8e 7f       	andi	r24, 0xFE	; 254
     b82:	80 83       	st	Z, r24
	switch (direction) {
	case PORT_DIR_IN:
		DDRH &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRH |= 1 << pin;
     b84:	8c 91       	ld	r24, X
     b86:	82 60       	ori	r24, 0x02	; 2
     b88:	8c 93       	st	X, r24
static inline void PORTH_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTH |= 1 << pin;
	} else {
		PORTH &= ~(1 << pin);
     b8a:	80 81       	ld	r24, Z
     b8c:	8d 7f       	andi	r24, 0xFD	; 253
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	USART_2_init();
     b8e:	80 83       	st	Z, r24
     b90:	4f c2       	rjmp	.+1182   	; 0x1030 <USART_2_init>
     b92:	08 95       	ret

00000b94 <USART_3_initialization>:
 */
static inline void PORTJ_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRJ &= ~(1 << pin);
     b94:	a4 e0       	ldi	r26, 0x04	; 4
     b96:	b1 e0       	ldi	r27, 0x01	; 1
     b98:	8c 91       	ld	r24, X
     b9a:	8e 7f       	andi	r24, 0xFE	; 254
     b9c:	8c 93       	st	X, r24
		DDRJ &= ~(1 << pin);

		PORTJ |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {

		PORTJ &= ~(1 << pin);
     b9e:	e5 e0       	ldi	r30, 0x05	; 5
     ba0:	f1 e0       	ldi	r31, 0x01	; 1
     ba2:	80 81       	ld	r24, Z
     ba4:	8e 7f       	andi	r24, 0xFE	; 254
     ba6:	80 83       	st	Z, r24
	switch (direction) {
	case PORT_DIR_IN:
		DDRJ &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRJ |= 1 << pin;
     ba8:	8c 91       	ld	r24, X
     baa:	82 60       	ori	r24, 0x02	; 2
     bac:	8c 93       	st	X, r24
static inline void PORTJ_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTJ |= 1 << pin;
	} else {
		PORTJ &= ~(1 << pin);
     bae:	80 81       	ld	r24, Z
     bb0:	8d 7f       	andi	r24, 0xFD	; 253
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	USART_3_init();
     bb2:	80 83       	st	Z, r24
     bb4:	d8 c2       	rjmp	.+1456   	; 0x1166 <USART_3_init>
     bb6:	08 95       	ret

00000bb8 <system_init>:
{
	/* On AVR devices all peripherals are enabled from power on reset, this
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	PRR1 = (1 << PRTIM4) | (1 << PRTIM5) | (1 << PRTIM3) | (1 << PRUSART3) | (1 << PRUSART2) | (1 << PRUSART1);
     bb8:	8f e3       	ldi	r24, 0x3F	; 63
     bba:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x700065>

	PRR0 = (1 << PRSPI) | (1 << PRTIM2) | (1 << PRTIM0) | (1 << PRTIM1) | (1 << PRTWI) | (1 << PRUSART0) | (1 << PRADC);
     bbe:	8f ee       	ldi	r24, 0xEF	; 239
     bc0:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x700064>
		break;
	case PORT_DIR_OUT:
		DDRA |= mask;
		break;
	case PORT_DIR_OFF:
		DDRA &= ~mask;
     bc4:	81 b1       	in	r24, 0x01	; 1
     bc6:	11 b8       	out	0x01, r1	; 1

		PORTA |= mask;
     bc8:	82 b1       	in	r24, 0x02	; 2
     bca:	8f ef       	ldi	r24, 0xFF	; 255
     bcc:	82 b9       	out	0x02, r24	; 2
		break;
	case PORT_DIR_OUT:
		DDRB |= mask;
		break;
	case PORT_DIR_OFF:
		DDRB &= ~mask;
     bce:	94 b1       	in	r25, 0x04	; 4
     bd0:	14 b8       	out	0x04, r1	; 4

		PORTB |= mask;
     bd2:	95 b1       	in	r25, 0x05	; 5
     bd4:	85 b9       	out	0x05, r24	; 5
		break;
	case PORT_DIR_OUT:
		DDRC |= mask;
		break;
	case PORT_DIR_OFF:
		DDRC &= ~mask;
     bd6:	97 b1       	in	r25, 0x07	; 7
     bd8:	17 b8       	out	0x07, r1	; 7

		PORTC |= mask;
     bda:	98 b1       	in	r25, 0x08	; 8
     bdc:	88 b9       	out	0x08, r24	; 8
		break;
	case PORT_DIR_OUT:
		DDRD |= mask;
		break;
	case PORT_DIR_OFF:
		DDRD &= ~mask;
     bde:	9a b1       	in	r25, 0x0a	; 10
     be0:	1a b8       	out	0x0a, r1	; 10

		PORTD |= mask;
     be2:	9b b1       	in	r25, 0x0b	; 11
     be4:	8b b9       	out	0x0b, r24	; 11
		break;
	case PORT_DIR_OUT:
		DDRE |= mask;
		break;
	case PORT_DIR_OFF:
		DDRE &= ~mask;
     be6:	9d b1       	in	r25, 0x0d	; 13
     be8:	1d b8       	out	0x0d, r1	; 13

		PORTE |= mask;
     bea:	9e b1       	in	r25, 0x0e	; 14
     bec:	8e b9       	out	0x0e, r24	; 14
		break;
	case PORT_DIR_OUT:
		DDRF |= mask;
		break;
	case PORT_DIR_OFF:
		DDRF &= ~mask;
     bee:	90 b3       	in	r25, 0x10	; 16
     bf0:	10 ba       	out	0x10, r1	; 16

		PORTF |= mask;
     bf2:	91 b3       	in	r25, 0x11	; 17
     bf4:	81 bb       	out	0x11, r24	; 17
		break;
	case PORT_DIR_OUT:
		DDRG |= mask;
		break;
	case PORT_DIR_OFF:
		DDRG &= ~mask;
     bf6:	93 b3       	in	r25, 0x13	; 19
     bf8:	90 7c       	andi	r25, 0xC0	; 192
     bfa:	93 bb       	out	0x13, r25	; 19

		PORTG |= mask;
     bfc:	94 b3       	in	r25, 0x14	; 20
     bfe:	9f 63       	ori	r25, 0x3F	; 63
     c00:	94 bb       	out	0x14, r25	; 20
		break;
	case PORT_DIR_OUT:
		DDRH |= mask;
		break;
	case PORT_DIR_OFF:
		DDRH &= ~mask;
     c02:	e1 e0       	ldi	r30, 0x01	; 1
     c04:	f1 e0       	ldi	r31, 0x01	; 1
     c06:	90 81       	ld	r25, Z
     c08:	10 82       	st	Z, r1

		PORTH |= mask;
     c0a:	e2 e0       	ldi	r30, 0x02	; 2
     c0c:	f1 e0       	ldi	r31, 0x01	; 1
     c0e:	90 81       	ld	r25, Z
     c10:	80 83       	st	Z, r24
		break;
	case PORT_DIR_OUT:
		DDRJ |= mask;
		break;
	case PORT_DIR_OFF:
		DDRJ &= ~mask;
     c12:	e4 e0       	ldi	r30, 0x04	; 4
     c14:	f1 e0       	ldi	r31, 0x01	; 1
     c16:	90 81       	ld	r25, Z
     c18:	10 82       	st	Z, r1

		PORTJ |= mask;
     c1a:	e5 e0       	ldi	r30, 0x05	; 5
     c1c:	f1 e0       	ldi	r31, 0x01	; 1
     c1e:	90 81       	ld	r25, Z
     c20:	80 83       	st	Z, r24
		break;
	case PORT_DIR_OUT:
		DDRK |= mask;
		break;
	case PORT_DIR_OFF:
		DDRK &= ~mask;
     c22:	e7 e0       	ldi	r30, 0x07	; 7
     c24:	f1 e0       	ldi	r31, 0x01	; 1
     c26:	90 81       	ld	r25, Z
     c28:	10 82       	st	Z, r1

		PORTK |= mask;
     c2a:	e8 e0       	ldi	r30, 0x08	; 8
     c2c:	f1 e0       	ldi	r31, 0x01	; 1
     c2e:	90 81       	ld	r25, Z
     c30:	80 83       	st	Z, r24
		break;
	case PORT_DIR_OUT:
		DDRL |= mask;
		break;
	case PORT_DIR_OFF:
		DDRL &= ~mask;
     c32:	ea e0       	ldi	r30, 0x0A	; 10
     c34:	f1 e0       	ldi	r31, 0x01	; 1
     c36:	90 81       	ld	r25, Z
     c38:	10 82       	st	Z, r1

		PORTL |= mask;
     c3a:	eb e0       	ldi	r30, 0x0B	; 11
     c3c:	f1 e0       	ldi	r31, 0x01	; 1
     c3e:	90 81       	ld	r25, Z
     c40:	80 83       	st	Z, r24
	switch (direction) {
	case PORT_DIR_IN:
		DDRB &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRB |= 1 << pin;
     c42:	27 9a       	sbi	0x04, 7	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTB |= 1 << pin;
	} else {
		PORTB &= ~(1 << pin);
     c44:	2f 98       	cbi	0x05, 7	; 5
 * \return Initialization status.
 */
static inline int8_t sysctrl_init()
{
	/* Set up system clock prescaler according to configuration */
	protected_write_io((void *)&CLKPR, 1 << CLKPCE, (0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0));
     c46:	40 e0       	ldi	r20, 0x00	; 0
     c48:	60 e8       	ldi	r22, 0x80	; 128
     c4a:	81 e6       	ldi	r24, 0x61	; 97
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	08 d0       	rcall	.+16     	; 0xc60 <protected_write_io>

	TIMER_0_initialization();

	USART_0_initialization();

	USART_1_initialization();
     c50:	13 be       	out	0x33, r1	; 51
     c52:	15 be       	out	0x35, r1	; 53

	USART_2_initialization();
     c54:	0d d0       	rcall	.+26     	; 0xc70 <TIMER_0_init>
     c56:	80 df       	rcall	.-256    	; 0xb58 <USART_0_initialization>

	USART_3_initialization();
     c58:	85 df       	rcall	.-246    	; 0xb64 <USART_1_initialization>
     c5a:	8a df       	rcall	.-236    	; 0xb70 <USART_2_initialization>
     c5c:	9b cf       	rjmp	.-202    	; 0xb94 <USART_3_initialization>
     c5e:	08 95       	ret

00000c60 <protected_write_io>:
#if defined(__GNUC__)
	/*
	 * We need to disable interrupts globally before the protected
	 * sequence. In order to do that we must save SREG first.
	 */
	in      r18,    _SFR_IO_ADDR(SREG)
     c60:	2f b7       	in	r18, 0x3f	; 63
	cli
     c62:	f8 94       	cli
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
     c64:	1b be       	out	0x3b, r1	; 59
#endif
	movw    r30, r24                // Load addr into Z
     c66:	fc 01       	movw	r30, r24
	st      Z, r22                  // Write protection bit to I/O register
     c68:	60 83       	st	Z, r22
	st      Z, r20                  // Write value to I/O register
     c6a:	40 83       	st	Z, r20
	out     _SFR_IO_ADDR(SREG), r18
     c6c:	2f bf       	out	0x3f, r18	; 63

	ret                             // Return to caller
     c6e:	08 95       	ret

00000c70 <TIMER_0_init>:
 */
int8_t TIMER_0_init()
{

	/* Enable TC1 */
	PRR0 &= ~(1 << PRTIM1);
     c70:	e4 e6       	ldi	r30, 0x64	; 100
     c72:	f0 e0       	ldi	r31, 0x00	; 0
     c74:	80 81       	ld	r24, Z
     c76:	87 7f       	andi	r24, 0xF7	; 247
     c78:	80 83       	st	Z, r24

	// TCCR1A = (0 << COM1A1) | (0 << COM1A0) /* Normal port operation, OCA disconnected */
	//		 | (0 << COM1B1) | (0 << COM1B0) /* Normal port operation, OCB disconnected */
	//		 | (0 << WGM11) | (0 << WGM10); /* TC16 Mode 0 Normal */

	TCCR1B = (0 << WGM13) | (0 << WGM12)                /* TC16 Mode 0 Normal */
     c7a:	81 e0       	ldi	r24, 0x01	; 1
     c7c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
	         | 0 << ICES1                               /* Input Capture Edge Select: disabled */
	         | (0 << CS12) | (0 << CS11) | (1 << CS10); /* No prescaling */

	// ICR1 = 0; /* Input capture value, used as top counter value in some modes: 0 */

	OCR1A = 16000; /* Output compare A: 16000 */
     c80:	80 e8       	ldi	r24, 0x80	; 128
     c82:	9e e3       	ldi	r25, 0x3E	; 62
     c84:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
     c88:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>

	OCR1B = 16000; /* Output compare B: 16000 */
     c8c:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
     c90:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>

	TIMSK1 = 0 << OCIE1B   /* Output Compare B Match Interrupt Enable: disabled */
     c94:	82 e0       	ldi	r24, 0x02	; 2
     c96:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x70006f>
	         | 1 << OCIE1A /* Output Compare A Match Interrupt Enable: enabled */
	         | 0 << ICIE1  /* Input Capture Interrupt Enable: disabled */
	         | 0 << TOIE1; /* Overflow Interrupt Enable: disabled */

	return 0;
}
     c9a:	80 e0       	ldi	r24, 0x00	; 0
     c9c:	08 95       	ret

00000c9e <__vector_25>:
	USART_3_rx_elements--;
	EXIT_CRITICAL(R);

	/* Return data */
	return USART_3_rxbuf[tmptail];
}
     c9e:	1f 92       	push	r1
     ca0:	0f 92       	push	r0
     ca2:	0f b6       	in	r0, 0x3f	; 63
     ca4:	0f 92       	push	r0
     ca6:	11 24       	eor	r1, r1
     ca8:	0b b6       	in	r0, 0x3b	; 59
     caa:	0f 92       	push	r0
     cac:	8f 93       	push	r24
     cae:	9f 93       	push	r25
     cb0:	ef 93       	push	r30
     cb2:	ff 93       	push	r31
     cb4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     cb8:	e0 91 31 04 	lds	r30, 0x0431	; 0x800431 <USART_0_rx_head>
     cbc:	ef 5f       	subi	r30, 0xFF	; 255
     cbe:	ef 77       	andi	r30, 0x7F	; 127
     cc0:	e0 93 31 04 	sts	0x0431, r30	; 0x800431 <USART_0_rx_head>
     cc4:	90 91 30 04 	lds	r25, 0x0430	; 0x800430 <USART_0_rx_tail>
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	ee 5c       	subi	r30, 0xCE	; 206
     ccc:	fb 4f       	sbci	r31, 0xFB	; 251
     cce:	80 83       	st	Z, r24
     cd0:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <USART_0_rx_elements>
     cd4:	8f 5f       	subi	r24, 0xFF	; 255
     cd6:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <USART_0_rx_elements>
     cda:	ff 91       	pop	r31
     cdc:	ef 91       	pop	r30
     cde:	9f 91       	pop	r25
     ce0:	8f 91       	pop	r24
     ce2:	0f 90       	pop	r0
     ce4:	0b be       	out	0x3b, r0	; 59
     ce6:	0f 90       	pop	r0
     ce8:	0f be       	out	0x3f, r0	; 63
     cea:	0f 90       	pop	r0
     cec:	1f 90       	pop	r1
     cee:	18 95       	reti

00000cf0 <__vector_26>:
     cf0:	1f 92       	push	r1
     cf2:	0f 92       	push	r0
     cf4:	0f b6       	in	r0, 0x3f	; 63
     cf6:	0f 92       	push	r0
     cf8:	11 24       	eor	r1, r1
     cfa:	0b b6       	in	r0, 0x3b	; 59
     cfc:	0f 92       	push	r0
     cfe:	8f 93       	push	r24
     d00:	ef 93       	push	r30
     d02:	ff 93       	push	r31
     d04:	80 91 0c 04 	lds	r24, 0x040C	; 0x80040c <USART_0_tx_elements>
     d08:	88 23       	and	r24, r24
     d0a:	89 f0       	breq	.+34     	; 0xd2e <__vector_26+0x3e>
     d0c:	e0 91 0d 04 	lds	r30, 0x040D	; 0x80040d <USART_0_tx_tail>
     d10:	ef 5f       	subi	r30, 0xFF	; 255
     d12:	ef 71       	andi	r30, 0x1F	; 31
     d14:	e0 93 0d 04 	sts	0x040D, r30	; 0x80040d <USART_0_tx_tail>
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	e1 5f       	subi	r30, 0xF1	; 241
     d1c:	fb 4f       	sbci	r31, 0xFB	; 251
     d1e:	80 81       	ld	r24, Z
     d20:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     d24:	80 91 0c 04 	lds	r24, 0x040C	; 0x80040c <USART_0_tx_elements>
     d28:	81 50       	subi	r24, 0x01	; 1
     d2a:	80 93 0c 04 	sts	0x040C, r24	; 0x80040c <USART_0_tx_elements>
     d2e:	80 91 0c 04 	lds	r24, 0x040C	; 0x80040c <USART_0_tx_elements>
     d32:	81 11       	cpse	r24, r1
     d34:	05 c0       	rjmp	.+10     	; 0xd40 <__vector_26+0x50>
     d36:	e1 ec       	ldi	r30, 0xC1	; 193
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	80 81       	ld	r24, Z
     d3c:	8f 7d       	andi	r24, 0xDF	; 223
     d3e:	80 83       	st	Z, r24
     d40:	ff 91       	pop	r31
     d42:	ef 91       	pop	r30
     d44:	8f 91       	pop	r24
     d46:	0f 90       	pop	r0
     d48:	0b be       	out	0x3b, r0	; 59
     d4a:	0f 90       	pop	r0
     d4c:	0f be       	out	0x3f, r0	; 63
     d4e:	0f 90       	pop	r0
     d50:	1f 90       	pop	r1
     d52:	18 95       	reti

00000d54 <USART_0_is_rx_ready>:
     d54:	90 91 2f 04 	lds	r25, 0x042F	; 0x80042f <USART_0_rx_elements>
     d58:	81 e0       	ldi	r24, 0x01	; 1
     d5a:	91 11       	cpse	r25, r1
     d5c:	01 c0       	rjmp	.+2      	; 0xd60 <USART_0_is_rx_ready+0xc>
     d5e:	80 e0       	ldi	r24, 0x00	; 0
     d60:	08 95       	ret

00000d62 <USART_0_read>:
     d62:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <USART_0_rx_elements>
     d66:	88 23       	and	r24, r24
     d68:	e1 f3       	breq	.-8      	; 0xd62 <USART_0_read>
     d6a:	e0 91 30 04 	lds	r30, 0x0430	; 0x800430 <USART_0_rx_tail>
     d6e:	ef 5f       	subi	r30, 0xFF	; 255
     d70:	ef 77       	andi	r30, 0x7F	; 127
     d72:	e0 93 30 04 	sts	0x0430, r30	; 0x800430 <USART_0_rx_tail>
     d76:	0f b6       	in	r0, 0x3f	; 63
     d78:	f8 94       	cli
     d7a:	0f 92       	push	r0
     d7c:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <USART_0_rx_elements>
     d80:	81 50       	subi	r24, 0x01	; 1
     d82:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <USART_0_rx_elements>
     d86:	0f 90       	pop	r0
     d88:	0f be       	out	0x3f, r0	; 63
     d8a:	f0 e0       	ldi	r31, 0x00	; 0
     d8c:	ee 5c       	subi	r30, 0xCE	; 206
     d8e:	fb 4f       	sbci	r31, 0xFB	; 251
     d90:	80 81       	ld	r24, Z
     d92:	08 95       	ret

00000d94 <USART_0_write>:
     d94:	20 91 0e 04 	lds	r18, 0x040E	; 0x80040e <USART_0_tx_head>
     d98:	2f 5f       	subi	r18, 0xFF	; 255
     d9a:	2f 71       	andi	r18, 0x1F	; 31
     d9c:	90 91 0c 04 	lds	r25, 0x040C	; 0x80040c <USART_0_tx_elements>
     da0:	90 32       	cpi	r25, 0x20	; 32
     da2:	e1 f3       	breq	.-8      	; 0xd9c <USART_0_write+0x8>
     da4:	e2 2f       	mov	r30, r18
     da6:	f0 e0       	ldi	r31, 0x00	; 0
     da8:	e1 5f       	subi	r30, 0xF1	; 241
     daa:	fb 4f       	sbci	r31, 0xFB	; 251
     dac:	80 83       	st	Z, r24
     dae:	20 93 0e 04 	sts	0x040E, r18	; 0x80040e <USART_0_tx_head>
     db2:	0f b6       	in	r0, 0x3f	; 63
     db4:	f8 94       	cli
     db6:	0f 92       	push	r0
     db8:	80 91 0c 04 	lds	r24, 0x040C	; 0x80040c <USART_0_tx_elements>
     dbc:	8f 5f       	subi	r24, 0xFF	; 255
     dbe:	80 93 0c 04 	sts	0x040C, r24	; 0x80040c <USART_0_tx_elements>
     dc2:	0f 90       	pop	r0
     dc4:	0f be       	out	0x3f, r0	; 63
     dc6:	e1 ec       	ldi	r30, 0xC1	; 193
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	80 81       	ld	r24, Z
     dcc:	80 62       	ori	r24, 0x20	; 32
     dce:	80 83       	st	Z, r24
     dd0:	08 95       	ret

00000dd2 <USART_0_init>:
     dd2:	e4 e6       	ldi	r30, 0x64	; 100
     dd4:	f0 e0       	ldi	r31, 0x00	; 0
     dd6:	80 81       	ld	r24, Z
     dd8:	8d 7f       	andi	r24, 0xFD	; 253
     dda:	80 83       	st	Z, r24
     ddc:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
     de0:	87 e6       	ldi	r24, 0x67	; 103
     de2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
     de6:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
     dea:	88 e9       	ldi	r24, 0x98	; 152
     dec:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
     df0:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <USART_0_rx_tail>
     df4:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <USART_0_rx_head>
     df8:	10 92 2f 04 	sts	0x042F, r1	; 0x80042f <USART_0_rx_elements>
     dfc:	10 92 0d 04 	sts	0x040D, r1	; 0x80040d <USART_0_tx_tail>
     e00:	10 92 0e 04 	sts	0x040E, r1	; 0x80040e <USART_0_tx_head>
     e04:	10 92 0c 04 	sts	0x040C, r1	; 0x80040c <USART_0_tx_elements>
     e08:	80 e0       	ldi	r24, 0x00	; 0
     e0a:	08 95       	ret

00000e0c <__vector_36>:
     e0c:	1f 92       	push	r1
     e0e:	0f 92       	push	r0
     e10:	0f b6       	in	r0, 0x3f	; 63
     e12:	0f 92       	push	r0
     e14:	11 24       	eor	r1, r1
     e16:	0b b6       	in	r0, 0x3b	; 59
     e18:	0f 92       	push	r0
     e1a:	8f 93       	push	r24
     e1c:	9f 93       	push	r25
     e1e:	ef 93       	push	r30
     e20:	ff 93       	push	r31
     e22:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
     e26:	e0 91 03 04 	lds	r30, 0x0403	; 0x800403 <USART_1_rx_head>
     e2a:	ef 5f       	subi	r30, 0xFF	; 255
     e2c:	e7 70       	andi	r30, 0x07	; 7
     e2e:	e0 93 03 04 	sts	0x0403, r30	; 0x800403 <USART_1_rx_head>
     e32:	90 91 02 04 	lds	r25, 0x0402	; 0x800402 <USART_1_rx_tail>
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	ec 5f       	subi	r30, 0xFC	; 252
     e3a:	fb 4f       	sbci	r31, 0xFB	; 251
     e3c:	80 83       	st	Z, r24
     e3e:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <USART_1_rx_elements>
     e42:	8f 5f       	subi	r24, 0xFF	; 255
     e44:	80 93 01 04 	sts	0x0401, r24	; 0x800401 <USART_1_rx_elements>
     e48:	ff 91       	pop	r31
     e4a:	ef 91       	pop	r30
     e4c:	9f 91       	pop	r25
     e4e:	8f 91       	pop	r24
     e50:	0f 90       	pop	r0
     e52:	0b be       	out	0x3b, r0	; 59
     e54:	0f 90       	pop	r0
     e56:	0f be       	out	0x3f, r0	; 63
     e58:	0f 90       	pop	r0
     e5a:	1f 90       	pop	r1
     e5c:	18 95       	reti

00000e5e <__vector_37>:
     e5e:	1f 92       	push	r1
     e60:	0f 92       	push	r0
     e62:	0f b6       	in	r0, 0x3f	; 63
     e64:	0f 92       	push	r0
     e66:	11 24       	eor	r1, r1
     e68:	0b b6       	in	r0, 0x3b	; 59
     e6a:	0f 92       	push	r0
     e6c:	8f 93       	push	r24
     e6e:	ef 93       	push	r30
     e70:	ff 93       	push	r31
     e72:	80 91 f6 03 	lds	r24, 0x03F6	; 0x8003f6 <USART_1_tx_elements>
     e76:	88 23       	and	r24, r24
     e78:	89 f0       	breq	.+34     	; 0xe9c <__vector_37+0x3e>
     e7a:	e0 91 f7 03 	lds	r30, 0x03F7	; 0x8003f7 <USART_1_tx_tail>
     e7e:	ef 5f       	subi	r30, 0xFF	; 255
     e80:	e7 70       	andi	r30, 0x07	; 7
     e82:	e0 93 f7 03 	sts	0x03F7, r30	; 0x8003f7 <USART_1_tx_tail>
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	e7 50       	subi	r30, 0x07	; 7
     e8a:	fc 4f       	sbci	r31, 0xFC	; 252
     e8c:	80 81       	ld	r24, Z
     e8e:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
     e92:	80 91 f6 03 	lds	r24, 0x03F6	; 0x8003f6 <USART_1_tx_elements>
     e96:	81 50       	subi	r24, 0x01	; 1
     e98:	80 93 f6 03 	sts	0x03F6, r24	; 0x8003f6 <USART_1_tx_elements>
     e9c:	80 91 f6 03 	lds	r24, 0x03F6	; 0x8003f6 <USART_1_tx_elements>
     ea0:	81 11       	cpse	r24, r1
     ea2:	05 c0       	rjmp	.+10     	; 0xeae <__vector_37+0x50>
     ea4:	e9 ec       	ldi	r30, 0xC9	; 201
     ea6:	f0 e0       	ldi	r31, 0x00	; 0
     ea8:	80 81       	ld	r24, Z
     eaa:	8f 7d       	andi	r24, 0xDF	; 223
     eac:	80 83       	st	Z, r24
     eae:	ff 91       	pop	r31
     eb0:	ef 91       	pop	r30
     eb2:	8f 91       	pop	r24
     eb4:	0f 90       	pop	r0
     eb6:	0b be       	out	0x3b, r0	; 59
     eb8:	0f 90       	pop	r0
     eba:	0f be       	out	0x3f, r0	; 63
     ebc:	0f 90       	pop	r0
     ebe:	1f 90       	pop	r1
     ec0:	18 95       	reti

00000ec2 <USART_1_init>:
     ec2:	e5 e6       	ldi	r30, 0x65	; 101
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	80 81       	ld	r24, Z
     ec8:	8e 7f       	andi	r24, 0xFE	; 254
     eca:	80 83       	st	Z, r24
     ecc:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
     ed0:	87 e6       	ldi	r24, 0x67	; 103
     ed2:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
     ed6:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
     eda:	88 e9       	ldi	r24, 0x98	; 152
     edc:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
     ee0:	10 92 02 04 	sts	0x0402, r1	; 0x800402 <USART_1_rx_tail>
     ee4:	10 92 03 04 	sts	0x0403, r1	; 0x800403 <USART_1_rx_head>
     ee8:	10 92 01 04 	sts	0x0401, r1	; 0x800401 <USART_1_rx_elements>
     eec:	10 92 f7 03 	sts	0x03F7, r1	; 0x8003f7 <USART_1_tx_tail>
     ef0:	10 92 f8 03 	sts	0x03F8, r1	; 0x8003f8 <USART_1_tx_head>
     ef4:	10 92 f6 03 	sts	0x03F6, r1	; 0x8003f6 <USART_1_tx_elements>
     ef8:	80 e0       	ldi	r24, 0x00	; 0
     efa:	08 95       	ret

00000efc <__vector_51>:
     efc:	1f 92       	push	r1
     efe:	0f 92       	push	r0
     f00:	0f b6       	in	r0, 0x3f	; 63
     f02:	0f 92       	push	r0
     f04:	11 24       	eor	r1, r1
     f06:	0b b6       	in	r0, 0x3b	; 59
     f08:	0f 92       	push	r0
     f0a:	8f 93       	push	r24
     f0c:	9f 93       	push	r25
     f0e:	ef 93       	push	r30
     f10:	ff 93       	push	r31
     f12:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
     f16:	e0 91 b5 03 	lds	r30, 0x03B5	; 0x8003b5 <USART_2_rx_head>
     f1a:	ef 5f       	subi	r30, 0xFF	; 255
     f1c:	ef 73       	andi	r30, 0x3F	; 63
     f1e:	e0 93 b5 03 	sts	0x03B5, r30	; 0x8003b5 <USART_2_rx_head>
     f22:	90 91 b4 03 	lds	r25, 0x03B4	; 0x8003b4 <USART_2_rx_tail>
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	ea 54       	subi	r30, 0x4A	; 74
     f2a:	fc 4f       	sbci	r31, 0xFC	; 252
     f2c:	80 83       	st	Z, r24
     f2e:	80 91 b3 03 	lds	r24, 0x03B3	; 0x8003b3 <USART_2_rx_elements>
     f32:	8f 5f       	subi	r24, 0xFF	; 255
     f34:	80 93 b3 03 	sts	0x03B3, r24	; 0x8003b3 <USART_2_rx_elements>
     f38:	ff 91       	pop	r31
     f3a:	ef 91       	pop	r30
     f3c:	9f 91       	pop	r25
     f3e:	8f 91       	pop	r24
     f40:	0f 90       	pop	r0
     f42:	0b be       	out	0x3b, r0	; 59
     f44:	0f 90       	pop	r0
     f46:	0f be       	out	0x3f, r0	; 63
     f48:	0f 90       	pop	r0
     f4a:	1f 90       	pop	r1
     f4c:	18 95       	reti

00000f4e <__vector_52>:
     f4e:	1f 92       	push	r1
     f50:	0f 92       	push	r0
     f52:	0f b6       	in	r0, 0x3f	; 63
     f54:	0f 92       	push	r0
     f56:	11 24       	eor	r1, r1
     f58:	0b b6       	in	r0, 0x3b	; 59
     f5a:	0f 92       	push	r0
     f5c:	8f 93       	push	r24
     f5e:	ef 93       	push	r30
     f60:	ff 93       	push	r31
     f62:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <USART_2_tx_elements>
     f66:	88 23       	and	r24, r24
     f68:	89 f0       	breq	.+34     	; 0xf8c <__vector_52+0x3e>
     f6a:	e0 91 91 03 	lds	r30, 0x0391	; 0x800391 <USART_2_tx_tail>
     f6e:	ef 5f       	subi	r30, 0xFF	; 255
     f70:	ef 71       	andi	r30, 0x1F	; 31
     f72:	e0 93 91 03 	sts	0x0391, r30	; 0x800391 <USART_2_tx_tail>
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	ed 56       	subi	r30, 0x6D	; 109
     f7a:	fc 4f       	sbci	r31, 0xFC	; 252
     f7c:	80 81       	ld	r24, Z
     f7e:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
     f82:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <USART_2_tx_elements>
     f86:	81 50       	subi	r24, 0x01	; 1
     f88:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <USART_2_tx_elements>
     f8c:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <USART_2_tx_elements>
     f90:	81 11       	cpse	r24, r1
     f92:	05 c0       	rjmp	.+10     	; 0xf9e <__vector_52+0x50>
     f94:	e1 ed       	ldi	r30, 0xD1	; 209
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	80 81       	ld	r24, Z
     f9a:	8f 7d       	andi	r24, 0xDF	; 223
     f9c:	80 83       	st	Z, r24
     f9e:	ff 91       	pop	r31
     fa0:	ef 91       	pop	r30
     fa2:	8f 91       	pop	r24
     fa4:	0f 90       	pop	r0
     fa6:	0b be       	out	0x3b, r0	; 59
     fa8:	0f 90       	pop	r0
     faa:	0f be       	out	0x3f, r0	; 63
     fac:	0f 90       	pop	r0
     fae:	1f 90       	pop	r1
     fb0:	18 95       	reti

00000fb2 <USART_2_is_rx_ready>:
     fb2:	90 91 b3 03 	lds	r25, 0x03B3	; 0x8003b3 <USART_2_rx_elements>
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	91 11       	cpse	r25, r1
     fba:	01 c0       	rjmp	.+2      	; 0xfbe <USART_2_is_rx_ready+0xc>
     fbc:	80 e0       	ldi	r24, 0x00	; 0
     fbe:	08 95       	ret

00000fc0 <USART_2_read>:
     fc0:	80 91 b3 03 	lds	r24, 0x03B3	; 0x8003b3 <USART_2_rx_elements>
     fc4:	88 23       	and	r24, r24
     fc6:	e1 f3       	breq	.-8      	; 0xfc0 <USART_2_read>
     fc8:	e0 91 b4 03 	lds	r30, 0x03B4	; 0x8003b4 <USART_2_rx_tail>
     fcc:	ef 5f       	subi	r30, 0xFF	; 255
     fce:	ef 73       	andi	r30, 0x3F	; 63
     fd0:	e0 93 b4 03 	sts	0x03B4, r30	; 0x8003b4 <USART_2_rx_tail>
     fd4:	0f b6       	in	r0, 0x3f	; 63
     fd6:	f8 94       	cli
     fd8:	0f 92       	push	r0
     fda:	80 91 b3 03 	lds	r24, 0x03B3	; 0x8003b3 <USART_2_rx_elements>
     fde:	81 50       	subi	r24, 0x01	; 1
     fe0:	80 93 b3 03 	sts	0x03B3, r24	; 0x8003b3 <USART_2_rx_elements>
     fe4:	0f 90       	pop	r0
     fe6:	0f be       	out	0x3f, r0	; 63
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	ea 54       	subi	r30, 0x4A	; 74
     fec:	fc 4f       	sbci	r31, 0xFC	; 252
     fee:	80 81       	ld	r24, Z
     ff0:	08 95       	ret

00000ff2 <USART_2_write>:
     ff2:	20 91 92 03 	lds	r18, 0x0392	; 0x800392 <USART_2_tx_head>
     ff6:	2f 5f       	subi	r18, 0xFF	; 255
     ff8:	2f 71       	andi	r18, 0x1F	; 31
     ffa:	90 91 90 03 	lds	r25, 0x0390	; 0x800390 <USART_2_tx_elements>
     ffe:	90 32       	cpi	r25, 0x20	; 32
    1000:	e1 f3       	breq	.-8      	; 0xffa <USART_2_write+0x8>
    1002:	e2 2f       	mov	r30, r18
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	ed 56       	subi	r30, 0x6D	; 109
    1008:	fc 4f       	sbci	r31, 0xFC	; 252
    100a:	80 83       	st	Z, r24
    100c:	20 93 92 03 	sts	0x0392, r18	; 0x800392 <USART_2_tx_head>
    1010:	0f b6       	in	r0, 0x3f	; 63
    1012:	f8 94       	cli
    1014:	0f 92       	push	r0
    1016:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <USART_2_tx_elements>
    101a:	8f 5f       	subi	r24, 0xFF	; 255
    101c:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <USART_2_tx_elements>
    1020:	0f 90       	pop	r0
    1022:	0f be       	out	0x3f, r0	; 63
    1024:	e1 ed       	ldi	r30, 0xD1	; 209
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	80 62       	ori	r24, 0x20	; 32
    102c:	80 83       	st	Z, r24
    102e:	08 95       	ret

00001030 <USART_2_init>:
    1030:	e5 e6       	ldi	r30, 0x65	; 101
    1032:	f0 e0       	ldi	r31, 0x00	; 0
    1034:	80 81       	ld	r24, Z
    1036:	8d 7f       	andi	r24, 0xFD	; 253
    1038:	80 83       	st	Z, r24
    103a:	10 92 d5 00 	sts	0x00D5, r1	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
    103e:	87 e6       	ldi	r24, 0x67	; 103
    1040:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
    1044:	10 92 d0 00 	sts	0x00D0, r1	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
    1048:	88 e9       	ldi	r24, 0x98	; 152
    104a:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>
    104e:	10 92 b4 03 	sts	0x03B4, r1	; 0x8003b4 <USART_2_rx_tail>
    1052:	10 92 b5 03 	sts	0x03B5, r1	; 0x8003b5 <USART_2_rx_head>
    1056:	10 92 b3 03 	sts	0x03B3, r1	; 0x8003b3 <USART_2_rx_elements>
    105a:	10 92 91 03 	sts	0x0391, r1	; 0x800391 <USART_2_tx_tail>
    105e:	10 92 92 03 	sts	0x0392, r1	; 0x800392 <USART_2_tx_head>
    1062:	10 92 90 03 	sts	0x0390, r1	; 0x800390 <USART_2_tx_elements>
    1066:	80 e0       	ldi	r24, 0x00	; 0
    1068:	08 95       	ret

0000106a <__vector_54>:
    106a:	1f 92       	push	r1
    106c:	0f 92       	push	r0
    106e:	0f b6       	in	r0, 0x3f	; 63
    1070:	0f 92       	push	r0
    1072:	11 24       	eor	r1, r1
    1074:	0b b6       	in	r0, 0x3b	; 59
    1076:	0f 92       	push	r0
    1078:	8f 93       	push	r24
    107a:	9f 93       	push	r25
    107c:	ef 93       	push	r30
    107e:	ff 93       	push	r31
    1080:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    1084:	e0 91 87 03 	lds	r30, 0x0387	; 0x800387 <USART_3_rx_head>
    1088:	ef 5f       	subi	r30, 0xFF	; 255
    108a:	e7 70       	andi	r30, 0x07	; 7
    108c:	e0 93 87 03 	sts	0x0387, r30	; 0x800387 <USART_3_rx_head>
    1090:	90 91 86 03 	lds	r25, 0x0386	; 0x800386 <USART_3_rx_tail>
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	e8 57       	subi	r30, 0x78	; 120
    1098:	fc 4f       	sbci	r31, 0xFC	; 252
    109a:	80 83       	st	Z, r24
    109c:	80 91 85 03 	lds	r24, 0x0385	; 0x800385 <USART_3_rx_elements>
    10a0:	8f 5f       	subi	r24, 0xFF	; 255
    10a2:	80 93 85 03 	sts	0x0385, r24	; 0x800385 <USART_3_rx_elements>
    10a6:	ff 91       	pop	r31
    10a8:	ef 91       	pop	r30
    10aa:	9f 91       	pop	r25
    10ac:	8f 91       	pop	r24
    10ae:	0f 90       	pop	r0
    10b0:	0b be       	out	0x3b, r0	; 59
    10b2:	0f 90       	pop	r0
    10b4:	0f be       	out	0x3f, r0	; 63
    10b6:	0f 90       	pop	r0
    10b8:	1f 90       	pop	r1
    10ba:	18 95       	reti

000010bc <__vector_55>:
    10bc:	1f 92       	push	r1
    10be:	0f 92       	push	r0
    10c0:	0f b6       	in	r0, 0x3f	; 63
    10c2:	0f 92       	push	r0
    10c4:	11 24       	eor	r1, r1
    10c6:	0b b6       	in	r0, 0x3b	; 59
    10c8:	0f 92       	push	r0
    10ca:	8f 93       	push	r24
    10cc:	ef 93       	push	r30
    10ce:	ff 93       	push	r31
    10d0:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <USART_3_tx_elements>
    10d4:	88 23       	and	r24, r24
    10d6:	89 f0       	breq	.+34     	; 0x10fa <__vector_55+0x3e>
    10d8:	e0 91 7b 03 	lds	r30, 0x037B	; 0x80037b <USART_3_tx_tail>
    10dc:	ef 5f       	subi	r30, 0xFF	; 255
    10de:	e7 70       	andi	r30, 0x07	; 7
    10e0:	e0 93 7b 03 	sts	0x037B, r30	; 0x80037b <USART_3_tx_tail>
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	e3 58       	subi	r30, 0x83	; 131
    10e8:	fc 4f       	sbci	r31, 0xFC	; 252
    10ea:	80 81       	ld	r24, Z
    10ec:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    10f0:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <USART_3_tx_elements>
    10f4:	81 50       	subi	r24, 0x01	; 1
    10f6:	80 93 7a 03 	sts	0x037A, r24	; 0x80037a <USART_3_tx_elements>
    10fa:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <USART_3_tx_elements>
    10fe:	81 11       	cpse	r24, r1
    1100:	05 c0       	rjmp	.+10     	; 0x110c <__vector_55+0x50>
    1102:	e1 e3       	ldi	r30, 0x31	; 49
    1104:	f1 e0       	ldi	r31, 0x01	; 1
    1106:	80 81       	ld	r24, Z
    1108:	8f 7d       	andi	r24, 0xDF	; 223
    110a:	80 83       	st	Z, r24
    110c:	ff 91       	pop	r31
    110e:	ef 91       	pop	r30
    1110:	8f 91       	pop	r24
    1112:	0f 90       	pop	r0
    1114:	0b be       	out	0x3b, r0	; 59
    1116:	0f 90       	pop	r0
    1118:	0f be       	out	0x3f, r0	; 63
    111a:	0f 90       	pop	r0
    111c:	1f 90       	pop	r1
    111e:	18 95       	reti

00001120 <USART_3_write>:
void USART_3_write(const uint8_t data)
{
	uint8_t tmphead;

	/* Calculate buffer index */
	tmphead = (USART_3_tx_head + 1) & USART_3_TX_BUFFER_MASK;
    1120:	20 91 7c 03 	lds	r18, 0x037C	; 0x80037c <USART_3_tx_head>
    1124:	2f 5f       	subi	r18, 0xFF	; 255
    1126:	27 70       	andi	r18, 0x07	; 7
	/* Wait for free space in buffer */
	while (USART_3_tx_elements == USART_3_TX_BUFFER_SIZE)
    1128:	90 91 7a 03 	lds	r25, 0x037A	; 0x80037a <USART_3_tx_elements>
    112c:	98 30       	cpi	r25, 0x08	; 8
    112e:	e1 f3       	breq	.-8      	; 0x1128 <USART_3_write+0x8>
		;
	/* Store data in buffer */
	USART_3_txbuf[tmphead] = data;
    1130:	e2 2f       	mov	r30, r18
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	e3 58       	subi	r30, 0x83	; 131
    1136:	fc 4f       	sbci	r31, 0xFC	; 252
    1138:	80 83       	st	Z, r24
	/* Store new index */
	USART_3_tx_head = tmphead;
    113a:	20 93 7c 03 	sts	0x037C, r18	; 0x80037c <USART_3_tx_head>
	ENTER_CRITICAL(W);
    113e:	0f b6       	in	r0, 0x3f	; 63
    1140:	f8 94       	cli
    1142:	0f 92       	push	r0
	USART_3_tx_elements++;
    1144:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <USART_3_tx_elements>
    1148:	8f 5f       	subi	r24, 0xFF	; 255
    114a:	80 93 7a 03 	sts	0x037A, r24	; 0x80037a <USART_3_tx_elements>
	EXIT_CRITICAL(W);
    114e:	0f 90       	pop	r0
    1150:	0f be       	out	0x3f, r0	; 63
	/* Enable UDRE interrupt */
	UCSR3B |= (1 << UDRIE3);
    1152:	e1 e3       	ldi	r30, 0x31	; 49
    1154:	f1 e0       	ldi	r31, 0x01	; 1
    1156:	80 81       	ld	r24, Z
    1158:	80 62       	ori	r24, 0x20	; 32
    115a:	80 83       	st	Z, r24
    115c:	08 95       	ret

0000115e <USART_3_printCHAR>:
    115e:	e0 df       	rcall	.-64     	; 0x1120 <USART_3_write>
    1160:	80 e0       	ldi	r24, 0x00	; 0
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	08 95       	ret

00001166 <USART_3_init>:
    1166:	e5 e6       	ldi	r30, 0x65	; 101
    1168:	f0 e0       	ldi	r31, 0x00	; 0
    116a:	80 81       	ld	r24, Z
    116c:	8b 7f       	andi	r24, 0xFB	; 251
    116e:	80 83       	st	Z, r24
    1170:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <__TEXT_REGION_LENGTH__+0x700135>
    1174:	87 e6       	ldi	r24, 0x67	; 103
    1176:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__TEXT_REGION_LENGTH__+0x700134>
    117a:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
    117e:	88 e9       	ldi	r24, 0x98	; 152
    1180:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <__TEXT_REGION_LENGTH__+0x700131>
    1184:	10 92 86 03 	sts	0x0386, r1	; 0x800386 <USART_3_rx_tail>
    1188:	10 92 87 03 	sts	0x0387, r1	; 0x800387 <USART_3_rx_head>
    118c:	10 92 85 03 	sts	0x0385, r1	; 0x800385 <USART_3_rx_elements>
    1190:	10 92 7b 03 	sts	0x037B, r1	; 0x80037b <USART_3_tx_tail>
    1194:	10 92 7c 03 	sts	0x037C, r1	; 0x80037c <USART_3_tx_head>
    1198:	10 92 7a 03 	sts	0x037A, r1	; 0x80037a <USART_3_tx_elements>
    119c:	80 e0       	ldi	r24, 0x00	; 0
    119e:	92 e0       	ldi	r25, 0x02	; 2
    11a0:	90 93 b5 04 	sts	0x04B5, r25	; 0x8004b5 <__iob+0x3>
    11a4:	80 93 b4 04 	sts	0x04B4, r24	; 0x8004b4 <__iob+0x2>
    11a8:	80 e0       	ldi	r24, 0x00	; 0
    11aa:	08 95       	ret

000011ac <__adddi3>:
    11ac:	2a 0d       	add	r18, r10
    11ae:	3b 1d       	adc	r19, r11
    11b0:	4c 1d       	adc	r20, r12
    11b2:	5d 1d       	adc	r21, r13
    11b4:	6e 1d       	adc	r22, r14
    11b6:	7f 1d       	adc	r23, r15
    11b8:	80 1f       	adc	r24, r16
    11ba:	91 1f       	adc	r25, r17
    11bc:	08 95       	ret

000011be <__adddi3_s8>:
    11be:	00 24       	eor	r0, r0
    11c0:	a7 fd       	sbrc	r26, 7
    11c2:	00 94       	com	r0
    11c4:	2a 0f       	add	r18, r26
    11c6:	30 1d       	adc	r19, r0
    11c8:	40 1d       	adc	r20, r0
    11ca:	50 1d       	adc	r21, r0
    11cc:	60 1d       	adc	r22, r0
    11ce:	70 1d       	adc	r23, r0
    11d0:	80 1d       	adc	r24, r0
    11d2:	90 1d       	adc	r25, r0
    11d4:	08 95       	ret

000011d6 <__cmpdi2>:
    11d6:	2a 15       	cp	r18, r10
    11d8:	3b 05       	cpc	r19, r11
    11da:	4c 05       	cpc	r20, r12
    11dc:	5d 05       	cpc	r21, r13
    11de:	6e 05       	cpc	r22, r14
    11e0:	7f 05       	cpc	r23, r15
    11e2:	80 07       	cpc	r24, r16
    11e4:	91 07       	cpc	r25, r17
    11e6:	08 95       	ret

000011e8 <strncmp>:
    11e8:	fb 01       	movw	r30, r22
    11ea:	dc 01       	movw	r26, r24
    11ec:	41 50       	subi	r20, 0x01	; 1
    11ee:	50 40       	sbci	r21, 0x00	; 0
    11f0:	30 f0       	brcs	.+12     	; 0x11fe <strncmp+0x16>
    11f2:	8d 91       	ld	r24, X+
    11f4:	01 90       	ld	r0, Z+
    11f6:	80 19       	sub	r24, r0
    11f8:	19 f4       	brne	.+6      	; 0x1200 <strncmp+0x18>
    11fa:	00 20       	and	r0, r0
    11fc:	b9 f7       	brne	.-18     	; 0x11ec <strncmp+0x4>
    11fe:	88 1b       	sub	r24, r24
    1200:	99 0b       	sbc	r25, r25
    1202:	08 95       	ret

00001204 <printf>:
    1204:	cf 93       	push	r28
    1206:	df 93       	push	r29
    1208:	cd b7       	in	r28, 0x3d	; 61
    120a:	de b7       	in	r29, 0x3e	; 62
    120c:	ae 01       	movw	r20, r28
    120e:	4a 5f       	subi	r20, 0xFA	; 250
    1210:	5f 4f       	sbci	r21, 0xFF	; 255
    1212:	fa 01       	movw	r30, r20
    1214:	61 91       	ld	r22, Z+
    1216:	71 91       	ld	r23, Z+
    1218:	af 01       	movw	r20, r30
    121a:	80 91 b4 04 	lds	r24, 0x04B4	; 0x8004b4 <__iob+0x2>
    121e:	90 91 b5 04 	lds	r25, 0x04B5	; 0x8004b5 <__iob+0x3>
    1222:	03 d0       	rcall	.+6      	; 0x122a <vfprintf>
    1224:	df 91       	pop	r29
    1226:	cf 91       	pop	r28
    1228:	08 95       	ret

0000122a <vfprintf>:
    122a:	2f 92       	push	r2
    122c:	3f 92       	push	r3
    122e:	4f 92       	push	r4
    1230:	5f 92       	push	r5
    1232:	6f 92       	push	r6
    1234:	7f 92       	push	r7
    1236:	8f 92       	push	r8
    1238:	9f 92       	push	r9
    123a:	af 92       	push	r10
    123c:	bf 92       	push	r11
    123e:	cf 92       	push	r12
    1240:	df 92       	push	r13
    1242:	ef 92       	push	r14
    1244:	ff 92       	push	r15
    1246:	0f 93       	push	r16
    1248:	1f 93       	push	r17
    124a:	cf 93       	push	r28
    124c:	df 93       	push	r29
    124e:	cd b7       	in	r28, 0x3d	; 61
    1250:	de b7       	in	r29, 0x3e	; 62
    1252:	2b 97       	sbiw	r28, 0x0b	; 11
    1254:	0f b6       	in	r0, 0x3f	; 63
    1256:	f8 94       	cli
    1258:	de bf       	out	0x3e, r29	; 62
    125a:	0f be       	out	0x3f, r0	; 63
    125c:	cd bf       	out	0x3d, r28	; 61
    125e:	6c 01       	movw	r12, r24
    1260:	7b 01       	movw	r14, r22
    1262:	8a 01       	movw	r16, r20
    1264:	fc 01       	movw	r30, r24
    1266:	17 82       	std	Z+7, r1	; 0x07
    1268:	16 82       	std	Z+6, r1	; 0x06
    126a:	83 81       	ldd	r24, Z+3	; 0x03
    126c:	81 ff       	sbrs	r24, 1
    126e:	bf c1       	rjmp	.+894    	; 0x15ee <vfprintf+0x3c4>
    1270:	ce 01       	movw	r24, r28
    1272:	01 96       	adiw	r24, 0x01	; 1
    1274:	3c 01       	movw	r6, r24
    1276:	f6 01       	movw	r30, r12
    1278:	93 81       	ldd	r25, Z+3	; 0x03
    127a:	f7 01       	movw	r30, r14
    127c:	93 fd       	sbrc	r25, 3
    127e:	85 91       	lpm	r24, Z+
    1280:	93 ff       	sbrs	r25, 3
    1282:	81 91       	ld	r24, Z+
    1284:	7f 01       	movw	r14, r30
    1286:	88 23       	and	r24, r24
    1288:	09 f4       	brne	.+2      	; 0x128c <vfprintf+0x62>
    128a:	ad c1       	rjmp	.+858    	; 0x15e6 <vfprintf+0x3bc>
    128c:	85 32       	cpi	r24, 0x25	; 37
    128e:	39 f4       	brne	.+14     	; 0x129e <vfprintf+0x74>
    1290:	93 fd       	sbrc	r25, 3
    1292:	85 91       	lpm	r24, Z+
    1294:	93 ff       	sbrs	r25, 3
    1296:	81 91       	ld	r24, Z+
    1298:	7f 01       	movw	r14, r30
    129a:	85 32       	cpi	r24, 0x25	; 37
    129c:	21 f4       	brne	.+8      	; 0x12a6 <vfprintf+0x7c>
    129e:	b6 01       	movw	r22, r12
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	d6 d1       	rcall	.+940    	; 0x1650 <fputc>
    12a4:	e8 cf       	rjmp	.-48     	; 0x1276 <vfprintf+0x4c>
    12a6:	91 2c       	mov	r9, r1
    12a8:	21 2c       	mov	r2, r1
    12aa:	31 2c       	mov	r3, r1
    12ac:	ff e1       	ldi	r31, 0x1F	; 31
    12ae:	f3 15       	cp	r31, r3
    12b0:	d8 f0       	brcs	.+54     	; 0x12e8 <vfprintf+0xbe>
    12b2:	8b 32       	cpi	r24, 0x2B	; 43
    12b4:	79 f0       	breq	.+30     	; 0x12d4 <vfprintf+0xaa>
    12b6:	38 f4       	brcc	.+14     	; 0x12c6 <vfprintf+0x9c>
    12b8:	80 32       	cpi	r24, 0x20	; 32
    12ba:	79 f0       	breq	.+30     	; 0x12da <vfprintf+0xb0>
    12bc:	83 32       	cpi	r24, 0x23	; 35
    12be:	a1 f4       	brne	.+40     	; 0x12e8 <vfprintf+0xbe>
    12c0:	23 2d       	mov	r18, r3
    12c2:	20 61       	ori	r18, 0x10	; 16
    12c4:	1d c0       	rjmp	.+58     	; 0x1300 <vfprintf+0xd6>
    12c6:	8d 32       	cpi	r24, 0x2D	; 45
    12c8:	61 f0       	breq	.+24     	; 0x12e2 <vfprintf+0xb8>
    12ca:	80 33       	cpi	r24, 0x30	; 48
    12cc:	69 f4       	brne	.+26     	; 0x12e8 <vfprintf+0xbe>
    12ce:	23 2d       	mov	r18, r3
    12d0:	21 60       	ori	r18, 0x01	; 1
    12d2:	16 c0       	rjmp	.+44     	; 0x1300 <vfprintf+0xd6>
    12d4:	83 2d       	mov	r24, r3
    12d6:	82 60       	ori	r24, 0x02	; 2
    12d8:	38 2e       	mov	r3, r24
    12da:	e3 2d       	mov	r30, r3
    12dc:	e4 60       	ori	r30, 0x04	; 4
    12de:	3e 2e       	mov	r3, r30
    12e0:	2a c0       	rjmp	.+84     	; 0x1336 <vfprintf+0x10c>
    12e2:	f3 2d       	mov	r31, r3
    12e4:	f8 60       	ori	r31, 0x08	; 8
    12e6:	1d c0       	rjmp	.+58     	; 0x1322 <vfprintf+0xf8>
    12e8:	37 fc       	sbrc	r3, 7
    12ea:	2d c0       	rjmp	.+90     	; 0x1346 <vfprintf+0x11c>
    12ec:	20 ed       	ldi	r18, 0xD0	; 208
    12ee:	28 0f       	add	r18, r24
    12f0:	2a 30       	cpi	r18, 0x0A	; 10
    12f2:	40 f0       	brcs	.+16     	; 0x1304 <vfprintf+0xda>
    12f4:	8e 32       	cpi	r24, 0x2E	; 46
    12f6:	b9 f4       	brne	.+46     	; 0x1326 <vfprintf+0xfc>
    12f8:	36 fc       	sbrc	r3, 6
    12fa:	75 c1       	rjmp	.+746    	; 0x15e6 <vfprintf+0x3bc>
    12fc:	23 2d       	mov	r18, r3
    12fe:	20 64       	ori	r18, 0x40	; 64
    1300:	32 2e       	mov	r3, r18
    1302:	19 c0       	rjmp	.+50     	; 0x1336 <vfprintf+0x10c>
    1304:	36 fe       	sbrs	r3, 6
    1306:	06 c0       	rjmp	.+12     	; 0x1314 <vfprintf+0xea>
    1308:	8a e0       	ldi	r24, 0x0A	; 10
    130a:	98 9e       	mul	r9, r24
    130c:	20 0d       	add	r18, r0
    130e:	11 24       	eor	r1, r1
    1310:	92 2e       	mov	r9, r18
    1312:	11 c0       	rjmp	.+34     	; 0x1336 <vfprintf+0x10c>
    1314:	ea e0       	ldi	r30, 0x0A	; 10
    1316:	2e 9e       	mul	r2, r30
    1318:	20 0d       	add	r18, r0
    131a:	11 24       	eor	r1, r1
    131c:	22 2e       	mov	r2, r18
    131e:	f3 2d       	mov	r31, r3
    1320:	f0 62       	ori	r31, 0x20	; 32
    1322:	3f 2e       	mov	r3, r31
    1324:	08 c0       	rjmp	.+16     	; 0x1336 <vfprintf+0x10c>
    1326:	8c 36       	cpi	r24, 0x6C	; 108
    1328:	21 f4       	brne	.+8      	; 0x1332 <vfprintf+0x108>
    132a:	83 2d       	mov	r24, r3
    132c:	80 68       	ori	r24, 0x80	; 128
    132e:	38 2e       	mov	r3, r24
    1330:	02 c0       	rjmp	.+4      	; 0x1336 <vfprintf+0x10c>
    1332:	88 36       	cpi	r24, 0x68	; 104
    1334:	41 f4       	brne	.+16     	; 0x1346 <vfprintf+0x11c>
    1336:	f7 01       	movw	r30, r14
    1338:	93 fd       	sbrc	r25, 3
    133a:	85 91       	lpm	r24, Z+
    133c:	93 ff       	sbrs	r25, 3
    133e:	81 91       	ld	r24, Z+
    1340:	7f 01       	movw	r14, r30
    1342:	81 11       	cpse	r24, r1
    1344:	b3 cf       	rjmp	.-154    	; 0x12ac <vfprintf+0x82>
    1346:	98 2f       	mov	r25, r24
    1348:	9f 7d       	andi	r25, 0xDF	; 223
    134a:	95 54       	subi	r25, 0x45	; 69
    134c:	93 30       	cpi	r25, 0x03	; 3
    134e:	28 f4       	brcc	.+10     	; 0x135a <vfprintf+0x130>
    1350:	0c 5f       	subi	r16, 0xFC	; 252
    1352:	1f 4f       	sbci	r17, 0xFF	; 255
    1354:	9f e3       	ldi	r25, 0x3F	; 63
    1356:	99 83       	std	Y+1, r25	; 0x01
    1358:	0d c0       	rjmp	.+26     	; 0x1374 <vfprintf+0x14a>
    135a:	83 36       	cpi	r24, 0x63	; 99
    135c:	31 f0       	breq	.+12     	; 0x136a <vfprintf+0x140>
    135e:	83 37       	cpi	r24, 0x73	; 115
    1360:	71 f0       	breq	.+28     	; 0x137e <vfprintf+0x154>
    1362:	83 35       	cpi	r24, 0x53	; 83
    1364:	09 f0       	breq	.+2      	; 0x1368 <vfprintf+0x13e>
    1366:	55 c0       	rjmp	.+170    	; 0x1412 <vfprintf+0x1e8>
    1368:	20 c0       	rjmp	.+64     	; 0x13aa <vfprintf+0x180>
    136a:	f8 01       	movw	r30, r16
    136c:	80 81       	ld	r24, Z
    136e:	89 83       	std	Y+1, r24	; 0x01
    1370:	0e 5f       	subi	r16, 0xFE	; 254
    1372:	1f 4f       	sbci	r17, 0xFF	; 255
    1374:	88 24       	eor	r8, r8
    1376:	83 94       	inc	r8
    1378:	91 2c       	mov	r9, r1
    137a:	53 01       	movw	r10, r6
    137c:	12 c0       	rjmp	.+36     	; 0x13a2 <vfprintf+0x178>
    137e:	28 01       	movw	r4, r16
    1380:	f2 e0       	ldi	r31, 0x02	; 2
    1382:	4f 0e       	add	r4, r31
    1384:	51 1c       	adc	r5, r1
    1386:	f8 01       	movw	r30, r16
    1388:	a0 80       	ld	r10, Z
    138a:	b1 80       	ldd	r11, Z+1	; 0x01
    138c:	36 fe       	sbrs	r3, 6
    138e:	03 c0       	rjmp	.+6      	; 0x1396 <vfprintf+0x16c>
    1390:	69 2d       	mov	r22, r9
    1392:	70 e0       	ldi	r23, 0x00	; 0
    1394:	02 c0       	rjmp	.+4      	; 0x139a <vfprintf+0x170>
    1396:	6f ef       	ldi	r22, 0xFF	; 255
    1398:	7f ef       	ldi	r23, 0xFF	; 255
    139a:	c5 01       	movw	r24, r10
    139c:	4e d1       	rcall	.+668    	; 0x163a <strnlen>
    139e:	4c 01       	movw	r8, r24
    13a0:	82 01       	movw	r16, r4
    13a2:	f3 2d       	mov	r31, r3
    13a4:	ff 77       	andi	r31, 0x7F	; 127
    13a6:	3f 2e       	mov	r3, r31
    13a8:	15 c0       	rjmp	.+42     	; 0x13d4 <vfprintf+0x1aa>
    13aa:	28 01       	movw	r4, r16
    13ac:	22 e0       	ldi	r18, 0x02	; 2
    13ae:	42 0e       	add	r4, r18
    13b0:	51 1c       	adc	r5, r1
    13b2:	f8 01       	movw	r30, r16
    13b4:	a0 80       	ld	r10, Z
    13b6:	b1 80       	ldd	r11, Z+1	; 0x01
    13b8:	36 fe       	sbrs	r3, 6
    13ba:	03 c0       	rjmp	.+6      	; 0x13c2 <vfprintf+0x198>
    13bc:	69 2d       	mov	r22, r9
    13be:	70 e0       	ldi	r23, 0x00	; 0
    13c0:	02 c0       	rjmp	.+4      	; 0x13c6 <vfprintf+0x19c>
    13c2:	6f ef       	ldi	r22, 0xFF	; 255
    13c4:	7f ef       	ldi	r23, 0xFF	; 255
    13c6:	c5 01       	movw	r24, r10
    13c8:	2d d1       	rcall	.+602    	; 0x1624 <strnlen_P>
    13ca:	4c 01       	movw	r8, r24
    13cc:	f3 2d       	mov	r31, r3
    13ce:	f0 68       	ori	r31, 0x80	; 128
    13d0:	3f 2e       	mov	r3, r31
    13d2:	82 01       	movw	r16, r4
    13d4:	33 fc       	sbrc	r3, 3
    13d6:	19 c0       	rjmp	.+50     	; 0x140a <vfprintf+0x1e0>
    13d8:	82 2d       	mov	r24, r2
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	88 16       	cp	r8, r24
    13de:	99 06       	cpc	r9, r25
    13e0:	a0 f4       	brcc	.+40     	; 0x140a <vfprintf+0x1e0>
    13e2:	b6 01       	movw	r22, r12
    13e4:	80 e2       	ldi	r24, 0x20	; 32
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	33 d1       	rcall	.+614    	; 0x1650 <fputc>
    13ea:	2a 94       	dec	r2
    13ec:	f5 cf       	rjmp	.-22     	; 0x13d8 <vfprintf+0x1ae>
    13ee:	f5 01       	movw	r30, r10
    13f0:	37 fc       	sbrc	r3, 7
    13f2:	85 91       	lpm	r24, Z+
    13f4:	37 fe       	sbrs	r3, 7
    13f6:	81 91       	ld	r24, Z+
    13f8:	5f 01       	movw	r10, r30
    13fa:	b6 01       	movw	r22, r12
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	28 d1       	rcall	.+592    	; 0x1650 <fputc>
    1400:	21 10       	cpse	r2, r1
    1402:	2a 94       	dec	r2
    1404:	21 e0       	ldi	r18, 0x01	; 1
    1406:	82 1a       	sub	r8, r18
    1408:	91 08       	sbc	r9, r1
    140a:	81 14       	cp	r8, r1
    140c:	91 04       	cpc	r9, r1
    140e:	79 f7       	brne	.-34     	; 0x13ee <vfprintf+0x1c4>
    1410:	e1 c0       	rjmp	.+450    	; 0x15d4 <vfprintf+0x3aa>
    1412:	84 36       	cpi	r24, 0x64	; 100
    1414:	11 f0       	breq	.+4      	; 0x141a <vfprintf+0x1f0>
    1416:	89 36       	cpi	r24, 0x69	; 105
    1418:	39 f5       	brne	.+78     	; 0x1468 <vfprintf+0x23e>
    141a:	f8 01       	movw	r30, r16
    141c:	37 fe       	sbrs	r3, 7
    141e:	07 c0       	rjmp	.+14     	; 0x142e <vfprintf+0x204>
    1420:	60 81       	ld	r22, Z
    1422:	71 81       	ldd	r23, Z+1	; 0x01
    1424:	82 81       	ldd	r24, Z+2	; 0x02
    1426:	93 81       	ldd	r25, Z+3	; 0x03
    1428:	0c 5f       	subi	r16, 0xFC	; 252
    142a:	1f 4f       	sbci	r17, 0xFF	; 255
    142c:	08 c0       	rjmp	.+16     	; 0x143e <vfprintf+0x214>
    142e:	60 81       	ld	r22, Z
    1430:	71 81       	ldd	r23, Z+1	; 0x01
    1432:	07 2e       	mov	r0, r23
    1434:	00 0c       	add	r0, r0
    1436:	88 0b       	sbc	r24, r24
    1438:	99 0b       	sbc	r25, r25
    143a:	0e 5f       	subi	r16, 0xFE	; 254
    143c:	1f 4f       	sbci	r17, 0xFF	; 255
    143e:	f3 2d       	mov	r31, r3
    1440:	ff 76       	andi	r31, 0x6F	; 111
    1442:	3f 2e       	mov	r3, r31
    1444:	97 ff       	sbrs	r25, 7
    1446:	09 c0       	rjmp	.+18     	; 0x145a <vfprintf+0x230>
    1448:	90 95       	com	r25
    144a:	80 95       	com	r24
    144c:	70 95       	com	r23
    144e:	61 95       	neg	r22
    1450:	7f 4f       	sbci	r23, 0xFF	; 255
    1452:	8f 4f       	sbci	r24, 0xFF	; 255
    1454:	9f 4f       	sbci	r25, 0xFF	; 255
    1456:	f0 68       	ori	r31, 0x80	; 128
    1458:	3f 2e       	mov	r3, r31
    145a:	2a e0       	ldi	r18, 0x0A	; 10
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	a3 01       	movw	r20, r6
    1460:	33 d1       	rcall	.+614    	; 0x16c8 <__ultoa_invert>
    1462:	88 2e       	mov	r8, r24
    1464:	86 18       	sub	r8, r6
    1466:	44 c0       	rjmp	.+136    	; 0x14f0 <vfprintf+0x2c6>
    1468:	85 37       	cpi	r24, 0x75	; 117
    146a:	31 f4       	brne	.+12     	; 0x1478 <vfprintf+0x24e>
    146c:	23 2d       	mov	r18, r3
    146e:	2f 7e       	andi	r18, 0xEF	; 239
    1470:	b2 2e       	mov	r11, r18
    1472:	2a e0       	ldi	r18, 0x0A	; 10
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	25 c0       	rjmp	.+74     	; 0x14c2 <vfprintf+0x298>
    1478:	93 2d       	mov	r25, r3
    147a:	99 7f       	andi	r25, 0xF9	; 249
    147c:	b9 2e       	mov	r11, r25
    147e:	8f 36       	cpi	r24, 0x6F	; 111
    1480:	c1 f0       	breq	.+48     	; 0x14b2 <vfprintf+0x288>
    1482:	18 f4       	brcc	.+6      	; 0x148a <vfprintf+0x260>
    1484:	88 35       	cpi	r24, 0x58	; 88
    1486:	79 f0       	breq	.+30     	; 0x14a6 <vfprintf+0x27c>
    1488:	ae c0       	rjmp	.+348    	; 0x15e6 <vfprintf+0x3bc>
    148a:	80 37       	cpi	r24, 0x70	; 112
    148c:	19 f0       	breq	.+6      	; 0x1494 <vfprintf+0x26a>
    148e:	88 37       	cpi	r24, 0x78	; 120
    1490:	21 f0       	breq	.+8      	; 0x149a <vfprintf+0x270>
    1492:	a9 c0       	rjmp	.+338    	; 0x15e6 <vfprintf+0x3bc>
    1494:	e9 2f       	mov	r30, r25
    1496:	e0 61       	ori	r30, 0x10	; 16
    1498:	be 2e       	mov	r11, r30
    149a:	b4 fe       	sbrs	r11, 4
    149c:	0d c0       	rjmp	.+26     	; 0x14b8 <vfprintf+0x28e>
    149e:	fb 2d       	mov	r31, r11
    14a0:	f4 60       	ori	r31, 0x04	; 4
    14a2:	bf 2e       	mov	r11, r31
    14a4:	09 c0       	rjmp	.+18     	; 0x14b8 <vfprintf+0x28e>
    14a6:	34 fe       	sbrs	r3, 4
    14a8:	0a c0       	rjmp	.+20     	; 0x14be <vfprintf+0x294>
    14aa:	29 2f       	mov	r18, r25
    14ac:	26 60       	ori	r18, 0x06	; 6
    14ae:	b2 2e       	mov	r11, r18
    14b0:	06 c0       	rjmp	.+12     	; 0x14be <vfprintf+0x294>
    14b2:	28 e0       	ldi	r18, 0x08	; 8
    14b4:	30 e0       	ldi	r19, 0x00	; 0
    14b6:	05 c0       	rjmp	.+10     	; 0x14c2 <vfprintf+0x298>
    14b8:	20 e1       	ldi	r18, 0x10	; 16
    14ba:	30 e0       	ldi	r19, 0x00	; 0
    14bc:	02 c0       	rjmp	.+4      	; 0x14c2 <vfprintf+0x298>
    14be:	20 e1       	ldi	r18, 0x10	; 16
    14c0:	32 e0       	ldi	r19, 0x02	; 2
    14c2:	f8 01       	movw	r30, r16
    14c4:	b7 fe       	sbrs	r11, 7
    14c6:	07 c0       	rjmp	.+14     	; 0x14d6 <vfprintf+0x2ac>
    14c8:	60 81       	ld	r22, Z
    14ca:	71 81       	ldd	r23, Z+1	; 0x01
    14cc:	82 81       	ldd	r24, Z+2	; 0x02
    14ce:	93 81       	ldd	r25, Z+3	; 0x03
    14d0:	0c 5f       	subi	r16, 0xFC	; 252
    14d2:	1f 4f       	sbci	r17, 0xFF	; 255
    14d4:	06 c0       	rjmp	.+12     	; 0x14e2 <vfprintf+0x2b8>
    14d6:	60 81       	ld	r22, Z
    14d8:	71 81       	ldd	r23, Z+1	; 0x01
    14da:	80 e0       	ldi	r24, 0x00	; 0
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	0e 5f       	subi	r16, 0xFE	; 254
    14e0:	1f 4f       	sbci	r17, 0xFF	; 255
    14e2:	a3 01       	movw	r20, r6
    14e4:	f1 d0       	rcall	.+482    	; 0x16c8 <__ultoa_invert>
    14e6:	88 2e       	mov	r8, r24
    14e8:	86 18       	sub	r8, r6
    14ea:	fb 2d       	mov	r31, r11
    14ec:	ff 77       	andi	r31, 0x7F	; 127
    14ee:	3f 2e       	mov	r3, r31
    14f0:	36 fe       	sbrs	r3, 6
    14f2:	0d c0       	rjmp	.+26     	; 0x150e <vfprintf+0x2e4>
    14f4:	23 2d       	mov	r18, r3
    14f6:	2e 7f       	andi	r18, 0xFE	; 254
    14f8:	a2 2e       	mov	r10, r18
    14fa:	89 14       	cp	r8, r9
    14fc:	58 f4       	brcc	.+22     	; 0x1514 <vfprintf+0x2ea>
    14fe:	34 fe       	sbrs	r3, 4
    1500:	0b c0       	rjmp	.+22     	; 0x1518 <vfprintf+0x2ee>
    1502:	32 fc       	sbrc	r3, 2
    1504:	09 c0       	rjmp	.+18     	; 0x1518 <vfprintf+0x2ee>
    1506:	83 2d       	mov	r24, r3
    1508:	8e 7e       	andi	r24, 0xEE	; 238
    150a:	a8 2e       	mov	r10, r24
    150c:	05 c0       	rjmp	.+10     	; 0x1518 <vfprintf+0x2ee>
    150e:	b8 2c       	mov	r11, r8
    1510:	a3 2c       	mov	r10, r3
    1512:	03 c0       	rjmp	.+6      	; 0x151a <vfprintf+0x2f0>
    1514:	b8 2c       	mov	r11, r8
    1516:	01 c0       	rjmp	.+2      	; 0x151a <vfprintf+0x2f0>
    1518:	b9 2c       	mov	r11, r9
    151a:	a4 fe       	sbrs	r10, 4
    151c:	0f c0       	rjmp	.+30     	; 0x153c <vfprintf+0x312>
    151e:	fe 01       	movw	r30, r28
    1520:	e8 0d       	add	r30, r8
    1522:	f1 1d       	adc	r31, r1
    1524:	80 81       	ld	r24, Z
    1526:	80 33       	cpi	r24, 0x30	; 48
    1528:	21 f4       	brne	.+8      	; 0x1532 <vfprintf+0x308>
    152a:	9a 2d       	mov	r25, r10
    152c:	99 7e       	andi	r25, 0xE9	; 233
    152e:	a9 2e       	mov	r10, r25
    1530:	09 c0       	rjmp	.+18     	; 0x1544 <vfprintf+0x31a>
    1532:	a2 fe       	sbrs	r10, 2
    1534:	06 c0       	rjmp	.+12     	; 0x1542 <vfprintf+0x318>
    1536:	b3 94       	inc	r11
    1538:	b3 94       	inc	r11
    153a:	04 c0       	rjmp	.+8      	; 0x1544 <vfprintf+0x31a>
    153c:	8a 2d       	mov	r24, r10
    153e:	86 78       	andi	r24, 0x86	; 134
    1540:	09 f0       	breq	.+2      	; 0x1544 <vfprintf+0x31a>
    1542:	b3 94       	inc	r11
    1544:	a3 fc       	sbrc	r10, 3
    1546:	10 c0       	rjmp	.+32     	; 0x1568 <vfprintf+0x33e>
    1548:	a0 fe       	sbrs	r10, 0
    154a:	06 c0       	rjmp	.+12     	; 0x1558 <vfprintf+0x32e>
    154c:	b2 14       	cp	r11, r2
    154e:	80 f4       	brcc	.+32     	; 0x1570 <vfprintf+0x346>
    1550:	28 0c       	add	r2, r8
    1552:	92 2c       	mov	r9, r2
    1554:	9b 18       	sub	r9, r11
    1556:	0d c0       	rjmp	.+26     	; 0x1572 <vfprintf+0x348>
    1558:	b2 14       	cp	r11, r2
    155a:	58 f4       	brcc	.+22     	; 0x1572 <vfprintf+0x348>
    155c:	b6 01       	movw	r22, r12
    155e:	80 e2       	ldi	r24, 0x20	; 32
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	76 d0       	rcall	.+236    	; 0x1650 <fputc>
    1564:	b3 94       	inc	r11
    1566:	f8 cf       	rjmp	.-16     	; 0x1558 <vfprintf+0x32e>
    1568:	b2 14       	cp	r11, r2
    156a:	18 f4       	brcc	.+6      	; 0x1572 <vfprintf+0x348>
    156c:	2b 18       	sub	r2, r11
    156e:	02 c0       	rjmp	.+4      	; 0x1574 <vfprintf+0x34a>
    1570:	98 2c       	mov	r9, r8
    1572:	21 2c       	mov	r2, r1
    1574:	a4 fe       	sbrs	r10, 4
    1576:	0f c0       	rjmp	.+30     	; 0x1596 <vfprintf+0x36c>
    1578:	b6 01       	movw	r22, r12
    157a:	80 e3       	ldi	r24, 0x30	; 48
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	68 d0       	rcall	.+208    	; 0x1650 <fputc>
    1580:	a2 fe       	sbrs	r10, 2
    1582:	16 c0       	rjmp	.+44     	; 0x15b0 <vfprintf+0x386>
    1584:	a1 fc       	sbrc	r10, 1
    1586:	03 c0       	rjmp	.+6      	; 0x158e <vfprintf+0x364>
    1588:	88 e7       	ldi	r24, 0x78	; 120
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	02 c0       	rjmp	.+4      	; 0x1592 <vfprintf+0x368>
    158e:	88 e5       	ldi	r24, 0x58	; 88
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	b6 01       	movw	r22, r12
    1594:	0c c0       	rjmp	.+24     	; 0x15ae <vfprintf+0x384>
    1596:	8a 2d       	mov	r24, r10
    1598:	86 78       	andi	r24, 0x86	; 134
    159a:	51 f0       	breq	.+20     	; 0x15b0 <vfprintf+0x386>
    159c:	a1 fe       	sbrs	r10, 1
    159e:	02 c0       	rjmp	.+4      	; 0x15a4 <vfprintf+0x37a>
    15a0:	8b e2       	ldi	r24, 0x2B	; 43
    15a2:	01 c0       	rjmp	.+2      	; 0x15a6 <vfprintf+0x37c>
    15a4:	80 e2       	ldi	r24, 0x20	; 32
    15a6:	a7 fc       	sbrc	r10, 7
    15a8:	8d e2       	ldi	r24, 0x2D	; 45
    15aa:	b6 01       	movw	r22, r12
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	50 d0       	rcall	.+160    	; 0x1650 <fputc>
    15b0:	89 14       	cp	r8, r9
    15b2:	30 f4       	brcc	.+12     	; 0x15c0 <vfprintf+0x396>
    15b4:	b6 01       	movw	r22, r12
    15b6:	80 e3       	ldi	r24, 0x30	; 48
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	4a d0       	rcall	.+148    	; 0x1650 <fputc>
    15bc:	9a 94       	dec	r9
    15be:	f8 cf       	rjmp	.-16     	; 0x15b0 <vfprintf+0x386>
    15c0:	8a 94       	dec	r8
    15c2:	f3 01       	movw	r30, r6
    15c4:	e8 0d       	add	r30, r8
    15c6:	f1 1d       	adc	r31, r1
    15c8:	80 81       	ld	r24, Z
    15ca:	b6 01       	movw	r22, r12
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	40 d0       	rcall	.+128    	; 0x1650 <fputc>
    15d0:	81 10       	cpse	r8, r1
    15d2:	f6 cf       	rjmp	.-20     	; 0x15c0 <vfprintf+0x396>
    15d4:	22 20       	and	r2, r2
    15d6:	09 f4       	brne	.+2      	; 0x15da <vfprintf+0x3b0>
    15d8:	4e ce       	rjmp	.-868    	; 0x1276 <vfprintf+0x4c>
    15da:	b6 01       	movw	r22, r12
    15dc:	80 e2       	ldi	r24, 0x20	; 32
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	37 d0       	rcall	.+110    	; 0x1650 <fputc>
    15e2:	2a 94       	dec	r2
    15e4:	f7 cf       	rjmp	.-18     	; 0x15d4 <vfprintf+0x3aa>
    15e6:	f6 01       	movw	r30, r12
    15e8:	86 81       	ldd	r24, Z+6	; 0x06
    15ea:	97 81       	ldd	r25, Z+7	; 0x07
    15ec:	02 c0       	rjmp	.+4      	; 0x15f2 <vfprintf+0x3c8>
    15ee:	8f ef       	ldi	r24, 0xFF	; 255
    15f0:	9f ef       	ldi	r25, 0xFF	; 255
    15f2:	2b 96       	adiw	r28, 0x0b	; 11
    15f4:	0f b6       	in	r0, 0x3f	; 63
    15f6:	f8 94       	cli
    15f8:	de bf       	out	0x3e, r29	; 62
    15fa:	0f be       	out	0x3f, r0	; 63
    15fc:	cd bf       	out	0x3d, r28	; 61
    15fe:	df 91       	pop	r29
    1600:	cf 91       	pop	r28
    1602:	1f 91       	pop	r17
    1604:	0f 91       	pop	r16
    1606:	ff 90       	pop	r15
    1608:	ef 90       	pop	r14
    160a:	df 90       	pop	r13
    160c:	cf 90       	pop	r12
    160e:	bf 90       	pop	r11
    1610:	af 90       	pop	r10
    1612:	9f 90       	pop	r9
    1614:	8f 90       	pop	r8
    1616:	7f 90       	pop	r7
    1618:	6f 90       	pop	r6
    161a:	5f 90       	pop	r5
    161c:	4f 90       	pop	r4
    161e:	3f 90       	pop	r3
    1620:	2f 90       	pop	r2
    1622:	08 95       	ret

00001624 <strnlen_P>:
    1624:	fc 01       	movw	r30, r24
    1626:	05 90       	lpm	r0, Z+
    1628:	61 50       	subi	r22, 0x01	; 1
    162a:	70 40       	sbci	r23, 0x00	; 0
    162c:	01 10       	cpse	r0, r1
    162e:	d8 f7       	brcc	.-10     	; 0x1626 <strnlen_P+0x2>
    1630:	80 95       	com	r24
    1632:	90 95       	com	r25
    1634:	8e 0f       	add	r24, r30
    1636:	9f 1f       	adc	r25, r31
    1638:	08 95       	ret

0000163a <strnlen>:
    163a:	fc 01       	movw	r30, r24
    163c:	61 50       	subi	r22, 0x01	; 1
    163e:	70 40       	sbci	r23, 0x00	; 0
    1640:	01 90       	ld	r0, Z+
    1642:	01 10       	cpse	r0, r1
    1644:	d8 f7       	brcc	.-10     	; 0x163c <strnlen+0x2>
    1646:	80 95       	com	r24
    1648:	90 95       	com	r25
    164a:	8e 0f       	add	r24, r30
    164c:	9f 1f       	adc	r25, r31
    164e:	08 95       	ret

00001650 <fputc>:
    1650:	0f 93       	push	r16
    1652:	1f 93       	push	r17
    1654:	cf 93       	push	r28
    1656:	df 93       	push	r29
    1658:	fb 01       	movw	r30, r22
    165a:	23 81       	ldd	r18, Z+3	; 0x03
    165c:	21 fd       	sbrc	r18, 1
    165e:	03 c0       	rjmp	.+6      	; 0x1666 <fputc+0x16>
    1660:	8f ef       	ldi	r24, 0xFF	; 255
    1662:	9f ef       	ldi	r25, 0xFF	; 255
    1664:	2c c0       	rjmp	.+88     	; 0x16be <fputc+0x6e>
    1666:	22 ff       	sbrs	r18, 2
    1668:	16 c0       	rjmp	.+44     	; 0x1696 <fputc+0x46>
    166a:	46 81       	ldd	r20, Z+6	; 0x06
    166c:	57 81       	ldd	r21, Z+7	; 0x07
    166e:	24 81       	ldd	r18, Z+4	; 0x04
    1670:	35 81       	ldd	r19, Z+5	; 0x05
    1672:	42 17       	cp	r20, r18
    1674:	53 07       	cpc	r21, r19
    1676:	44 f4       	brge	.+16     	; 0x1688 <fputc+0x38>
    1678:	a0 81       	ld	r26, Z
    167a:	b1 81       	ldd	r27, Z+1	; 0x01
    167c:	9d 01       	movw	r18, r26
    167e:	2f 5f       	subi	r18, 0xFF	; 255
    1680:	3f 4f       	sbci	r19, 0xFF	; 255
    1682:	31 83       	std	Z+1, r19	; 0x01
    1684:	20 83       	st	Z, r18
    1686:	8c 93       	st	X, r24
    1688:	26 81       	ldd	r18, Z+6	; 0x06
    168a:	37 81       	ldd	r19, Z+7	; 0x07
    168c:	2f 5f       	subi	r18, 0xFF	; 255
    168e:	3f 4f       	sbci	r19, 0xFF	; 255
    1690:	37 83       	std	Z+7, r19	; 0x07
    1692:	26 83       	std	Z+6, r18	; 0x06
    1694:	14 c0       	rjmp	.+40     	; 0x16be <fputc+0x6e>
    1696:	8b 01       	movw	r16, r22
    1698:	ec 01       	movw	r28, r24
    169a:	fb 01       	movw	r30, r22
    169c:	00 84       	ldd	r0, Z+8	; 0x08
    169e:	f1 85       	ldd	r31, Z+9	; 0x09
    16a0:	e0 2d       	mov	r30, r0
    16a2:	19 95       	eicall
    16a4:	89 2b       	or	r24, r25
    16a6:	e1 f6       	brne	.-72     	; 0x1660 <fputc+0x10>
    16a8:	d8 01       	movw	r26, r16
    16aa:	16 96       	adiw	r26, 0x06	; 6
    16ac:	8d 91       	ld	r24, X+
    16ae:	9c 91       	ld	r25, X
    16b0:	17 97       	sbiw	r26, 0x07	; 7
    16b2:	01 96       	adiw	r24, 0x01	; 1
    16b4:	17 96       	adiw	r26, 0x07	; 7
    16b6:	9c 93       	st	X, r25
    16b8:	8e 93       	st	-X, r24
    16ba:	16 97       	sbiw	r26, 0x06	; 6
    16bc:	ce 01       	movw	r24, r28
    16be:	df 91       	pop	r29
    16c0:	cf 91       	pop	r28
    16c2:	1f 91       	pop	r17
    16c4:	0f 91       	pop	r16
    16c6:	08 95       	ret

000016c8 <__ultoa_invert>:
    16c8:	fa 01       	movw	r30, r20
    16ca:	aa 27       	eor	r26, r26
    16cc:	28 30       	cpi	r18, 0x08	; 8
    16ce:	51 f1       	breq	.+84     	; 0x1724 <__ultoa_invert+0x5c>
    16d0:	20 31       	cpi	r18, 0x10	; 16
    16d2:	81 f1       	breq	.+96     	; 0x1734 <__ultoa_invert+0x6c>
    16d4:	e8 94       	clt
    16d6:	6f 93       	push	r22
    16d8:	6e 7f       	andi	r22, 0xFE	; 254
    16da:	6e 5f       	subi	r22, 0xFE	; 254
    16dc:	7f 4f       	sbci	r23, 0xFF	; 255
    16de:	8f 4f       	sbci	r24, 0xFF	; 255
    16e0:	9f 4f       	sbci	r25, 0xFF	; 255
    16e2:	af 4f       	sbci	r26, 0xFF	; 255
    16e4:	b1 e0       	ldi	r27, 0x01	; 1
    16e6:	3e d0       	rcall	.+124    	; 0x1764 <__ultoa_invert+0x9c>
    16e8:	b4 e0       	ldi	r27, 0x04	; 4
    16ea:	3c d0       	rcall	.+120    	; 0x1764 <__ultoa_invert+0x9c>
    16ec:	67 0f       	add	r22, r23
    16ee:	78 1f       	adc	r23, r24
    16f0:	89 1f       	adc	r24, r25
    16f2:	9a 1f       	adc	r25, r26
    16f4:	a1 1d       	adc	r26, r1
    16f6:	68 0f       	add	r22, r24
    16f8:	79 1f       	adc	r23, r25
    16fa:	8a 1f       	adc	r24, r26
    16fc:	91 1d       	adc	r25, r1
    16fe:	a1 1d       	adc	r26, r1
    1700:	6a 0f       	add	r22, r26
    1702:	71 1d       	adc	r23, r1
    1704:	81 1d       	adc	r24, r1
    1706:	91 1d       	adc	r25, r1
    1708:	a1 1d       	adc	r26, r1
    170a:	20 d0       	rcall	.+64     	; 0x174c <__ultoa_invert+0x84>
    170c:	09 f4       	brne	.+2      	; 0x1710 <__ultoa_invert+0x48>
    170e:	68 94       	set
    1710:	3f 91       	pop	r19
    1712:	2a e0       	ldi	r18, 0x0A	; 10
    1714:	26 9f       	mul	r18, r22
    1716:	11 24       	eor	r1, r1
    1718:	30 19       	sub	r19, r0
    171a:	30 5d       	subi	r19, 0xD0	; 208
    171c:	31 93       	st	Z+, r19
    171e:	de f6       	brtc	.-74     	; 0x16d6 <__ultoa_invert+0xe>
    1720:	cf 01       	movw	r24, r30
    1722:	08 95       	ret
    1724:	46 2f       	mov	r20, r22
    1726:	47 70       	andi	r20, 0x07	; 7
    1728:	40 5d       	subi	r20, 0xD0	; 208
    172a:	41 93       	st	Z+, r20
    172c:	b3 e0       	ldi	r27, 0x03	; 3
    172e:	0f d0       	rcall	.+30     	; 0x174e <__ultoa_invert+0x86>
    1730:	c9 f7       	brne	.-14     	; 0x1724 <__ultoa_invert+0x5c>
    1732:	f6 cf       	rjmp	.-20     	; 0x1720 <__ultoa_invert+0x58>
    1734:	46 2f       	mov	r20, r22
    1736:	4f 70       	andi	r20, 0x0F	; 15
    1738:	40 5d       	subi	r20, 0xD0	; 208
    173a:	4a 33       	cpi	r20, 0x3A	; 58
    173c:	18 f0       	brcs	.+6      	; 0x1744 <__ultoa_invert+0x7c>
    173e:	49 5d       	subi	r20, 0xD9	; 217
    1740:	31 fd       	sbrc	r19, 1
    1742:	40 52       	subi	r20, 0x20	; 32
    1744:	41 93       	st	Z+, r20
    1746:	02 d0       	rcall	.+4      	; 0x174c <__ultoa_invert+0x84>
    1748:	a9 f7       	brne	.-22     	; 0x1734 <__ultoa_invert+0x6c>
    174a:	ea cf       	rjmp	.-44     	; 0x1720 <__ultoa_invert+0x58>
    174c:	b4 e0       	ldi	r27, 0x04	; 4
    174e:	a6 95       	lsr	r26
    1750:	97 95       	ror	r25
    1752:	87 95       	ror	r24
    1754:	77 95       	ror	r23
    1756:	67 95       	ror	r22
    1758:	ba 95       	dec	r27
    175a:	c9 f7       	brne	.-14     	; 0x174e <__ultoa_invert+0x86>
    175c:	00 97       	sbiw	r24, 0x00	; 0
    175e:	61 05       	cpc	r22, r1
    1760:	71 05       	cpc	r23, r1
    1762:	08 95       	ret
    1764:	9b 01       	movw	r18, r22
    1766:	ac 01       	movw	r20, r24
    1768:	0a 2e       	mov	r0, r26
    176a:	06 94       	lsr	r0
    176c:	57 95       	ror	r21
    176e:	47 95       	ror	r20
    1770:	37 95       	ror	r19
    1772:	27 95       	ror	r18
    1774:	ba 95       	dec	r27
    1776:	c9 f7       	brne	.-14     	; 0x176a <__ultoa_invert+0xa2>
    1778:	62 0f       	add	r22, r18
    177a:	73 1f       	adc	r23, r19
    177c:	84 1f       	adc	r24, r20
    177e:	95 1f       	adc	r25, r21
    1780:	a0 1d       	adc	r26, r0
    1782:	08 95       	ret

00001784 <_exit>:
    1784:	f8 94       	cli

00001786 <__stop_program>:
    1786:	ff cf       	rjmp	.-2      	; 0x1786 <__stop_program>
